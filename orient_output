 3/1: file = open("D:\ФФ\Прак_оптика\kurs_opt\0.1.txt", "r")
 3/2: file = open(D:\ФФ\Прак_оптика\kurs_opt\0.1.txt, "r")
 3/3: file = open('D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
 3/4: file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
 3/5: file.read(file)
 3/6: file.read()
 3/7: data = file.read()
 3/8:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
file.read()
 3/9:
data = file.read()
data.split('\')
3/10:
data = file.read()
data.split('\')
3/11:
data = file.read()
data.split(r'\n')
3/12:
data = file.read()
data.split(r'\')
3/13:
data = file.read()
data.split(' ')
3/14:
data = file.read()
data.split()
3/15:
data = file.read()
data.splitlines()
3/16:
data = file.read()
data
data.splitlines()
3/17:
data = file.read()
data
3/18:
data = file.read()
data
3/19: file.split
3/20:
data = file.read()
data
3/21: file.split
3/22:
data = file.read()
data
3/23: file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
3/24:
data = file.read()
data
3/25:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
data = file.read()
file.close()
3/26: data.split()
3/27:
data.split()
data.remove(0:3)
3/28:
data.split()
data.remove(:3)
3/29:
data.split()
data.remove([:3])
3/30:
data.split()
data.pop(:3)
3/31:
data.split()
data.pop(0:3)
3/32:
data.split()
del data[0:3]
3/33:
data.split()
#del data[0:3]
3/34:
data.split()
del data[0]
3/35:
typeof(data.split())
#del data[0]
3/36:
islist(data.split())
#del data[0]
3/37:
isinstance(data.split(), list)
#del data[0]
3/38:
isinstance(data.split(), str)
#del data[0]
3/39:
data.split()
data
#del data[0]
3/40:
data = data.split()
del data[0]
3/41:
data = data.split()
del data[0:3]
3/42:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
data = file.read()
file.close()
3/43:
data = data.split()
del data[0:3]
3/44:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
data = file.read()
file.close()
3/45:
data = data.split()
del data[0:3]
del data[-1]
data
3/46:
data = data.split()
del data[0:3]
del data[-1]
data
3/47:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
data = file.read()
file.close()
3/48:
data = data.split()
del data[0:3]
del data[-1]
data
3/49:
data = raw_data.split()
del data[0:3]
del data[-1]
data
3/50:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
raw_data = file.read()
file.close()
3/51:
data = raw_data.split()
del data[0:3]
del data[-1]
data
3/52:
data = raw_data.split()
del data[0]
del data[-1]
data
3/53:
data = raw_data.split()
del data[0]
del data[-1]
print(data)
3/54:
data = raw_data.split()
del data[0:3]
del data[-1]
print(data)
3/55:
data = raw_data.split()
del data[0:3]
del data[-1]
print(data)
3/56: data.split
3/57:
data = raw_data.split()
del data[0:3]
del data[-1]
print(data)
3/58:
data = raw_data.split()
del data[0:6]
del data[-1]
print(data)
3/59:
data = raw_data.split()
del data[0:7]
del data[-1]
print(data)
3/60: data1 = [[i, i+1]] for i in data if %2 == 0
3/61: data1 = [[i, i+1],] for i in data if %2 == 0
3/62: data1 = [i] for i in data if %2 == 0
3/63: data1 = [i for i in data if i % 2 == 0]
3/64:
data = raw_data.split()
del data[0:7]
del data[-1]
map(float, data)
print(data)
3/65:
data = raw_data.split()
del data[0:7]
del data[-1]
data = list(map(float, data))
print(data)
3/66:
data = raw_data.split()
del data[0:7]
del data[-1]
data = list(map(float(), data))
print(data)
3/67:
data = raw_data.split()
del data[0:7]
del data[-1]
data = list(map(float, data))
print(data)
3/68: float('123')
3/69:
data = raw_data.split()
del data[0:7]
del data[-1]
data = list(map(split, data))
print(data)
3/70: list(map(float['123', '123']))
3/71:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
raw_data = file.read()
file.close()
3/72:
data = raw_data.split()
del data[0:7]
del data[-1]
data = list(map(float, data))
print(data)
3/73:
data = raw_data.split()
#del data[0:7]
#del data[-1]
#data = list(map(float, data))
print(data)
3/74:
data = raw_data.split()
del data[0:7]
del data[-1]
#data = list(map(float, data))
print(data)
3/75:
data = raw_data.split()
del data[0:7]
del data[-1]
data = list(map(float, data))
print(data)
3/76: float('200,0')
3/77: float('200.0')
 4/1:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
raw_data = file.read()
file.close()
 4/2:
data = raw_data.remove(',')
data = data.split()
del data[0:7]
del data[-1]
data = list(map(float, data))
print(data)
 4/3:
data = raw_data.replace(",", "")
data = data.split()
del data[0:7]
del data[-1]
data = list(map(float, data))
print(data)
 4/4:
data = raw_data.replace(",", "")
data = data.split()
del data[0:7]
del data[-1]
#data = list(map(float, data))
print(data)
 4/5:
data = raw_data.replace(",", ".")
data = data.split()
del data[0:7]
del data[-1]
#data = list(map(float, data))
print(data)
 4/6:
data = raw_data.replace(",", ".")
data = data.split()
del data[0:7]
del data[-1]
data = list(map(float, data))
print(data)
 4/7:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
raw_data = file.read()
file.close()
print(raw_data)
 4/8:
data = raw_data.replace(",", ".")
data = data.split()
del data[0:7]
#del data[-1]
data = list(map(float, data))
print(data)
 4/9:
x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
4/10: import numpy as np
4/11: import numpy as np
4/12:
x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
4/13:
x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
print(x_data)
4/14:
x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
print(x_data)
print(y_data)
4/15: plt.plot(x_data, y_data)
4/16:
import numpy as np
import matplotlib as plt
4/17:
import numpy as np
import matplotlib as plt
4/18: plt.plot(x_data, y_data)
4/19:
file = open(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt', "r")
raw_data = file.read()
file.close()
print(raw_data)
4/20:
data = raw_data.replace(",", ".")
data = data.split()
del data[0:7]
del data[-1]
data = list(map(float, data))
print(data)
4/21:
import numbers as np
import matplotlib as plt
4/22: x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
4/23:
import numpy as np
import matplotlib as plt
4/24:
x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
4/25:
x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
print(x_data)
print(y_data)
4/26:
data = raw_data.replace(",", ".")
data = data.split()
del data[0:7]
data = list(map(float, data))
print(data)
4/27:
x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
print(x_data)
print(y_data)
4/28:
import numpy as np
import matplotlib.pyplot as plt
4/29: plt.plot(x_data, y_data)
4/30:
class Spectrum
    def __init__(self, path)
        self.path = path
4/31:
class Spectrum:
    def __init__(self, path)
        self.path = path
4/32:
class Spectrum:
    def __init__(self, path):
        self.path = path
4/33:
class Spectrum:
    def __init__(self, path):
        self.path = path
    @staticmethod
    def get_data(self):
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
4/34:
class Spectrum:
    def __init__(self, path):
        self.path = path
    def get_data(self):
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
4/35: cuprum = Spectrum("D:\ФФ\Прак_оптика\kurs_opt\Cu.txt")
4/36:
cuprum = Spectrum("D:\ФФ\Прак_оптика\kurs_opt\Cu.txt")
plt.plot(cuprum.x_data, cuprum.y_data)
4/37:
class Spectrum:
    def __init__(self, path):
        self.path = path
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
4/38:
cuprum = Spectrum("D:\ФФ\Прак_оптика\kurs_opt\Cu.txt")
plt.plot(cuprum.x_data, cuprum.y_data)
4/39:
cuprum = Spectrum("D:\ФФ\Прак_оптика\kurs_opt\Cu.txt")
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show
4/40:
cuprum = Spectrum("D:\ФФ\Прак_оптика\kurs_opt\Cu.txt")
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/41:
cuprum = Spectrum("D:\ФФ\Прак_оптика\kurs_opt\0.6.txt")
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/42:
cuprum = Spectrum('D:\ФФ\Прак_оптика\kurs_opt\0.6.txt')
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/43:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.6.txt')
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/44:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.6.txt')
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/45:
cuprum = Spectrum('D:\ФФ\Прак_оптика\kurs_opt\0.6.txt')
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/46:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.6.txt')
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/47:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt')
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/48:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt')
y = Spectrum("D:\ФФ\Прак_оптика\kurs_opt\0.4.txt")
z = [cuprum, y]
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/49:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt')
y = Spectrum(r"D:\ФФ\Прак_оптика\kurs_opt\0.4.txt")
z = [cuprum, y]
plt.plot(cuprum.x_data, cuprum.y_data)
plt.show()
4/50:
import numpy as np
import matplotlib.pyplot as plt
import glob
4/51: glob.glob(r"D:\ФФ\Прак_оптика\kurs_opt")
4/52: glob.glob(r"D:\ФФ\Прак_оптика\kurs_opt/*.txt")
4/53:
paths = glob.glob(r"D:\ФФ\Прак_оптика\kurs_opt/*.txt")
DataSet = [Spectrum(i)for i in paths]
4/54:
class DataSet
    def __init(self, dir)
    self.dir = dir
    self.paths = glob.glob(paths+'/*.txt')
DataSet = [Spectrum(i)for i in paths]
4/55:
class DataSet
    def __init(self, dir):
        self.dir = dir
        self.paths = glob.glob(paths+'/*.txt')
DataSet = [Spectrum(i)for i in paths]
4/56:
class DataSet:
    def __init(self, dir):
        self.dir = dir
        self.paths = glob.glob(paths+'/*.txt')
DataSet = [Spectrum(i)for i in paths]
4/57:
class DataSet:
    def __init(self, dir):
        self.dir = dir
        self.paths = glob.glob(paths+'/*.txt')
DataSet = [Spectrum(p) for p in paths]
4/58:
class DataSet:
    def __init(self, dir):
        self.dir = dir
        self.paths = glob.glob(paths+'/*.txt')
        self.data = [Spectrum(p) for p in paths]
4/59:
data = DataSet('D:\ФФ\Прак_оптика\kurs_opt')
data.plot
4/60:
data = DataSet(r'D:\ФФ\Прак_оптика\kurs_opt')
data.plot
4/61:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot
4/62:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(paths+'/*.txt')
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        plt.plot(self.data)
4/63:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot
4/64:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(paths+r'/*.txt')
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        plt.plot(self.data)
4/65:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot
4/66:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(paths+r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        plt.plot(self.data)
4/67:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot
4/68:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir+r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        plt.plot(self.data)
4/69:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot
4/70:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir+r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        plt.plot(self.data)
        plt.show
4/71:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot
4/72:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir+r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        plt.plot(self.data)
        plt.show()
4/73:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot
4/74:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir+r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
        plt.show()
4/75:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot
4/76:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/77:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/78:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
print(data.data)
4/79:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/80: print(os.path.basename('E:\project-python\string\list.py'))
4/81:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
4/82: print(os.path.basename('E:\project-python\string\list.py'))
4/83:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
4/84:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data, label = )
        plt.show()
4/85:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data, label = s.name)
        plt.show()
4/86:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/87:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data, label = s.name)
        plt.show()
4/88:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/89:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data, label = s.name)
        plt.show()
4/90:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/91:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt')
y = Spectrum(r"D:\ФФ\Прак_оптика\kurs_opt\0.4.txt")
z = [cuprum, y]
plt.plot(cuprum.x_data, cuprum.y_data, label = 1)
plt.show()
4/92:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt')
y = Spectrum(r"D:\ФФ\Прак_оптика\kurs_opt\0.4.txt")
z = [cuprum, y]
plt.plot(cuprum.x_data, cuprum.y_data, label = '1')
plt.show()
4/93:
cuprum = Spectrum(r'D:\ФФ\Прак_оптика\kurs_opt\0.1.txt')
y = Spectrum(r"D:\ФФ\Прак_оптика\kurs_opt\0.4.txt")
z = [cuprum, y]
plt.plot(cuprum.x_data, cuprum.y_data, xlabel = '1')
plt.show()
4/94:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
            ylabel = s.name
        plt.show()
4/95:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/96:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/97:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
            ylabel = s.name
        plt.show()
4/98:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
4/99:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
            plt.ylabel = s.name
        plt.show()
4/100:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
 5/1:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
 5/2:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
 5/3:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
            plt.ylabel = s.name
        plt.show()
 5/4:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
 5/5:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
            plt.ylabel = s.name
        plt.show()
 5/6:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
 5/7:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
            plt.ylabel = s.name
        plt.show()
 5/8:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
 5/9:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
5/10:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
            plt.ylabel = s.name
        plt.show()
5/11:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/12:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data)
            plt.width = 1
        plt.show()
5/13:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/14:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 3.0)
            
        plt.show()
5/15:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/16:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 1.0)
            
        plt.show()
5/17:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/18:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 1.0)
            
        plt.show()
5/19:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/20:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, s.name, linewidth = 1.0)
            
        plt.show()
5/21:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/22:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 1.0)
            plt.ylabel(s.name)
        plt.show()
5/23:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/24:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.data[0].name
5/25:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.data[0].name
data.plot()
5/26:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.data[0].name
5/27:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.data[0].name
data.plot()
5/28:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 1.0)
            plt.ylabel('aboba')
        plt.show()
5/29:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.data[0].name
data.plot()
5/30:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 1.0)
            plt.ylabel = 'aboba'
        plt.show()
5/31:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.data[0].name
data.plot()
5/32:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 1.0)
            plt.ylabel = s.name
        plt.show()
5/33:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.data[0].name
data.plot()
5/34:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/35:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 1.0)
            plt.ylabel = 's.name'
        plt.show()
5/36:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/37:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, linewidth = 1.0)
            plt.ylabel = 's.name'
        plt.show()
5/38:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/39:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, label = s.name)
            plt.ylabel = 's.name'
        plt.show()
5/40:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/41:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, label = s.name)
        plt.show()
5/42:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/43:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
5/44:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
5/45:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, label = s.name)
        plt.show()
5/46:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/47:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.show()
5/48:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/49:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/50:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/51:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid()
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/52:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/53:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/54:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/55:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(10,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/56:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/57:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/58:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/59:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10), dpi = 80) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/60:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10), dpi = 10) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/61:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/62:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10), dpi = 80) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/63:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/64:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/65:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/66:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/67:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/68:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        x.label = 'nm'
        plt.show()
5/69:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/70:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.xlabel = 'nm'
        plt.show()
5/71:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/72:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = s.name
        plt.show()
5/73:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/74:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = 'ab'
        plt.show()
5/75:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/76:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = 's.name'
        plt.show()
5/77:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/78:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--')
            plt.legend = 's.name'
        plt.legend = 's.name'
        plt.show()
5/79:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/80:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend
        plt.show()
5/81:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/82:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend()
        plt.show()
5/83:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/84:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(loc='best')
        plt.show()
5/85:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/86:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
            plt.legend(fontsize=14)
        plt.show()
5/87:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/88:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.show()
5/89:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
5/90:
x = np.linspace(10)
plt.plot(x)
plt.show()
5/91:
x = np.linspace(10, 10)
plt.plot(x)
plt.show()
5/92:
x = np.linspace(10, 10)
plt.plot(x, label = 'dd')
plt.legend()
plt.show()
5/93:
x = np.linspace(10, 10)
plt.plot(x, label = 'dd')
plt.legend
plt.show()
5/94:
x = np.linspace(10, 10)
plt.plot(x, label = 'dd')
plt.show()
 6/1:
x = np.linspace(10, 10)
plt.plot(x, label = 'dd')
plt.legend()
plt.show()
 6/2:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
 6/3:
x = np.linspace(10, 10)
plt.plot(x, label = 'dd')
plt.legend()
plt.show()
 6/4:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
 6/5:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.show()
 6/6:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
 6/7:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.xlabel = 'wave length, nm'
        plt.legend(fontsize=14)
        plt.show()
 6/8:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
 6/9:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.xlabel('wave length, nm')
        plt.legend(fontsize=14)
        plt.show()
6/10:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
6/11:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.xlabel(r"wave length, nm")
        plt.legend(fontsize=14)
        plt.show()
6/12:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
6/13:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.show()
6/14:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
6/15: plt.savefig('plot.png')
6/16:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
6/17:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
6/18:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.show()
6/19:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
6/20: plt.savefig('plot.png')
6/21: plt.savefig('plot.png')
6/22:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.savefig('plot.png')
        plt.show()
6/23:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
 7/1:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
 7/2:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
 7/3:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.savefig('plot.png')
        plt.show()
 7/4:
data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
data.plot()
 7/5: self.data[1].ydata.np.ndarray.max()
 7/6: data.data[1].ydata.np.ndarray.max()
 7/7: data.data[1].y_data.np.ndarray.max()
 7/8: data.data[1].y_data.ndarray.max()
 7/9: data.data[1].y_data.max()
7/10: data.data[2].y_data.max()
7/11: data.data[3].y_data.max()
7/12:
for i in range(6)
    print(data.data[].y_data.max())
7/13:
for i in range(6):
    print(data.data[].y_data.max())
7/14:
for i in range(6):
    print(data.data[i].y_data.max())
7/15:
for i in range(7):
    print(data.data[i].y_data.max())
7/16:
for i in range(8):
    print(data.data[i].y_data.max())
7/17:
for i in range(9):
    print(data.data[i].y_data.max())
7/18:
for i in range(10):
    print(data.data[i].y_data.max())
7/19:
for i in range(9):
    print(data.data[i].y_data.max())
7/20:
max
for i in range(9):
    print(data.data[i].y_data.max(out = True))
7/21:
max
for i in range(9):
    print(data.data[i].y_data.max)
7/22:
max
for i in range(9):
    print(data.data[i].y_data.max())
7/23:
max
for i in range(9):
    print(data.data[i].y_data.argmax())
7/24:
max
for i in range(9):
    print(data.data[i].y_data[250:].argmax())
7/25:
max
for i in range(9):
    print(data.data[i].y_data[0:].argmax())
7/26:
max
for i in range(9):
    print(data.data[i].y_data[250:].argmax())
7/27:
max
for i in range(9):
    print(data.data[i].y_data[:250].argmax())
7/28: a = np.array([1, 2, 3, 4, 5])
7/29:
a = np.array([1, 2, 3, 4, 5])
a[3:]
7/30:
max
for i in range(9):
    print(data.data[i].y_data[2500:].argmax())
7/31:
max
for i in range(9):
    print(data.data[i].y_data[1500:].argmax())
7/32:
max
for i in range(9):
    print(data.data[i].y_data[500:].argmax())
7/33:
max
for i in range(9):
    print(data.data[i].y_data[500:].argmax())
7/34:
max
for i in range(9):
    print(data.data[i].y_data[600:].argmax())
7/35:
max
for i in range(9):
    print(data.data[i].y_data[500:].argmax()+500)
7/36:
a = np.array([1, 2, 3, 4, 5])
np.vstack(a, a)
7/37:
a = np.array([1, 2, 3, 4, 5])
np.vstack((a, a))
7/38:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
        self.xy_data = np.vstack((self.x_data, self.y_data))
7/39:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
7/40:
max
for i in range(9):
    Data.data[i].y_data[500:].argmax()+500)
7/41: print(Data.data[1].xy_data())
7/42: print(Data.data[1].xy_data)
7/43:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
        self.xy_data = np.vstack((self.x_data, self.y_data))
7/44: print(Data.data[1].xy_data)
7/45:
for i in range(10):
    print(Data.data[i].y_data[800])
7/46:
for i in range(9):
    print(Data.data[i].y_data[800])
7/47:
points = []
for i in range(9):
    point[i] = (Data.data[i].y_data[800])
7/48:
points = []
for i in range(9):
    points[i] = (Data.data[i].y_data[800])
7/49:
points = []
for i in range(9):
    print(Data.data[i].y_data[800])
7/50:
points = [(Data.data[i].y_data[800] for i in range(9) ]
for i in range(9):
    print(Data.data[i].y_data[800])
7/51:
points = [(Data.data[i].y_data[800] for i in range(9)]
for i in range(9):
    print(Data.data[i].y_data[800])
7/52:
points = [Data.data[i].y_data[800] for i in range(9)]
for i in range(9):
    print(Data.data[i].y_data[800])
7/53: points = np.array([Data.data[i].y_data[800] for i in range(9)])
7/54:
points = np.array([Data.data[i].y_data[800] for i in range(9)])
plt.plot(points)
plt.show()
7/55:
points = np.array([Data.data[i].y_data[801] for i in range(9)])
plt.plot(points)
plt.show()
7/56:
points = np.array([Data.data[i].y_data[802] for i in range(9)])
plt.plot(points)
plt.show()
7/57:
points = np.array([Data.data[i].y_data[803] for i in range(9)])
plt.plot(points)
plt.show()
7/58:
a = np.array([1, 2, 3, 4, 5])
a.concatenate(a)
7/59:
a = np.array([1, 2, 3, 4, 5])
np.concatenate(a, a)
7/60:
a = np.array([1, 2, 3, 4, 5])
np.concatenate([a, a])
7/61:
a = np.array([1, 2, 3, 4, 5])
a.append(9)
7/62:
a = np.array([1, 2, 3, 4, 5])
np.append(a, 9)
7/63:
for i in range(9)
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points)
plt.show()
7/64:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points)
plt.show()
7/65:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points, '..')
plt.show()
7/66:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points, '--')
plt.show()
7/67:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points, 'dots')
plt.show()
7/68:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points, 'Ob')
plt.show()
7/69:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/70:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points, 'od')
plt.show()
7/71:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/72:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[796:804])
    np.append(points, dot)
plt.plot(points, )
plt.show()
7/73:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[796:804])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/74:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[795:805])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/75:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[797:803])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/76:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[798:802])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/77:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[799:801])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/78:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[799:800])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/79:
max
for i in range(9):
    Data.data[i].y_data[500:].argmax()+500)
7/80:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[800])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/81:
for i in range(9):
    dot = np.ndarray.mean(Data.data[i].y_data[800:801])
    np.append(points, dot)
plt.plot(points, 'ob')
plt.show()
7/82:
for i in range(9)

    np.append(points, dot) = [Data.data[i].y_data[803] for i in range(9)])
plt.plot(points)
plt.show()
7/83:
for i in range(9)
    np.append(points, dot) = [Data.data[i].y_data[800] for i in range(9)])
plt.plot(points, 'ob')
plt.show()
7/84:
for i in range(9):
    np.append(points, dot) = [Data.data[i].y_data[800] for i in range(9)])
plt.plot(points, 'ob')
plt.show()
7/85:
for i in range(9):
    np.append(points, Data.data[i].y_data[800])
plt.plot(points, 'ob')
plt.show()
7/86:
for i in range(9):
    np.append(points, Data.data[i].y_data[801])
plt.plot(points, 'ob')
plt.show()
7/87:
for i in range(9):
    np.append(points, Data.data[i].y_data[798])
plt.plot(points, 'ob')
plt.show()
7/88:
for i in range(9):
    np.append(points, Data.data[i].y_data[800])
plt.plot(points, 'ob')
plt.show()
plt.savefig('concentrations.png')
7/89: np.linspace(2, 4, 5)
7/90: plt.plot(Data.data[1].y_data[500:1000])
7/91:
plt.plot(Data.data[0].y_data[500:1000])
plt.plot(Data.data[1].y_data[500:1000])
plt.plot(Data.data[2].y_data[500:1000])
plt.plot(Data.data[3].y_data[500:1000])
7/92:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
7/93:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810])
axis = np.linspace(0.1, 0,8, 0,1)
plt.plot(points, axis, 'ob')
plt.show()
plt.savefig('concentrations.png')
7/94:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0,8, 0,1)
plt.plot(points, axis, 'ob')
plt.show()
plt.savefig('concentrations.png')
7/95:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0,9, 0,1)
plt.plot(axis, points, 'ob')
plt.show()
plt.savefig('concentrations.png')
7/96: axis = np.linspace(0.1, 0,9, 0,1)
7/97:
axis = np.linspace(0.1, 0,9, 0,1)
axis
7/98:
axis = np.linspace(0.1, 0.9, 0.1)
axis
7/99:
axis = np.linspace(0.1, 0.9, 9)
axis
7/100:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.show()
plt.savefig('concentrations.png')
7/101:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
7/102: plt.savefig('plot.png')
7/103:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
7/104: print(Data.data[1].xy_data)
7/105:
axis = np.linspace(0.1, 0.9, 9)
axis
7/106:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.ndarray([0.1, 0.2, 0.2, 0.3, 0.4])
plt.plot(axis, points, 'ob')
plt.show()
plt.savefig('concentrations.png')
7/107:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.show()
plt.savefig('concentrations.png')
7/108:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.show()
plt.savefig('concentrations.png')
7/109:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
7/110:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/111:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = 'sds'
plt.savefig('concentrations.png')
plt.show()
7/112:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel('Concentration, M', fontsize=16)
plt.savefig('concentrations.png')
plt.show()
7/113:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = r'Concentration, M', fontsize=16)
plt.savefig('concentrations.png')
plt.show()
7/114:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = (r'Concentration, M', fontsize=16)
plt.savefig('concentrations.png')
plt.show()
7/115:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = (r'Concentration, M')
plt.savefig('concentrations.png')
plt.show()
7/116:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = (r'Concentration, M')
plt.tight_layout()
plt.savefig('concentrations.png')
plt.show()
7/117:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = (r'Concentration, M')
plt.legend()
plt.savefig('concentrations.png')
plt.show()
7/118:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = (r'Concentration, M')
plt.label
plt.savefig('concentrations.png')
plt.show()
7/119:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = (r'Concentration, M')
plt.label()
plt.savefig('concentrations.png')
plt.show()
7/120:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.xlabel = (r'Concentration, M')
plt.savefig('concentrations.png')
plt.show()
7/121:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/122:
for i in range(8):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.8, 8)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/123:
for i in range(8):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.8, 8)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/124:
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/125:
for i in range(8):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/126:
for i in range(7):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/127:
for i in range(7):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/128:
for i in range(7):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 8)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/129:
for i in range(7):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/130:
for i in range(7):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/131:
for i in range(7):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/132:
for i in range(7):
#    np.append(points, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/133:
points = np.empty()
for i in range(7):
#    np.append(points, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/134:
points = np.empty(0)
for i in range(7):
#    np.append(points, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/135:
points = np.empty(0)
for i in range(7):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/136:
points = np.empty(0)
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/137:
points = np.array()
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/138:
points = np.array([])
for i in range(9):
    np.append(points, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/139:
points = np.array([])
np.append(points, 1)
7/140:
points = np.array([])
np.append(points, 1)
np.append(points, 1)
7/141:
points = np.array([])
np.append(points, 1)
np.append(points, 2)
7/142:
points = np.array([])
np.append(points, 1)
np.append(points, 8)
7/143:
axis = np.linspace(0.1, 0.9, 9)
np.mean(axis)
7/144:
points = np.array([])
for i in range(9):
    np.insert(points, np.mean(Data.data[i].y_data[790:810]), i)
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/145:
for i in range(9):
    np.insert(points, np.mean(Data.data[i].y_data[790:810]), i)
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/146:
for i in range(9):
    np.insert(points, np.mean(Data.data[i].y_data[790:810]), i)
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/147:
points = np.array([0])
for i in range(9):
    np.insert(points, np.mean(Data.data[i].y_data[790:810]), i)
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/148:
points = np.array([0])
for i in range(9):
    np.insert(points, i, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/149:
axis = np.linspace(0.1, 0.9, 9)
np.mean(axis)
np.insert(axis, 2, 66)
7/150:
points = np.array([])
for i in range(9):
    np.insert(points, i, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/151:
axis = np.array([])
np.mean(axis)
np.insert(axis, 0, 66)
7/152:
axis = np.array([0])
np.mean(axis)
np.insert(axis, 0, 66)
7/153:
points = np.array([0])
for i in range(9):
    np.insert(points, i, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/154:
points = np.array([0])
for i in range(9):
    np.insert(points, i, np.mean(Data.data[i].y_data[790:810]))
    print(np.mean(Data.data[i].y_data[790:810]))
np.delete(points, 9)
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/155:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/156:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/157:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
7/158:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
7/159: print(Data.data[1].xy_data)
7/160:
axis = np.array([0])
np.mean(axis)
np.insert(axis, 0, 66)
7/161:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/162:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/163:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
7/164:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
7/165: print(Data.data[1].xy_data)
7/166:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/167:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
7/168:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
7/169: print(Data.data[1].xy_data)
7/170:
axis = np.array([0])
np.mean(axis)
np.insert(axis, 0, 66)
7/171:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/172:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/173:
points = np.array([np.mean(Data.data[i].y_data[785:815]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/174:
points = np.array([np.mean(Data.data[i].y_data[780:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/175:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/176:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
points[3] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/177:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
points[3] = 0.428
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/178:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
points[3] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/179:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
points[3] = 0.423
np.delete(points, 2
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/180:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
points[3] = 0.423
np.delete(points, 2)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/181:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
points[3] = 0.423
np.delete(points, 1)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/182:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
points[3] = 0.423
points = np.delete(points, 1)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/183:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[3] = 0.423
points = np.delete(points, 1)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/184:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[3] = 0.423
points = np.delete(points, 1)
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/185:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(9)])
axis = np.linspace(0.1, 0.9, 9)
print(points)
points[3] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/186:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
7/187:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
7/188: print(Data.data[1].xy_data)
7/189:
axis = np.array([0])
np.mean(axis)
np.insert(axis, 0, 66)
7/190:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[3] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
7/191:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
 9/1:
points = np.array([np.mean(Data.data[i].y_data[770:790]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
 9/2:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
 9/3:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
        self.xy_data = np.vstack((self.x_data, self.y_data))
 9/4:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.savefig('plot.png')
        plt.show()
 9/5:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
 9/6:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
 9/7: print(Data.data[1].xy_data)
 9/8:
axis = np.array([0])
np.mean(axis)
np.insert(axis, 0, 66)
 9/9:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
9/10:
points = np.array([np.mean(Data.data[i].y_data[770:790]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
9/11:
points = np.array([np.mean(Data.data[i].y_data[770:790]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)

plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
9/12:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
9/13:
points = np.array([np.mean(Data.data[i].y_data[810:830]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations.png')
plt.show()
9/14:
points = np.array([np.mean(Data.data[i].y_data[770:790]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)

plt.plot(axis, points, 'ob')
plt.savefig('concentrations_278nm.png')
plt.show()
9/15:
points = np.array([np.mean(Data.data[i].y_data[810:830]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
9/16:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_280nm.png')
plt.show()
9/17:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
plt.savefig('noise.png')
9/18:
points = np.array([np.mean(Data.data[i].y_data[795:805]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_280nm.png')
plt.show()
9/19:
points = np.array([np.mean(Data.data[i].y_data[790:810]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_280nm.png')
plt.show()
9/20:
points = np.array([np.mean(Data.data[i].y_data[795:805]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_280nm.png')
plt.show()
9/21:
points = np.array([np.mean(Data.data[i].y_data[775:785]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)

plt.plot(axis, points, 'ob')
plt.savefig('concentrations_278nm.png')
plt.show()
9/22:
points = np.array([np.mean(Data.data[i].y_data[815:825]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/1:
points = np.array([np.mean(Data.data[i].y_data[875:885]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/2:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
10/3:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
        self.xy_data = np.vstack((self.x_data, self.y_data))
10/4:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.savefig('plot.png')
        plt.show()
10/5:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
10/6:
points = np.array([np.mean(Data.data[i].y_data[875:885]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/7:
points = np.array([np.mean(Data.data[i].y_data[870:890]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/8:
points = np.array([np.mean(Data.data[i].y_data[870:890]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/9:
points = np.array([np.mean(Data.data[i].y_data[875:885]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/10:
points = np.array([np.mean(Data.data[i].y_data[870:890]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/11:
points = np.array([np.mean(Data.data[i].y_data[875:885]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/12:
points = np.array([np.mean(Data.data[i].y_data[875:985]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/13:
points = np.array([np.mean(Data.data[i].y_data[875:885]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/14:
points = np.array([np.mean(Data.data[i].y_data[175:885]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/15:
points = np.array([np.mean(Data.data[i].y_data[875:885]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/16:
points = np.array([np.mean(Data.data[i].y_data[875:885]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
10/17:
points = np.array([np.mean(Data.data[i].y_data[870:890]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/1:
points = np.array([np.mean(Data.data[i].y_data[390:410]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/2:
import numpy as np
import matplotlib.pyplot as plt
import glob
import os
11/3:
class Spectrum:
    def __init__(self, path):
        self.path = path
        self.name = os.path.basename(self.path)
        file = open(self.path, "r")
        self.raw_data = file.read()
        file.close()
        data = self.raw_data.replace(",", ".")
        data = data.split()
        del data[0:7]
        data = list(map(float, data))
        self.x_data = np.array([data[i] for i in range(len(data)) if i % 2 == 0])
        self.y_data = np.array([data[i] for i in range(len(data)) if i % 2 == 1])
        self.xy_data = np.vstack((self.x_data, self.y_data))
11/4:
class DataSet:
    def __init__(self, dir):
        self.dir = dir
        self.paths = glob.glob(dir + r"/*.txt")
        self.data = [Spectrum(p) for p in self.paths]
    def plot(self):
        plt.figure(figsize=(20,10)) 
        plt.grid(which='major')
        plt.grid(which='minor', linestyle=':')
        for s in self.data:
            plt.plot(s.x_data, s.y_data, '--', label = s.name)
        plt.legend(fontsize=14)
        plt.savefig('plot.png')
        plt.show()
11/5:
Data = DataSet(r"D:\ФФ\Прак_оптика\kurs_opt")
Data.plot()
11/6:
plt.plot(Data.data[0].y_data[750:850])
plt.plot(Data.data[1].y_data[750:850])
plt.plot(Data.data[2].y_data[750:850])
plt.plot(Data.data[3].y_data[750:850])
plt.savefig('noise.png')
11/7:
points = np.array([np.mean(Data.data[i].y_data[390:410]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/8:
points = np.array([np.mean(Data.data[i].y_data[395:405]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/9:
for i in range(9):
    np.append(points, Data.data[i].y_data[400])
plt.plot(points, 'ob')
plt.show()
11/10:
points = np.array([np.mean(Data.data[i].y_data[398:402]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/11:
points = np.array([np.mean(Data.data[i].y_data[399:401]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/12:
points = np.array([np.mean(Data.data[i].y_data[395:405]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/13:
points = np.array([np.mean(Data.data[i].y_data[395:405]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/14:
for i in range(9):
    np.append(points, Data.data[i].y_data[400])
plt.plot(points, 'ob')
plt.show()
11/15:
points = np.array([np.mean(Data.data[i].y_data[295:405]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/16:
points = np.array([np.mean(Data.data[i].y_data[195:405]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/17:
points = np.array([np.mean(Data.data[i].y_data[395:405]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/18:
points = np.array([np.mean(Data.data[i].y_data[395:405]) for i in range(8)])
axis = np.linspace(0.1, 0.8, 8)
print(points)
#points[2] = 0.423
plt.plot(axis, points, 'ob')
plt.savefig('concentrations_282nm.png')
plt.show()
11/19:
for i in range(9):
    np.append(points, Data.data[i].y_data[400])
plt.plot(points, 'ob')
plt.show()
13/1: import numpy as np
13/2:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    print(A)
    for i in range(n):
        for j in range (n):
            if (i==j):
                break
            A[i] *= (t-x[j])/(x[i]-x[j])
            print(A)
        print(A)
        return A.T @ y
13/3:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print lag_pol(x_data, y_data, 5)
13/4:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 5))
13/5:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
13/6:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
print sin(1)
13/7:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
print np.sin(1)
13/8:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
print np.math.sin(1)
13/9:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
print math.sin(1)
13/10:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
print np.sin(1)
13/11:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
print (np.sin(1))
13/12:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    print(A)
    for i in range(n):
        for j in range (n):
            if (i==j):
                break
            A[i] *= (t-x[j])/(x[i]-x[j])
            print(A)
            print(A)
        print(A)
        return A.T @ y
13/13:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
print (np.sin(1))
13/14:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 1))
print (np.sin(1))
13/15:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 2))
print (np.sin(1))
13/16:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 3))
print (np.sin(1))
13/17:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print (lag_pol(x_data, y_data, 3))
print (np.sin(1))
13/18:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
print (lag_pol(x_data, y_data, 3))
print (np.sin(1))
13/19:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
print (lag_pol(x_data, y_data, 4))
print (np.sin(1))
13/20:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
print (lag_pol(x_data, y_data, 0.5))
print (np.sin(1))
13/21:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    print(A)
    for i in range(n):
        for j in range (n):
            if (i==j):
                break
            A[i] *= (t-x[j])/(x[i]-x[j])
            print(A)
        print(A)
        return A.T @ y
13/22:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
print (lag_pol(x_data, y_data, 0.5))
print (np.sin(1))
13/23:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
lag_pol(x_data, y_data, 0.5))
print (np.sin(1))
13/24:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
13/25: lag_pol(x_data, y_data, 0.5)
13/26:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    print(A)
    for i in range(n):
        for j in range (n):
            if (i==j):
                break
            A[i] *= (t-x[j])/(x[i]-x[j])
            print(A)
        print(A)
    return A.T @ y
13/27: lag_pol(x_data, y_data, 0.5)
13/28:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
13/29:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    print(A)
    for i in range(n):
        for j in range (n):
            if (i!=j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
13/30: lag_pol(x_data, y_data, 0.5)
13/31:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i!=j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
13/32: lag_pol(x_data, y_data, 0.5)
13/33:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
14/1:
def near_neighbour(x, y, t):
    dist = abs(x - t*np.ones((n,)))
    return y[dist.argmin]
14/2: near_neighbour(x_data, y_data, 0.5)
14/3:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
14/4: import numpy as np
14/5:
def near_neighbour(x, y, t):
    dist = abs(x - t*np.ones((n,)))
    return y[dist.argmin]
14/6:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i!=j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
14/7: lag_pol(x_data, y_data, 0.5)
14/8:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
14/9:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i!=j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
14/10: lag_pol(x_data, y_data, 0.5)
14/11:
x_data = np.linspace(1, 10, 10)
y_data = np.sin(x_data)
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
14/12: near_neighbour(x_data, y_data, 0.5)
14/13: near_neighbour(x_data, y_data, 0.5)
14/14:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[dist.argmin]
14/15: near_neighbour(x_data, y_data, 0.5)
14/16:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return dist
14/17: near_neighbour(x_data, y_data, 0.5)
14/18: near_neighbour(x_data, y_data, 0.5)
14/19: np.argmin(near_neighbour(x_data, y_data, 0.5))
14/20: np.argmin(near_neighbour(x_data, y_data, 1.5))
14/21: np.argmin(near_neighbour(x_data, y_data, 1.5))
14/22:
near_neighbour(x_data, y_data, 1.5)
np.argmin(near_neighbour(x_data, y_data, 1.5))np.argmin(near_neighbour(x_data, y_data, 1.5))
14/23:
near_neighbour(x_data, y_data, 1.5)
np.argmin(near_neighbour(x_data, y_data, 1.5))np.argmin(near_neighbour(x_data, y_data, 1.5))
14/24:
near_neighbour(x_data, y_data, 1.5)
np.argmin(near_neighbour(x_data, y_data, 1.5))
14/25:
print(near_neighbour(x_data, y_data, 1.5))
np.argmin(near_neighbour(x_data, y_data, 1.5))
14/26:
print(near_neighbour(x_data, y_data, 3.5))
np.argmin(near_neighbour(x_data, y_data, 1.5))
14/27:
print(near_neighbour(x_data, y_data, 3.5))
print(np.argmin(near_neighbour(x_data, y_data, 1.5)))
14/28:
print(near_neighbour(x_data, y_data, 3.5))
np.argmin(near_neighbour(x_data, y_data, 1.5))
14/29:
print(near_neighbour(x_data, y_data, 3.5))
np.argmin(near_neighbour(x_data, y_data, 3.5))
14/30:
print(near_neighbour(x_data, y_data, 3.5))
x_data[np.argmin(near_neighbour(x_data, y_data, 3.5))]
14/31:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
14/32:
print(near_neighbour(x_data, y_data, 3.5))
x_data[np.argmin(near_neighbour(x_data, y_data, 3.5))]
14/33: print(near_neighbour(x_data, y_data, 3.5))
14/34: print(near_neighbour(x_data, y_data, 3.5), sin(3.5))
14/35: print(near_neighbour(x_data, y_data, 3.5), np.sin(3.5))
14/36: print(near_neighbour(x_data, y_data, 3.5), np.sin(3))
14/37:
def linear(x, y, t):
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(dist)
    j = i-1 if x[i]>t else i+1
    return y[] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/38:
def linear(x, y, t):
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(dist)
    j = i-1 if x[i]>t else i+1
    return y[i] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/39: linear(x_data, y_data, 3.5)
14/40:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(dist)
    j = i-1 if x[i]>t else i+1
    return y[i] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/41: linear(x_data, y_data, 3.5)
14/42:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    return y[i] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/43: linear(x_data, y_data, 3.5)
14/44:
linear(x_data, y_data, 3.5)
sin(3)
14/45:
linear(x_data, y_data, 3.5)
np.sin(3)
14/46:
linear(x_data, y_data, 3.5)
print(np.sin(3))
14/47:
print(linear(x_data, y_data, 3.5))
print(np.sin(3))
14/48:
print(linear(x_data, y_data, 3.5))
print(np.sin(4))
14/49:
print(linear(x_data, y_data, 3))
print(np.sin(4))
14/50:
print(linear(x_data, y_data, 3))
print(np.sin(3))
14/51:
x_data = np.linspace(1, 10, 10)
y_data = 3*x_data+4
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
14/52: print(linear(x_data, y_data, 3.5))
14/53: print(linear(x_data, y_data, 3.5))
14/54:
x_data = np.linspace(1, 10, 10)
y_data = 4*x_data+3
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
14/55: print(linear(x_data, y_data, 3.5))
14/56: print(linear(x_data, y_data, 3.25))
14/57:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    print(np.argmin(dist)) 
    return y[np.argmin(dist)]
14/58: print(linear(x_data, y_data, 3.25))
14/59: linear(x_data, y_data, 3.25)
14/60:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    #y[np.argmin(dist)]
    return np.argmin(dist)
14/61: linear(x_data, y_data, 3.25)
14/62:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    #y[np.argmin(dist)]
    return np.argmin(dist)
14/63: linear(x_data, y_data, 3.25)
14/64:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
14/65:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    print(i, j)
    return y[i] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/66: linear(x_data, y_data, 3.25)
14/67: linear(x_data, y_data, 3.5)
14/68: linear(x_data, y_data, 7.5)
14/69: linear(x_data, y_data, 7.1)
14/70: linear(x_data, y_data, 7.9)
14/71:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    print(x[i], x[j])
    return y[i] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/72: linear(x_data, y_data, 7.9)
14/73: linear(x_data, y_data, 7.1)
14/74: linear(x_data, y_data, 7.25)
14/75:
x_data = np.linspace(1, 10, 10)
y_data = 4*x_data+3
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
14/76: linear(x_data, y_data, 7)
14/77: linear(x_data, y_data, 8)
14/78: linear(x_data, y_data, 1.5)
14/79:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    print((x[i]-x[j])/(y[i]-y[j])
    return y[i] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/80:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    print(x[i]-x[j])/(y[i]-y[j])
    return y[i] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/81: linear(x_data, y_data, 1.5)
14/82:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    print((x[i]-x[j])/(y[i]-y[j]))
    return y[i] + (t-x[i])*(x[i]-x[j])/(y[i]-y[j])
14/83: linear(x_data, y_data, 1.5)
14/84:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    print((x[i]-x[j])/(y[i]-y[j]))
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
14/85: linear(x_data, y_data, 1.5)
14/86: linear(x_data, y_data, 1.5)
14/87:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    print((x[i]-x[j])/(y[i]-y[j]))
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
14/88:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
14/89:
import numpy as np
import pyplot as plt
14/90:
import numpy as np
import mathplotlib.pyplot as plt
14/91:
import numpy as np
import mathplotlib.pyplot as plt
14/92:
import numpy as np
import matplotlib.pyplot as plt
14/93:
def int_plot(x, y):
    net = linspace(x.np.max, x.np.min, 100)
    int1 = near_neighbour(x, y, net)
    int2 = linear(x, y, net)
    int3 = lag_pol(x, y, net)
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
14/94: int_plot(x_data, y_data)
14/95:
def int_plot(x, y):
    net = np.linspace(x.np.max, x.np.min, 100)
    int1 = near_neighbour(x, y, net)
    int2 = linear(x, y, net)
    int3 = lag_pol(x, y, net)
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
14/96: int_plot(x_data, y_data)
14/97:
def int_plot(x, y):
    net = np.linspace(x.max, x.min, 100)
    int1 = near_neighbour(x, y, net)
    int2 = linear(x, y, net)
    int3 = lag_pol(x, y, net)
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
14/98: int_plot(x_data, y_data)
14/99:
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n], 100)
    int1 = near_neighbour(x, y, net)
    int2 = linear(x, y, net)
    int3 = lag_pol(x, y, net)
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
14/100: int_plot(x_data, y_data)
14/101:
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    int1 = near_neighbour(x, y, net)
    int2 = linear(x, y, net)
    int3 = lag_pol(x, y, net)
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
14/102: int_plot(x_data, y_data)
14/103:
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    for i in range(100)
        int1[i] = near_neighbour(x, y, net[i])
    int2 = linear(x, y, net)
    int3 = lag_pol(x, y, net)
    
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
14/104: int_plot(x_data, y_data)
14/105:
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    for i in range(98)
        int1[i] = near_neighbour(x, y, net[i+1])
    int2 = linear(x, y, net)
    int3 = lag_pol(x, y, net)
    
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
14/106:
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    for i in range(98):
        int1[i] = near_neighbour(x, y, net[i+1])
    int2 = linear(x, y, net)
    int3 = lag_pol(x, y, net)
    
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
14/107: int_plot(x_data, y_data)
16/1:
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
    f2 = np.vectorize(lambda t : linear(x, y, t))
    f3 = np.vectorize(lambda t : lag_pol(x, y, t))
    int1, int2, in3 = f1(net), f2(net), f3(net)

    
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/2:
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
    int1, int2, in3 = f1(net), f2(net), f3(net)
16/3:
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
int1, int2, in3 = f1(net), f2(net), f3(net)
16/4:
import numpy as np
import matplotlib.pyplot as plt
16/5:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
16/6:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
16/7:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
16/8:
x = 

plt.plot(x, y)
16/9:
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
    f2 = np.vectorize(lambda t : linear(x, y, t))
    f3 = np.vectorize(lambda t : lag_pol(x, y, t))
    int1, int2, in3 = f1(net), f2(net), f3(net)

    
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/10: lag_pol(x_data, y_data, 0.5)
16/11:
x_data = np.linspace(1, 10, 10)
y_data = 4*x_data+3
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
16/12: print(near_neighbour(x_data, y_data, 3.5), np.sin(3))
16/13: linear(x_data, y_data, 1.5)
16/14:
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
int1, int2, in3 = f1(net), f2(net), f3(net)
16/15:
net = np.linspace(x_data[0], x_data[n-1], 100)
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
int1, int2, in3 = f1(net), f2(net), f3(net)
16/16:
n = len(x_data)
net = np.linspace(x_data[0], x_data[n-1], 100)
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
int1, int2, in3 = f1(net), f2(net), f3(net)
16/17:
x = np.linspace(1, 10, 10)
y = 4*x_data+3
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
16/18:
n = len(x)
net = np.linspace(x[0], x[n-1], 100)
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
int1, int2, in3 = f1(net), f2(net), f3(net)
16/19:
n = len(x)
net = np.linspace(x[0], x[n], 100)
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
int1, int2, in3 = f1(net), f2(net), f3(net)
16/20:
n = len(x)
net = np.linspace(x[0], x[n-1], 100)
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
int1, int2, in3 = f1(net), f2(net), f3(net)
16/21:
import numpy as np
import matplotlib.pyplot as plt
16/22:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
16/23:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1 if x[i]>t else i+1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
16/24:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
16/25:
x = 

plt.plot(x, y)
16/26:
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
    f2 = np.vectorize(lambda t : linear(x, y, t))
    f3 = np.vectorize(lambda t : lag_pol(x, y, t))
    int1, int2, in3 = f1(net), f2(net), f3(net)

    
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/27: lag_pol(x_data, y_data, 0.5)
16/28:
x = np.linspace(1, 10, 10)
y = 4*x_data+3
print(y_data)
lag_pol(x_data, y_data, 0.5)
print (np.sin(1))
16/29: print(near_neighbour(x_data, y_data, 3.5), np.sin(3))
16/30: linear(x_data, y_data, 1.5)
16/31:
n = len(x)
net = np.linspace(x[0], x[n-1], 100)
f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
f2 = np.vectorize(lambda t : linear(x, y, t))
f3 = np.vectorize(lambda t : lag_pol(x, y, t))
int1, int2, in3 = f1(net), f2(net), f3(net)
16/32: f1 = np.vectorize(lamda a: 2*a)
16/33: f1 = np.vectorize(lamda a: 2*a)
16/34: f1 = np.vectorize(lamda a: a)
16/35: f1 = lambda a:a
16/36: f1(3)
16/37: np.vectorize(f1)
16/38: f2 = np.vectorize(f1)
16/39:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1      if x[i] > t    else i + 1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
16/40:
f1 = lambda a:a
f1(x)
16/41:
f1 = lambda a:a*2
f1(x)
16/42:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = np.vectorize(lambda t : near_neighbour(x, y, t))
    f2 = np.vectorize(lambda t : linear(x, y, t))
    f3 = np.vectorize(lambda t : lag_pol(x, y, t))
    int1, int2, in3 = f1(net), f2(net), f3(net)

    lag_pol()
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/43: f1 = partial(near_neighbour, x, y)
16/44:
f1 = partial(near_neighbour, x, y)
x
16/45:
f1 = partial(near_neighbour, x, y)
x
y
16/46:
f1 = partial(near_neighbour, x, y)
f1(3.5)
16/47:
from functools import partial
def int_plot(x, y):
    n = len(x)
    partial(near_neighbour)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, in3 = f1(net), f2(net), f3(net)

    lag_pol()
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = s.name)
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/48:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, in3 = f1(net), f2(net), f3(net)
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/49: int_plot(x, y)
16/50:
f1 = partial(near_neighbour, x, y)
f1(3.5)
f1(x)
16/51:
f1 = partial(near_neighbour, x, y)

f1(x)
16/52:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = np.vectorize(partial(near_neighbour, x, y))
    f2 = np.vectorize(partial(linear, x, y))
    f3 = np.vectorize(partial(lag_pol, x, y))
    int1, int2, int3 = f1(net), f2(net), f3(net)
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/53: int_plot(x, y)
16/54:
def f1 (a, b, c):
    return a+b+c
partial(f1, 1, 2, 3)
16/55:
def f1 (a, b, c):
    return a+b+c
a = partial(f1, 1, 2, 3)
16/56:
def f1 (a, b, c):
    return a+b+c
print(partial(f1, 1, 2, 3))
16/57:
def f1 (a, b, c):
    return a+b+c
a = partial(f1, 1, 2, 3)
print(a)
16/58:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1, b=2)
f(4)
16/59:
def f(a, b):
    return a+b
16/60:
def f(a, b):
    return a+b
f(1, b=2)
16/61:
def f(a, b):
    return a+b
f(b=2)
16/62:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1, b=2)
f(4)
16/63:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1, b=2)
f()
16/64:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1, b=2)
f(1, 2)
16/65:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1, b=2)
f(a=1, b=2, c=3)
16/66:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1, b=2)
f(a=1, b=2)
16/67:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1, b=2)
f(c=3)
16/68:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1, b=2)
f(3)
16/69:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, a=1)
f(3)
16/70:
def f1 (a, b, c):
    return a+b+c
f = partial(f1, 1, 2)
f(3)
16/71:
def f1 (a, b, c):
    return a+2*b+3*cc
f = partial(f1, 1, 2)
f(3)
16/72:
def f1 (a, b, c):
    return a+2*b+3*c
f = partial(f1, 1, 2)
f(3)
16/73:
def f1 (a, b, c):
    return a+2*b+3*c
f = partial(f1, 1, 2, 3)
f()
16/74:
def f1 (a, b, c):
    return a+2*b+3*c
x = 1
f = partial(f1, x, x, x)
f()
16/75:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, int3 = f1(net), f2(net), f3(net)
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/76:
x = np.linspace(1, 10, 10)
y = 4*x_data+3
print(y_data)
int_plot(x, y)
16/77:
from functools import partial
def int_plot(x1, y1):
    n = len(x1)
    net = np.linspace(x1[0], x1[n-1], 100)
    f1 = partial(near_neighbour, x1, y1)
    f2 = partial(linear, x1, y1)
    f3 = partial(lag_pol, x1, y1)
    int1, int2, int3 = f1(net), f2(net), f3(net)
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/78:
x = np.linspace(1, 10, 10)
y = 4*x_data+3
print(y_data)
int_plot(x, y)
16/79:
from functools import partial
def int_plot(x1, y1):
    n = len(x1)
    net = np.linspace(x1[0], x1[n-1], 100)
    f1 = partial(near_neighbour, x1, y1)
    f2 = partial(linear, x1, y1)
    f3 = partial(lag_pol, x1, y1)
    int1, int2, int3 = f1(net), f2(net), f3(net)
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/80:
x = np.linspace(1, 10, 10)
y = 4*x_data+3
print(y_data)
int_plot(x, y)
16/81:
from functools import partial
def int_plot(x1, y1):
    n = len(x1)
    net = np.linspace(x1[0], x1[n-1], 100)
    f1 = partial(near_neighbour, x1, y1)
    f2 = partial(linear, x1, y1)
    f3 = partial(lag_pol, x1, y1)
    return f1(3)
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/82:
x = np.linspace(1, 10, 10)
y = 4*x_data+3
print(y_data)
int_plot(x, y)
16/83:

int1, int2, in3 = np.vectorize(f1(net)), f2(net), f3(net)
16/84:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, int3 = f1(net), f2(net), f3(net)
16/85: a = np.array([1, 2, 3, 4])
16/86:
a = np.array([1, 2, 3, 4])
a*2
16/87:
a = np.array([1, 2, 3, 4])
2*a
16/88:
a = np.array([1, 2, 3, 4])
a-np.ones((4))
16/89:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, int3 = f1(5)
16/90:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1 = f1(5)
16/91:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, int3 = f1(net), f2(net), f3(net)
16/92:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = np.vectorize(partial(near_neighbour, x, y))
    f2 = np.vectorize(partial(linear, x, y))
    f3 = np.vectorize(partial(lag_pol, x, y))
    int1, int2, int3 = f1(net), f2(net), f3(net)
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/93:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, int3 = f1(net), f2(net), f3(net)
16/94:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1[i], int2[i], int3[i] = f1(net[i]), f2(net[i]), f3(net[i])
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/95:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, int3 = f1(net), f2(net), f3(net)
16/96:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    for i in range(98)
    int1[i], int2[i], int3[i] = f1(net[i+1]), f2(net[i+1]), f3(net[i+1])
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/97:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    for i in range(98):
    int1[i], int2[i], int3[i] = f1(net[i+1]), f2(net[i+1]), f3(net[i+1])
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/98:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    for i in range(98):
        int1[i], int2[i], int3[i] = f1(net[i+1]), f2(net[i+1]), f3(net[i+1])
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
16/99:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1, int2, int3 = f1(net), f2(net), f3(net)
16/100:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    for i in range(98):
        int1[i], int2[i], int3[i] = f1(net[i+1]), f2(net[i+1]), f3(net[i+1])
16/101:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1 = np.array([f2(net[i+1]) for i in range(100)])
17/1:
x = np.linspace(1, 10, 10)
y = sin(0.87*x+1.67) + 4.56
print(y_data)
int_plot(x, y)
plt.plot()
17/2:
import numpy as np
import matplotlib.pyplot as plt
17/3:
x = np.linspace(1, 10, 10)
y = sin(0.87*x+1.67) + 4.56
print(y_data)
int_plot(x, y)
plt.plot()
17/4:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
17/5:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1      if x[i] > t    else i + 1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
17/6:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
17/7:
x = np.linspace(1, 10, 10)
y = sin(0.87*x+1.67) + 4.56
print(y_data)
int_plot(x, y)
plt.plot()
17/8:
x = np.linspace(1, 10, 10)
y = np.sin(0.87*x+1.67) + 4.56
print(y_data)
int_plot(x, y)
plt.plot()
17/9:
x = np.linspace(1, 10, 10)
y = np.sin(0.87*x+1.67) + 4.56
17/10:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.pyplot(t, near_neighbour(x, y, t))
plt.pyplot(t, linear(x, y, t))
plt.pyplot(t, lag_pol(x, y, t))
17/11:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t))
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
17/12:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t))
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
plt.show()
17/13:
import numpy as np
import matplotlib.pyplot as plt
17/14:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
17/15:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1      if x[i] > t    else i + 1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
17/16:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
17/17:
x = np.linspace(1, 10, 10)
y = np.sin(0.87*x+1.67) + 4.56
17/18:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t))
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
plt.show()
17/19:
x = np.linspace(1, 10, 10)
y = np.sin(0.87*x+1.67) + 4.56
print(y)
17/20:
x = np.linspace(1, 10, 10)
y = np.sin(0.87*x+1.67) + 4.56
print(y)
print(lag_pol(x, y, 2))
17/21:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t))
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
plt.plot(2, 3)
plt.show()
17/22:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t))
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
plt.plot([2], [3])
plt.show()
17/23:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t))
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
plt.plot([3], [3])
plt.show()
17/24:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10


plt.plot([3], [3])
plt.show()
17/25:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t))
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
plt.plot([3], [3], ':b')
plt.show()
17/26:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t))
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
plt.plot([3], [3], 'ob')
plt.show()
17/27:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t))
plt.plot(t, lag_pol(x, y, t))
plt.show()
17/28:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t))
plt.show()
17/29:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10

plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/30:
def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(X)
print(y)
print(lag_pol(x, y, 2))
17/31:
def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
17/32:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/33:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/34:
rnd1 = np.random.default_rng(seed=1)
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/35:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/36:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/37:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/38:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/39:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'ob')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/40:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'rb')
plt.plot(t, linear(x, y, t), 'gb')
plt.plot(t, lag_pol(x, y, t), 'ob')
plt.show()
17/41:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'rb')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
17/42:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t))
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
17/43:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
17/44:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
17/45:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
y1
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), f(t)-linear(x, y, t), f(t)-lag_pol(x, y, t))
17/46:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), f(t)-linear(x, y, t), f(t)-lag_pol(x, y, t))
17/47:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), f(t)-linear(x, y, t), f(t)-lag_pol(x, y, t))
17/48:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), f(t)-linear(x, y, t), f(t)-lag_pol(x, y, t))
17/49:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), 'neighbour', f(t)-linear(x, y, t), 'lin', f(t)-lag_pol(x, y, t), 'lagrange')
17/50:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour', f(t)-linear(x, y, t), '- lin', f(t)-lag_pol(x, y, t), '- lagrange')
17/51:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
17/52:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
17/53:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
17/54:
f1 = scipy.optimize.curve_fit(lambda x, a, b:, a*x+b)
f2 = 
f3 = 
pyplot(x, y)
pyplot(x, f1(x))
pyplot(x, f2(x))
pyplot(x, f3(x))
17/55:
f1 = scipy.optimize.curve_fit(lambda x, a, b: a*x+b)
f2 = 
f3 = 
pyplot(x, y)
pyplot(x, f1(x))
pyplot(x, f2(x))
pyplot(x, f3(x))
17/56:
f1 = scipy.optimize.curve_fit(lambda x, a, b: a*x+b)
f2 = scipy.optimize.curve_fit(lambda x, a, b: a*x+b)
f3 = scipy.optimize.curve_fit(lambda x, a, b, c: sin(a * x + b) + c)
pyplot(x, y)
pyplot(x, f1(x))
pyplot(x, f2(x))
pyplot(x, f3(x))
17/57:
f1 = sp.optimize.curve_fit(lambda x, a, b: a*x+b)
f2 = sp.optimize.curve_fit(lambda x, a, b: a*x+b)
f3 = sp.optimize.curve_fit(lambda x, a, b, c: sin(a * x + b) + c)
pyplot(x, y)
pyplot(x, f1(x))
pyplot(x, f2(x))
pyplot(x, f3(x))
17/58:
f1 = sp.optimize.curve_fit(lambda x, a, b: a*x+b, x, y)
f2 = sp.optimize.curve_fit(lambda x, a, b: a*x+b, x, y)
f3 = sp.optimize.curve_fit(lambda x, a, b, c: sin(a * x + b) + c, x, y)
pyplot(x, y)
pyplot(x, f1(x))
pyplot(x, f2(x))
pyplot(x, f3(x))
17/59:
f1 = sp.optimize.curve_fit(lambda x, a, b: a*x+b, x, y)
f2 = sp.optimize.curve_fit(lambda x, a, b: a*x+b, x, y)
f3 = sp.optimize.curve_fit(lambda x, a, b, c: np.sin(a * x + b) + c, x, y)
pyplot(x, y)
pyplot(x, f1(x))
pyplot(x, f2(x))
pyplot(x, f3(x))
17/60:
f1 = sp.optimize.curve_fit(lambda x, a, b: a*x+b, x, y)
f2 = sp.optimize.curve_fit(lambda x, a, b: a*x+b, x, y)
f3 = sp.optimize.curve_fit(lambda x, a, b, c: np.sin(a * x + b) + c, x, y)
plot(x, y)
plot(x, f1(x))
plot(x, f2(x))
plot(x, f3(x))
17/61:
f1 = sp.optimize.curve_fit(lambda x, a, b: a*x+b, x, y)
f2 = sp.optimize.curve_fit(lambda x, a, b: a*x+b, x, y)
f3 = sp.optimize.curve_fit(lambda x, a, b, c: np.sin(a * x + b) + c, x, y)
plt.plot(x, y)
plt.plot(x, f1(x))
plt.plot(x, f2(x))
plt.plot(x, f3(x))
17/62:
def g1(x, a, b):
    return a*x+b
    
def g2(x, ):
    
def g3(x, a, b):
    np.sin(a * x + b) + c
f1 = sp.optimize.curve_fit(g1 x, y)
f2 = sp.optimize.curve_fit(g2, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)
plt.plot(x, y)
plt.plot(x, g1(x, f1(x)[0], f1(x)[1])
plt.plot(x, f2(x))
plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/63:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ [t^i for i in range(deg)]
f3 = sp.optimize.curve_fit(g3, x, y)

plt.plot(x, y)
plt.plot(x, g1(x, f1(x)[0], f1(x)[1])
plt.plot(x, f2(x))
plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/64:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ [t^i for i in range(deg)]
f3 = sp.optimize.curve_fit(g3, x, y)

plt.plot(x, y)
plt.plot(x, g1(x, f1(x)[0], f1(x)[1]))
plt.plot(x, f2(x))
plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/65:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ np.array[t^i for i in range(deg)].T
f3 = sp.optimize.curve_fit(g3, x, y)

plt.plot(x, y)
plt.plot(x, g1(x, f1(x)[0], f1(x)[1]))
plt.plot(x, f2(x))
plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/66:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T
f3 = sp.optimize.curve_fit(g3, x, y)

plt.plot(x, y)
plt.plot(x, g1(x, f1(x)[0], f1(x)[1]))
plt.plot(x, f2(x))
plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/67:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T
f3 = sp.optimize.curve_fit(g3, x, y)

plt.plot(x, y)
plt.plot(x, g1(x, f1(x)[0], f1(x)[1]))
plt.plot(x, f2(x))
plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/68:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T


plt.plot(x, y)
plt.plot(x, g1(x, f1(x)[0], f1(x)[1]))
plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/69:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T


plt.plot(x, y)
plt.plot(x, g1(x, f1[0], f1[1]))
plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/70: x + 4
17/71:
#def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T


plt.plot(x, y)
#plt.plot(x, g1(x, f1[0], f1[1]))
plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/72:
#def g1(x, a, b):
#    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = numpy.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T


plt.plot(x, y)
#plt.plot(x, g1(x, f1[0], f1[1]))
plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
17/73:
#def g1(x, a, b):
#    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T


plt.plot(x, y)
#plt.plot(x, g1(x, f1[0], f1[1]))
plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
18/1:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
18/2:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
18/3:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1      if x[i] > t    else i + 1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
18/4:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
18/5:
def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
18/6:
#def g1(x, a, b):
#    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
    coef = np.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T


plt.plot(x, y)
plt.plot(x, g1(x, f1[0], f1[1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
18/7:
#def g1(x, a, b):
#    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T


plt.plot(x, y)
plt.plot(x, g1(x, f1[0], f1[1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
18/8:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T


plt.plot(x, y)
plt.plot(x, g1(x, f1[0], f1[1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
18/9:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(f1)

plt.plot(x, y)
#plt.plot(x, g1(x, f1[0], f1[1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
18/10:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(f1)

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0], f3(x)[1], f3(x)[2])
18/11:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(f1)

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, f3(x)[0], f3(x)[0][1], f3(x)[0][2])
18/12:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(f1)

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/13:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(f1)

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
№plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/14:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(f1)

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/15:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(f1)

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/16:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(x, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/17:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/18:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
#print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/19:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/20:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(4+3)

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/21:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
18/22:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/23:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(np.sin(1 * 2 + 4) + 5)

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/24:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
#plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/25:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/26:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, f3(x)[0][0], f3(x)[0][1], f3(x)[0][2])
18/27:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, f3[0][0], f3[0][1], f3[0][2])
18/28:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
18/29:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

#def f2(t, deg = 10):
 #   coef = np.polyfit(x, y)
  #  return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/30:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/31:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/32:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/33:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y)[0]
    return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))

plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/34:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))
print(np.polyfit(x, y))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
#plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/35:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y)
    return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))
print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
#plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/36:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))
print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
#plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/37:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    return coef @ np.array([t^i for i in range(deg)]).T
print(g3(6, 1, 2, 3))
print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/38:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    return coef @ np.array([t^i for i in range(deg)]).T

print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/39:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, deg)
    return coef @ np.array([t^i for i in range(deg+1)]).T

print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/40:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, deg)
    return coef @ np.array([t^i for i in range(deg+1)]).T

print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/41:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, deg)
    return coef @ np.array([pow(t, i) for i in range(deg+1)]).T

print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/42:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, deg)
    return coef @ np.array([pow(t, i) for i in range(deg)]).T

print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/43:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, deg)
    return coef @ np.array([pow(t, i) for i in range(deg+1)]).T

print(np.polyfit(x, y, 10))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/44:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, deg)
    return coef @ np.array([pow(t, i) for i in range(deg+1)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(t, i) for i in range(deg+1)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/45:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, deg)
    return coef @ np.array([pow(t, i) for i in range(deg+1)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(t, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/46:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, deg)
    return coef @ np.array([pow(t, i) for i in range(deg+1)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/47:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    return coef @ np.array([pow(t, i) for i in range(11)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
18/48:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    return coef @ np.array([pow(t, i) for i in range(10)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/1:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
19/2:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
19/3:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1      if x[i] > t    else i + 1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
19/4:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
19/5:
def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
19/6:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    return coef @ np.array([pow(t, i) for i in range(11)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/7:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1      if x[i] > t    else i + 1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
19/8:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
19/9:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    return coef @ np.array([pow(t, i) for i in range(11)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/10:
A = np.array([2.60055799e-08 -8.47650998e-07  6.46500060e-06  4.81373575e-05
 -5.63591811e-04 -3.38458134e-03  4.47293947e-02 -6.09364895e-02
 -2.43061759e-01 -2.13279761e-01  5.60239924e+00])
19/11:
A = np.array([2.60055799e-08, -8.47650998e-07,  6.46500060e-06,  4.81373575e-05,
 -5.63591811e-04, -3.38458134e-03,  4.47293947e-02, -6.09364895e-02,
 -2.43061759e-01, -2.13279761e-01,  5.60239924e+00])
19/12:
A = np.array([2.60055799e-08, -8.47650998e-07,  6.46500060e-06,  4.81373575e-05,
 -5.63591811e-04, -3.38458134e-03,  4.47293947e-02, -6.09364895e-02,
 -2.43061759e-01, -2.13279761e-01,  5.60239924e+00])
B = np.array([[   1,    2,    4,    8,   16,   32,   64,  128,  256,  512, 1024]])
19/13:
A = np.array([2.60055799e-08, -8.47650998e-07,  6.46500060e-06,  4.81373575e-05,
 -5.63591811e-04, -3.38458134e-03,  4.47293947e-02, -6.09364895e-02,
 -2.43061759e-01, -2.13279761e-01,  5.60239924e+00])
B = np.array([[   1,    2,    4,    8,   16,   32,   64,  128,  256,  512, 1024]])
print(A@B.T)
19/14:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t):
    coef = np.polyfit(x, y, 10)
    return coef @ np.array([pow(t, i) for i in range(11)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/15:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.array(np.polyfit(x, y, 10))
    return coef @ np.array([pow(t, i) for i in range(11)]).T

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/16:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    return result

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/17:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result

print(np.polyfit(x, y, 10))
print(np.array([pow(2, i) for i in range(11)]).T)
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/18:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
print(f2(4))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
#plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/19:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
print(f2(4))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
#plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
19/20:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
print(f2(4))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2vec(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/1:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/2:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
20/3:
def near_neighbour(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    return y[np.argmin(dist)]
20/4:
def linear(x, y, t):
    n = len(x)
    diff = abs(x - t*np.ones((n,)))
    i = np.argmin(diff)
    j = i-1      if x[i] > t    else i + 1
    return y[i] + (t-x[i])*(y[i]-y[j])/(x[i]-x[j])
20/5:
def lag_pol(x, y, t):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (t-x[j])/(x[i]-x[j])
    return A.T @ y
20/6:
def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
20/7:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/8:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/9:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/10:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t)
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

""""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)""""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
print(f2(4))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/11:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t)
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
print(f2(4))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/12:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
print(f2(4))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, f2(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/13:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
print(f2(4))
plt.plot(x, y)
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, np.vectorize(f2)(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/14:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, f(x))
plt.plot(x, g1(x, f1[0][0], f1[0][1]))
plt.plot(x, np.vectorize(f2)(x))
plt.plot(x, g3(x, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/15:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/16:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/17:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x^2 + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/18:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x*x + b) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/19:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/20:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 1) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/21:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 2) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/22:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
20/23:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print(f(t)-g1(t, f1[0][0], f1[0][1]), '- sin(ax)+b', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- ax+b,', f(t)-np.vectorize(f2)(t), '- polynomial')
x0, g1(x0, f1[0][0], f1[0][1]))
20/24:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print(f(t)-g1(t, f1[0][0], f1[0][1]), '- sin(ax)+b', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- ax+b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/25:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print(f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/26:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print(f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/27:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print('t = ', t, f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/28:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print('t = ', t, '\n', f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/29:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/30:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.plot(x, f(x))
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/31:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
plt.plot(x, f(x))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/32:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print('t = ', t, '\n', f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/33:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/34:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print('t = ', t, '\n', f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/35:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/36:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/37:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/38:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/39:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/40:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/41:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))
plt.axis(t-1, t+1)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/42:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))
#plt.axis(t-1, t+1)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/43:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))
plt.axis(t-1, t+1, -6, 6)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/44:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))
plt.axis((1, 2, -6, 6))
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/45:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))
axis = (t-1, t+1, -6, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/46:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')

axis = (t-1, t+1, -6, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/47:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')

plt.plot(x, f(x))
axis = (t-1, t+1, -6, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/48:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))
axis = (t-1, t+1, -6, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/49:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/50:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-1, t+1, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/51:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(z, f(z))

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/52:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/53:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-0.5, t+0.5, 3, 6)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/54:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-0.5, t+0.5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/55:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/56:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-2, t+2, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/57:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/58:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/59:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/60:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/61:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/62:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print('t = ', t, '\n', f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/63:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/64:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/65:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/66:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/67:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/68:
def two_neighbours(x, y, t):
    n = len(x)
    dist = abs(x - t*np.ones((n,)))
    
    return np.sort((dist)[0]+np.sort(dist)[1])/2
20/69:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/70:
dist = abs(x - t*np.ones((n,)))
print(dist)
20/71:
n = len(x)
dist = abs(x - t*np.ones((n,)))
print(dist)
20/72:
n = len(x)
dist = abs(x - t*np.ones((n,)))
print(np.sort(dist)
20/73:
n = len(x)
dist = abs(x - t*np.ones((n,)))
print(np.sort(dist))
20/74:
n = len(x)
dist = abs(x - t*np.ones((n,)))
print(np.sort(dist)[:1])
20/75:
n = len(x)
dist = abs(x - t*np.ones((n,)))
print(np.sort(dist)[0])
20/76:
n = len(x)
dist = abs(x - t*np.ones((n,)))
print(np.sort(dist)[1])
20/77:
def two_neighbours(x, y, t):
    n = len(x)
    dist = np.sort(abs(x - t*np.ones((n,)))
    
    return (dist[0]+dist[1])/2
20/78:
def two_neighbours(x, y, t):
    n = len(x)
    dist = np.sort(abs(x - t*np.ones((n,))))
    
    return (dist[0]+dist[1])/2
20/79:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (t-1, t+1, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/80:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (1, 7, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange')
20/81:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (1, 7, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/82:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (1, 7, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/83:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/84:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 7, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/85:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 4, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/86:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print('t = ', t, '\n', f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
20/87:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 4, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/88:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/89:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/90:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/91:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/92:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/93:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/94:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/95:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/96:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/97:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/98:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/99:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/100:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/101:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/102:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/103:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3, 6)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/104:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/105:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/106:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/107:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/108:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/109:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/110:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/111:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/112:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/113:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/114:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/115:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/116:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/117:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/118:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/119:
def two_neighbours(x, y, t):
    n = len(x)
    dist = np.argsort(abs(x - t*np.ones((n,))))
    
    return (y[dist[0]]+y[dist[1]])/2
20/120:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/121:
n = len(x)
    dist = np.argsort(abs(x - t*np.ones((n,))))
    
    return (y[dist[0]]+y[dist[1]])/2
20/122:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
    
return (y[dist[0]]+y[dist[1]])/2
20/123:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
    
return (y[dist[0]]+y[dist[1]])/2
20/124:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
    
print(y[dist[0]]+y[dist[1]])/2
20/125:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
    
print(y[dist[0]]+y[dist[1]])/2)
20/126:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
    
print(y[dist[0]]+y[dist[1]]/2)
20/127:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
    
print(y[dist[0]]+y[dist[1]]/2)
20/128:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
print(dist)
    
print(y[dist[0]]+y[dist[1]]/2)
20/129:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
print((abs(x - t*np.ones((n,)))
print(dist)
    
print(y[dist[0]]+y[dist[1]]/2)
20/130:
n = len(x)
dist = np.argsort(abs(x - t*np.ones((n,))))
print(abs(x - t*np.ones((n,))))
print(dist)
    
print(y[dist[0]]+y[dist[1]]/2)
20/131:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/132:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'dk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/133:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
20/134:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
21/1: import numpy as np
23/1: a = np.array(1, 2, 3, 4)
23/2: a = np.ndarray(1, 2, 3, 4)
23/3: a = np.ones
23/4: a = np.ones()
23/5: a = np.array([1, 2, 3, 4, 5])
23/6: a = np.array([[1, 2, 3, 4, 5]])
23/7: a = np.array([[1, 2, 3], [1, 2, 3]])
23/8:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
23/9: a = np.array([[1, 2, 3]])
23/10:
a = np.array([[1, 2, 3]])
a = 5
23/11:
a = np.array([[1, 2, 3]])
b = 5
a+b
23/12:
def near_neighbour(x, y, t):
    dist = x - t
    return y[np.argmin(dist)]

# Метод ближайшего соседа
23/13:
def near_neighbour(x, y, t):
    dist = abs((x - t))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
23/14:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
23/15:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = dist.np.argsort()
    return y[(ind[0]+ind[1])/2]
23/16:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range (n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
23/17:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
23/18:
def polynomial(x, y, x0):
    n = len(x)
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]^j 
    Coef = linalg.solve(Vand, y)
    return Coef.T @ np.ndarray[x0^i for i in range (n)]
23/19:
def polynomial(x, y, x0):
    n = len(x)
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]^j 
    Coef = linalg.solve(Vand, y)
    return Coef.T @ np.ndarray[[1]]
23/20:
def polynomial(x, y, x0):
    n = len(x)
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]^j 
    Coef = linalg.solve(Vand, y)
    return Coef.T @ np.ndarray[x0^i for i in range (n)]
23/21:
def polynomial(x, y, x0):
    n = len(x)
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]^j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
23/22:
def polynomial(x, y, x0):
    n = len(x)
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]^j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
23/23:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = dist.np.argsort()
    return y[(ind[0]+ind[1])/2]
23/24:
def linear(x, y, t):
    dist = x - t
    ind = dist.np.argsort()
    i, j = ind[0], ind[1]
    return y[i] + (X0-x[i])*(y[i]-y[j])/(x[i]-x[j])
23/25:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
23/26:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
23/27:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
23/28:
def polynomial(x, y, x0):
    n = len(x)
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]^j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
23/29:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = dist.np.argsort()
    return y[(ind[0]+ind[1])/2]
23/30:
def linear(x, y, t):
    dist = x - t
    ind = dist.np.argsort()
    i, j = ind[0], ind[1]
    return y[i] + (X0-x[i])*(y[i]-y[j])/(x[i]-x[j])
23/31:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
23/32:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
23/33:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/34:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
23/35:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/36:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/37:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/38:
def linear(x, y, t):
    dist = x - t
    ind = dist.numpy.argsort()
    i, j = ind[0], ind[1]
    return y[i] + (X0-x[i])*(y[i]-y[j])/(x[i]-x[j])
23/39:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = dist.numpy.argsort()
    return y[(ind[0]+ind[1])/2]
23/40:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/41:
def linear(x, y, t):
    dist = x - t
    ind = numpy.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (X0-x[i])*(y[i]-y[j])/(x[i]-x[j])
23/42:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = numpy.argsort(dist)
    return y[(ind[0]+ind[1])/2]
23/43:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/44:
def linear(x, y, t):
    dist = x - t
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (X0-x[i])*(y[i]-y[j])/(x[i]-x[j])
23/45:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = np.argsort(dist)
    return y[(ind[0]+ind[1])/2]
23/46:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/47:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = np.argsort(dist)
    return y[(ind[0]+ind[1])]/2
23/48:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
23/49:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/50:
def linear(x, y, x0):
    dist = x - t
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (X0-x[i])*(y[i]-y[j])/(x[i]-x[j])
23/51:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/52:
def linear(x, y, x0):
    dist = x - t
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
23/53:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10)
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/54:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/55:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
23/56:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/57:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/58:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, vb)
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/59:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')
axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/60:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')
#axis = (2, 5, 3.5, 4)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/61:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10


plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')
axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/62:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/63:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/64:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
23/65:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print('t = ', t, '\n', f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
23/66:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/1:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
24/2:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
24/3:
def polynomial(x, y, x0):
    n = len(x)
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]^j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/4:
def two_neighbours(x, y, x0):
    dist = x - t
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
24/5:
def linear(x, y, x0):
    dist = x - t
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
24/6:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
24/7:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
24/8:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print(f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/9:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('accuracy:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/10:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/11:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/12:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/13:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/14:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/15:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/16:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/17:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/18:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/19:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/20:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (1, 10, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/21:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/22:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/23:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/24:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/25:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/26:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/27:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/28:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-0.5, t+0.5, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/29:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-0.5, t+0.5, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/30:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-0.05, t+0.05, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/31:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-0.05, t+0.05, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/32:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-0.05, t+0.05, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print('error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/33:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-0.05, t+0.05, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), 'ob')
plt.plot(t, two_neighbours(x, y, t), 'Dk')
plt.plot(t, linear(x, y, t), 'vr')
plt.plot(t, lag_pol(x, y, t), 'xk')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb')

plt.show()
print(t, '\n','error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/34:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-0.05, t+0.05, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')

plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/35:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')

plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/36:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')

plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/37:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
print('t = ', t, '\n', f(t)-g1(t, f1[0][0], f1[0][1]), '- ax+b,', f(t)- g3(t, f3[0][0], f3[0][1], f3[0][2]), '- sin(a*x) + b,', 
  f(t)-np.vectorize(f2)(t), '- polynomial')
24/38:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')

plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/39:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')

plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/40:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 4.56 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
24/41:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

'''axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) '''
# погрешность
plt.plot(x, y, '.')

plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/42:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')

plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/43:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
'''plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')'''
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
plt.plot(2*x, y, '.')
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/44:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/45:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
#plt.plot(x, y, '.')
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/46:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
#plt.plot(x, y, '.')
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/47:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
#plt.plot(x, y, '.')
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/48:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/49:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)
#plt.axis(axis)
plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/50:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/51:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/52:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
#plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/53:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
#plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/54:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/55:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
#plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/56:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
24/57:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
#plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/58:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.')
plt.plot(t, two_neighbours(x, y, t), '.')
plt.plot(t, linear(x, y, t), '.')
plt.plot(t, lag_pol(x, y, t), '.')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, '.')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/59:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1.2, 1.2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vr')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/60:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1, 3)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vr')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/61:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1, 2)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vr')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/62:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1, 1)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vr')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/63:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1, 1)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vr')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/64:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-1, t+1, -1, 1)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/65:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/66:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/67:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
#plt.axis(axis)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/68:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend()
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/69:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y,  label = 'plot')
plt.axis(axis)
plt.legend()
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/70:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), '^')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend()
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/71:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'Ob', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend()
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/72:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'ob', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend()
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/73:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend()
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/74:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=14)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/75:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), label='linear')
plt.plot(t, lag_pol(x, y, t), label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/76:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/77:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/78:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/79:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/80:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/81:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/82:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours')
24/83:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
print(t, linear(x, y, t))
24/84:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/85:
def two_neighbours(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
24/86:
def linear(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
24/87:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/88:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/89:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/90:
plt.plot(x, y)
plt.show()
24/91:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/92:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/93:
plt.plot(x, y)
plt.show()
24/94:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/95:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/96:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/97:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/98:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/99:
def derivative1(x, y, x0, n):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    (y[i]-y[j])/(x[i]-x[j])
24/100:
def derivative2(x, y, x0, n):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind3 = ind[:3].sort()
    ond
    (y[i]-y[j])/(x[i]-x[j])
24/101:
def derivative2(x, y, x0, n):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    [i, j, k] = ind[:3].sort()
    return ((y[k]-y[ind[j])/(x[k]-x[j]) - (y[j]-y[ind[i])/(x[j]-x[i]))/(x[j] - x[i])
24/102:
def derivative2(x, y, x0, n):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    [i, j, k] = ind[:3].sort()
    return (y[k]-y[ind[j])/(x[k]-x[j]) - (y[j]-y[ind[i])/(x[j]-x[i]))/(x[j] - x[i])
24/103:
def derivative2(x, y, x0, n):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    [i, j, k] = ind[:3].sort()
    return (y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[ind[i])/(x[j]-x[i]))/(x[j] - x[i])
24/104:
def derivative2(x, y, x0, n):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    [i, j, k] = ind[:3].sort()
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
24/105:
def f(x):
    return 2*x^2 + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(3.2), derivative2(3.2))
24/106:
def f:
    return 2*x^2 + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(3.2), derivative2(3.2))
24/107:
def f(x):
    return 2*x^2 + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(3.2), derivative2(3.2))
24/108:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(3.2), derivative2(3.2))
24/109:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:2].sort()
    i, j = ind[0], ind[1]
    (y[i]-y[j])/(x[i]-x[j])
24/110:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    [i, j, k] = ind[:3].sort()
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
24/111:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), derivative2(x, y, 3.2))
24/112:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind 3 = ind[:3].sort()
    [i, j, k] = ind3
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
24/113:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind3 = ind[:3].sort()
    [i, j, k] = ind3
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
24/114:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), derivative2(x, y, 3.2))
24/115:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind3 = ind[:3].sort()
    i = ind3[0]
    j = ind3[1]
    k = ind3[2]
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
24/116:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), derivative2(x, y, 3.2))
24/117:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    (y[i]-y[j])/(x[i]-x[j])
24/118:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind1 = ind[:1].sort()
    i = ind3[0]
    j = ind3[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
24/119:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), derivative2(x, y, 3.2))
24/120:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i = ind2[0]
    j = ind2[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
24/121:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    (y[i]-y[j])/(x[i]-x[j])
24/122:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), derivative2(x, y, 3.2))
24/123:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), derivative2(x, y, 3.2))
24/124:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
24/125:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), derivative2(x, y, 3.2))
24/126:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), derivative2(x, y, 3.2))
24/127:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), '.', derivative2(x, y, 3.2))
24/128:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    return (y[i]-y[j])/(x[i]-x[j])
24/129:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), '.', derivative2(x, y, 3.2))
24/130:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, f(x))
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/131:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/132:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/133:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 

plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/134:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 

plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/135:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
#f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 

plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/136:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
#f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y)
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/137:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
#f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, f(x))
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/138:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
#f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/139:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
#f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y)
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/140:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
24/141:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
24/142:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/143:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
#f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y)
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/144:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/145:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/146:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/147:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/148:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x) + c
    
f1 = sp.optimize.curve_fit(g1, x, y)
def f2(t):
    return lag_pol(x, y, t)
#f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
24/149:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/150:
def polynomial(x, y, x0):
    n = len(x)
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/151:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/152:
def polynomial(x, y, x0):
    n = len(x)
    vand[][]
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/153:
def polynomial(x, y, x0):
    n = len(x)
    vand[n][n]
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/154:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/155:
def polynomial(x, y, x0):
    n = len(x)
    vand[]
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/156:
def polynomial(x, y, x0):
    n = len(x)
    vand[[]]
    for i in range(n):
        for j in range(n):
            Vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/157:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/158:
def polynomial(x, y, x0):
    n = len(x)
    vand[][]
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/159:
def polynomial(x, y, x0):
    n = len(x)
    vand[]
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/160:
def polynomial(x, y, x0):
    n = len(x)
    vand = []
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/161:
def polynomial(x, y, x0):
    n = len(x)
    vand = [[]]
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/162:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/163:
def polynomial(x, y, x0):
    n = len(x)
    vand[n][n]
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/164:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/165:
def polynomial(x, y, x0):
    n = len(x)
    vand = []
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/166:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/167:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/168:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/169:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/170:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(Vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/171:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/172:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0^i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/173:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/174:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0**i for i in range (n)]
    return Coef.T @ np.ndarray(Power)
24/175:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/176:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0**i for i in range (n)]
    return Coef.T @ np.array(Power)
24/177:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='pol')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/178:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), 'or', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/179:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), 'vx', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/180:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), ':', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/181:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/182:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), '-polynomial', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/183:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/184:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial.', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/185:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
24/186:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
25/1:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
25/2:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
25/3:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0**i for i in range (n)]
    return Coef.T @ np.array(Power)
25/4:
def two_neighbours(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
25/5:
def linear(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
25/6:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
25/7:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    return (y[i]-y[j])/(x[i]-x[j])
25/8:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
25/9:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
25/10:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
25/11:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
#f3 = sp.optimize.curve_fit(g3, x, y)

"""def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)"""

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
25/12:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
 #   print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
25/13:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
25/14: np.help(polyfit)
26/1:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

'''def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)'''

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/2:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
26/3:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
26/4:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0**i for i in range (n)]
    return Coef.T @ np.array(Power)
26/5:
def two_neighbours(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
26/6:
def linear(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
26/7:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
26/8:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    return (y[i]-y[j])/(x[i]-x[j])
26/9:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
26/10:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
26/11:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
26/12:
def f(x):
    return 2*x*x + x
x = np.linspace(1, 10, 10)
y = f(x)
print(derivative1(x, y, 3.2), '.', derivative2(x, y, 3.2))
26/13:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

'''def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)'''

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/14:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
26/15:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
26/16:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

'''def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)'''

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/17:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

'''def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)'''

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')

plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/18:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

'''def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)'''

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/19:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

'''def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)'''

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')

plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/20:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

'''def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)'''

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g1(x0, f3[0][0], f3[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/21:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

'''def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)'''

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/22:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/23:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/24:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]))
#plt.plot(x0, np.vectorize(f2)(x0))
#plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]))
plt.show()
26/25:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def f2(t, deg = 10):
    coef = np.polyfit(x, y, 10)
    result1 = np.array([pow(t, i) for i in range(11)]).T
    print(result1)
    result = coef @ np.array([pow(t, i) for i in range(11)]).T
    
    return result
f2vec = np.vectorize(f2)

#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.show()
26/26:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]))
plt.plot(x0, np.vectorize(f2)(x0))
plt.show()
26/27:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.show()
26/28:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/1:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/2:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
27/3:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
27/4:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0**i for i in range (n)]
    return Coef.T @ np.array(Power)
27/5:
def two_neighbours(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
27/6:
def linear(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
27/7:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
27/8:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    return (y[i]-y[j])/(x[i]-x[j])
27/9:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
27/10:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 10)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
27/11:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/12:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b, c):
    return np.sin(a * x + b) + c
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1], f3[0][2]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/13:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/14:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/15:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, f2(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/16:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/17:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0))
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]), label = 'function')
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/18:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/19:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x, np.vectorize(f2)(x), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/20:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/21:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(lag_pol(x, y, x0)), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/22:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/23:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x, np.vectorize(f2)(x), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/24:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/25:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, f2(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/26:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/27:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/28:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 3)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
27/29:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/30:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 5)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
27/31:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/32:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/33:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
27/34:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
27/35:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0**i for i in range (n)]
    return Coef.T @ np.array(Power)
27/36:
def two_neighbours(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
27/37:
def linear(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
27/38:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
27/39:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    return (y[i]-y[j])/(x[i]-x[j])
27/40:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
27/41:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 5)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
27/42:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/43:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)



#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
27/44: help(numpy)
27/45: help(np)
27/46:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/47:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/48:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/49:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/50:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/51:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/52:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/53:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/54:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return sqrt(np.sum((y-f(x))**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/55:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error:', error(g1), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/56:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error:', error(g1(x0, f1[0][0], f1[0][1]), x, y), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/57:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error:', error(g1(x0, f1[0][0], f1[0][1]), x, y), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/58:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error:', error(g1(x, f1[0][0], f1[0][1]), x, y), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/59:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
27/60:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
27/61: print(math.__file__)
27/62: print(np.__file__)
27/63: print(sp.__file__)
27/64:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
27/65:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
27/66:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
27/67:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
27/68:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
29/1: import numpy as np
30/1:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    for i in range(98):
        int1[i], int2[i], int3[i] = f1(net[i+1]), f2(net[i+1]), f3(net[i+1])
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
30/2: x + 4
30/3:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1 = np.array([f2(net[i+1]) for i in range(100)])
30/4:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)
plt.grid()
plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
30/5:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)

plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
30/6: help(sp.optimize.curve_fit)
30/7: help(sp.optimize.curve_fit)
30/8: help(sp.optimize.curve_fit())
30/9:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
30/10: help(sp.optimize.curve_fit())
30/11: help(sp.optimize.curve_fit
30/12: help(sp.optimize.curve_fit)
30/13: help(sp.least_squares)
30/14: help(least_squares)
30/15: help(sp.optimize.least_squares)
30/16: help(MINPACK)
30/17: help(minpack.py)
30/18: help(scipy.optimize.minpack.py)
32/1: #
32/2:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
32/3:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
32/4:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0**i for i in range (n)]
    return Coef.T @ np.array(Power)
32/5:
def two_neighbours(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
32/6:
def linear(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
32/7:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
32/8:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    return (y[i]-y[j])/(x[i]-x[j])
32/9:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
32/10:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 5)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
32/11:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
33/1: with open "DataBase.txt" as DataBase
33/2: DataBase = open("DataBase.txt")
33/3: DataBase = open("DataBase.txt", "r")
33/4:
DataBase = open("DataBase.txt", "r")
Indicatrices = open(ExperimentalIndicatrices.txt, "r")
33/5:
DataBase = open("DataBase.txt", "r")
Indicatrices = open("ExperimentalIndicatrices.txt", "r")
33/6:
DataBase = open("DataBase.txt", "r")
Indicatrices = open("ExperimentalIndicatrices.txt", "r")
Params = open("ExperimentalParams.txt", "r")
33/7:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]
33/8:
SDataBase = Database.read()
SIndicatrices = Indicatrices.read()
SParams = Params.read()
33/9:
SDataBase = DataBase.read()
SIndicatrices = Indicatrices.read()
SParams = Params.read()
33/10: split.help
33/11: help("split")
33/12: help("split()")
33/13: help(".split")
33/14: help("list.split")
33/15: help("split")
33/16: help("split.()")
33/17: help("split()")
33/18:
SDataBase.split(" ")
SIndicatrices.split(" ")
SParams.split(" ")
33/19:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
33/20:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
33/21:
DataBase = SDataBase.split("    ")
Indicatrices = SIndicatrices.split("    ")
Params = SParams.split("    ")
33/22:
DataBase = np.ndarray(SDataBase.split(" "))
Indicatrices = SIndicatrices.split("    ")
Params = SParams.split("    ")
33/23: import numpy as np
33/24:
DataBase = np.ndarray(SDataBase.split(" "))
Indicatrices = SIndicatrices.split("    ")
Params = SParams.split("    ")
33/25:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("    ")
Params = SParams.split("    ")
33/26:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("    ")
Params = SParams.split("    ")
Params
33/27:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params
33/28:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices
Params
33/29:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Indicatrices
33/30:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split(    )
33/31:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split(    )
Params
33/32:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split("   ")
Params
33/33:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split("\t")
Params
33/34:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split("t")
Params
33/35:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split("\t")
Params
33/36:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split(" ")
Params
33/37:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split("\t")
Params
33/38:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\t")
for s in Params:
    s.split("\t")
Params
33/39:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split("\t")
Params
33/40:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    list(s.split("\t"))
Params
33/41:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split("\t")
Params
33/42:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split("   ")
Params
33/43:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split('   ')
Params
33/44:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split('\t')
Params
33/45:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split('')
Params
33/46:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split(' ')
Params
33/47:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
for s in Params:
    s.split(" ")
Params
33/48:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params[1].split(" ")
Params
33/49:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params[1].split("\t")
Params
33/50:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params[1].split("\t")
Params
33/51:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params1 = Params[1].split("\t")
Params
33/52:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params[1].split(/\s+/g)
Params
33/53:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params.replace("\t", " ")
Params
33/54:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params.replace("\t", " ")
Params = SParams.split("\n")

Params
33/55:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("\t", " ")
Params = SParams.split("\n")

Params
33/56:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("   ", " ")
Params = SParams.split("\n")

Params
33/57:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("\", " ")
Params = SParams.split("\n")

Params
33/58:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("t", " ")
Params = SParams.split("\n")

Params
33/59:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("t", " ")
Params = SParams.split("\t")

Params
33/60:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("\", " ")
Params = SParams.split("\n")

Params
33/61:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("\t", " ")
Params = SParams.split("\n")

Params
33/62:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("\t", " ")
Params = SParams.split("\n")

Params[1]
33/63:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("\t", " ")
Params = SParams.split("\n")

Params[1].split("t")
33/64:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
SParams.replace("\t", " ")
Params = SParams.split("\n")

Params[1].split("\t")
33/65:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")

Params[1].split("\t")
33/66:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
map(split("\t"), Params) 
Params
33/67:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")

map(Lambda a: a.split("\t"), Params) 
Params
33/68:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")

list(map(Lambda a: a.split("\t"), Params))
Params
33/69:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")

list(map(lambda a: a.split("\t"), Params))
Params
33/70:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")

Params = list(map(lambda a: a.split("\t"), Params))
Params
34/1:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices
34/2: import numpy as np
34/3:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
34/4:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
34/5:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices
34/6:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))
Indicatrices
34/7:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = np.ndarray(list(map(lambda a: a.split("\t"), Indicatrices)))
Indicatrices
34/8:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))
Indicatrices
34/9:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))
SDataBase
34/10:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))
SDataBase = SDataBase.split("\n")
34/11:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))
DataBase
34/12:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = SDataBase.split("\n")
#DataBase = list(map(lambda a: a.split("\t"), DataBase))
DataBase
34/13:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase
34/14:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

SDataBase
34/15:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
DataBase
34/16:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = np.ndarray(list(map(lambda a: a.split("\t"), Params)))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
DataBase
34/17:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = np.ndarray(list(map(lambda a: a.split("\t"), Indicatrices)))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
DataBase
34/18:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = np.ndarray(list(map(lambda a: a.split("\t"), SDataBase)))
DataBase
34/19:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = np.ndarray(list(map(lambda a: a.split("\t"), Params)))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
DataBase
34/20:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
DataBase
34/21:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
34/22:
import numpy as np
import pytables
34/23:
import numpy as np
import PyTables
34/24: import numpy as np
34/25:
Differrence = Database[4:] - Indicatrices 
#sqrt(sum(x**2 for x in ))
34/26:
Differrence = DataBase[4:] - Indicatrices 
#sqrt(sum(x**2 for x in ))
34/27:
#DataBase = np.ndarray(SDataBase.split("    "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
Indicatrices
34/28:
#DataBase = np.ndarray(SDataBase.split("    "))
#Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
Indicatrices
34/29:
#DataBase = np.ndarray(SDataBase.split("    "))
#Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), SIndicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
Indicatrices
34/30:
DataBase = np.ndarray(SDataBase.split(" "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
Indicatrices
34/31:
DataBase = np.ndarray(SDataBase.split(" "))
Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))

DataBase = list(map(lambda a: a.split("\t"), SDataBase))
Indicatrices
34/32:
DataBase = np.ndarray(SDataBase.split(" "))
DataBase = list(map(lambda a: a.split("\t"), SDataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/33:
DataBase = SDataBase.split("    ")
DataBase = list(map(lambda a: a.split("\t"), SDataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/34:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), SDataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/35:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/36:
#DataBase = SDataBase.split("\n")
#DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/37:
DataBase = SDataBase.split("\n")
#DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/38:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/39:
DataBase = SDataBase.split("\n")
#DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/40:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
SDataBase
34/41:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
SDataBase
34/42: import numpy as np
34/43:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
34/44:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
SDataBase
34/45:
DataBase = SDataBase.split("\n")
#DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/46:
Differrence = DataBase[4:] - Indicatrices 
#sqrt(sum(x**2 for x in ))
34/47:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]
34/48:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))


Indicatrices
34/49:
import numpy as np
import re
34/50:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
SDataBase
34/51: Indicatrices = re.split('\n |\t ', SIndicatrices)
34/52:
Indicatrices = re.split('\n |\t ', SIndicatrices)
Indicatrices
34/53:
import numpy as np
import re
34/54:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
34/55:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
SDataBase
34/56:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n |\t ', SIndicatrices)

Indicatrices
34/57:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

Indicatrices = SIndicatrices.split("\n")
Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t ', SIndicatrices)

Indicatrices
34/58:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t ', SIndicatrices)

Indicatrices
34/59:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n |\t', SIndicatrices)

Indicatrices
34/60:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = float(re.split('\n |\t', SIndicatrices))

Indicatrices
34/61:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n |\t', SIndicatrices)
float(Indicatrices)

Indicatrices
34/62:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n |\t', SIndicatrices)
list(map(float, Indicatrices))

Indicatrices
34/63:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n |\t', SIndicatrices)
#list(map(float, Indicatrices))

Indicatrices
34/64:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
#list(map(float, Indicatrices))

Indicatrices
34/65:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))

Indicatrices
34/66:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
#list(map(float, Indicatrices))

Indicatrices
34/67:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))

Indicatrices
34/68:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
#list(map(float, Indicatrices))
Indicatrices.index('')
34/69:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
#list(map(float, Indicatrices))
Indicatrices[8000]
34/70:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
#list(map(float, Indicatrices))
Indicatrices[8001]
34/71:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
#list(map(float, Indicatrices))
Indicatrices[7999]
34/72:
import numpy as np
import re
34/73:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
34/74:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
SDataBase
34/75:
DataBase = SDataBase.split("\n")
DataBase = list(map(lambda a: a.split("\t"), DataBase))

#Indicatrices = SIndicatrices.split("\n")
#Indicatrices = list(map(lambda a: a.split("\t"), Indicatrices))

Params = SParams.split("\n")
Params = list(map(lambda a: a.split("\t"), Params))
Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/76:
DataBase = re.split('\n|\t', SDataBase)
list(map(float, Darabase))

Params = re.split('\n|\t', SParams)
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/77:
DataBase = re.split('\n|\t', SDataBase)
list(map(float, Database))

Params = re.split('\n|\t', SParams)
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/78:
DataBase = re.split('\n|\t', SDataBase)
list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/79:
DataBase = re.split('\n|\t', SDataBase)
#list(map(float, DataBase))
DataBase.index('')

Params = re.split('\n|\t', SParams)
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/80:
DataBase = re.split('\n|\t', SDataBase)
#list(map(float, DataBase))
DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/81:
DataBase = re.split('\n|\t', SDataBase)
#list(map(float, DataBase))
#DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/82:
DataBase = re.split('\n|\t', SDataBase)
list(map(float, DataBase))
#DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/83:
DataBase = re.split('\n|\t', SDataBase)
#list(map(float, DataBase))
DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/84:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
34/85:
import numpy as np
import re
34/86:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
34/87:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
34/88:
DataBase = re.split('\n|\t', SDataBase)
#list(map(float, DataBase))
DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/89:
DataBase = re.split('\n|\t', SDataBase)
#list(map(float, DataBase))
DataBase.index(' ')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/90:
DataBase = re.split('\n|\t', SDataBase)
list(map(float, DataBase))
DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/91:
DataBase = re.split('\n|\t', SDataBase)
list(map(float, DataBase))
'' in DataBase

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/92:
DataBase = re.split('\n|\t', SDataBase)
#list(map(float, DataBase))
'' in DataBase

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/93:
DataBase = re.split('\n|\t', SDataBase)
#list(map(float, DataBase))
'9236.713512' in DataBase

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/94:
DataBase = re.split('\n|\t| ', SDataBase)
list(map(float, DataBase))
DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/95:
DataBase = re.split('\n|\t| ', SDataBase)
list(map(float, DataBase))
DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/96:
DataBase = re.split('\n|\t| ', SDataBase)
#list(map(float, DataBase))
DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/97:
DataBase = re.split('\n|\t| ', SDataBase)
DataBase
#list(map(float, DataBase))
#DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/98:
DataBase = re.split('\n|\t| ', SDataBase)
DataBase
#list(map(float, DataBase))
#DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
#list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/99:
DataBase = re.split('\n|\t| ', SDataBase)
DataBase
list(map(float, DataBase))
#DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/100:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
34/101:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
34/102:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
34/103:
DataBase = re.split('\n|\t| ', SDataBase)
DataBase
list(map(float, DataBase))
#DataBase.index('')

Params = re.split('\n|\t', SParams)
Params.index('')
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/104:
DataBase = re.split('\n|\t| ', SDataBase)
DataBase
list(map(float, DataBase))


Params = re.split('\n|\t', SParams)
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/105:
Differrence = DataBase[4:] - Indicatrices 
#sqrt(sum(x**2 for x in ))
34/106:
Differrence = list(DataBase[4:]) - Indicatrices 
#sqrt(sum(x**2 for x in ))
34/107:
type(DataBase[4:])
#Differrence = list(DataBase[4:]) - Indicatrices 
#sqrt(sum(x**2 for x in ))
34/108:

#Differrence = list(DataBase[4:]) - Indicatrices 
#sqrt(sum(x**2 for x in ))
34/109:

Differrence = list(DataBase[4:]) - Indicatrices 
#sqrt(sum(x**2 for x in ))
34/110:
a = [1, 2, 3]
b = [1, 2]
a{1:}+b
34/111:
a = [1, 2, 3]
b = [1, 2]
a[1:]+b
34/112:
a = [1, 2, 3]
b = [1, 2]
a[1:]+=b
34/113:
a = [1, 2, 3]
b = [1, 2]
a[1:]++b
34/114:
a = [1, 2, 3]
b = [1, 2]

a++a
34/115:
a = [1, 2, 3]
b = [1, 2]

list(map(lambda a, b: a+b), a, a)
34/116:
a = [1, 2, 3]
b = [1, 2]

list(map(lambda a, b: a+b, a, a))
34/117:
list(map(lambda a, b: a-b, a, a, DataBase[4:], Indicatrices))

#sqrt(sum(x**2 for x in ))
34/118:
list(map(lambda a, b: a-b,  DataBase[4:], Indicatrices))

#sqrt(sum(x**2 for x in ))
34/119:
DataBase = re.split('\n|\t| ', SDataBase)
list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
34/120: Type(Indicatrices)
34/121: type(Indicatrices)
34/122: type(Indicatrices[1])
34/123:
DataBase = re.split('\n|\t| ', SDataBase)
list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
Indicatrices
34/124:
DataBase = re.split('\n|\t| ', SDataBase)
list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
list(map(float, Indicatrices))
Indicatrices
34/125:
DataBase = re.split('\n|\t| ', SDataBase)
Database = list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
Indicatrices
34/126: type(Indicatrices[1])
34/127:
list(map(lambda a, b: a-b,  DataBase[4:], Indicatrices))

#sqrt(sum(x**2 for x in ))
34/128:
DataBase = re.split('\n|\t| ', SDataBase)
Database = list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
DataBase
34/129:
DataBase = re.split('\n|\t| ', SDataBase)
Database = list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
DataBase
34/130:
DataBase = re.split('\n|\t| ', SDataBase)
Database = list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
Indicatrices
34/131:
DataBase = re.split('\n|\t| ', SDataBase)
Database = list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
Params
34/132:
Database
DataBase = re.split('\n|\t| ', SDataBase)
Database = list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
34/133:
DataBase = re.split('\n|\t| ', SDataBase)
DataBase = list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
34/134:
list(map(lambda a, b: a-b,  DataBase[4:], Indicatrices))

#sqrt(sum(x**2 for x in ))
34/135:
DataBase = re.split('\n', SDataBase)
DataBase = list(map(float, DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
34/136:
DataBase = split('\n', SDataBase)
DataBase = list(map(split('\t'), DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
34/137:
DataBase = split('\n', SDataBase)
DataBase = list(map(lambda a: a.split('\t'), DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
34/138:
DataBase = re.split('\n', SDataBase)
DataBase = list(map(lambda a: a.split('\t'), DataBase))

Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
35/1:
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as mlp

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "D:\\Python projects\\Foto krovi\\Blood_m001_t3_22_d21_11_23.jpg"
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')
draw = ImageDraw.Draw(imgg)
pp = imgg.load()
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = mlp.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
mlp.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
35/2:
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as mlp

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = ""C:\Users\belco\OneDrive\ФФ\Биомед\Костя\Ly gl2уч4 deform_medi_manifestCapture_001 (1).JPG""
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')
draw = ImageDraw.Draw(imgg)
pp = imgg.load()
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = mlp.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
mlp.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
35/3:
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as mlp

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = ""C:\Users\belco\OneDrive\ФФ\Биомед\Костя\Ly gl2уч4 deform_medi_manifestCapture_001 (1).JPG
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')
draw = ImageDraw.Draw(imgg)
pp = imgg.load()
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = mlp.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
mlp.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
35/4:
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as mlp

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\Users\belco\OneDrive\ФФ\Биомед\Костя\Ly gl2уч4 deform_medi_manifestCapture_001 (1).JPG"
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')
draw = ImageDraw.Draw(imgg)
pp = imgg.load()
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = mlp.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
mlp.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
35/5:
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as mlp

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\Users\belco\OneDrive\ФФ\Биомед\Костя\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')
draw = ImageDraw.Draw(imgg)
pp = imgg.load()
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = mlp.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
mlp.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
35/6:
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as mlp

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\Users\belco\OneDrive\ФФ\Биомед\Костя\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')
draw = ImageDraw.Draw(imgg)
pp = imgg.load()
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = mlp.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
mlp.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
35/7:
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as mlp

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\\Users\\belco\\OneDrive\\ФФ\\Биомед\\Костя\\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')
draw = ImageDraw.Draw(imgg)
pp = imgg.load()
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = mlp.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
mlp.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
35/8:
from PIL import Image, ImageDraw
import numpy as np
import matplotlib.pyplot as plt

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\\Users\\belco\\OneDrive\\ФФ\\Биомед\\Костя\\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')
draw = ImageDraw.Draw(imgg)
pp = imgg.load()
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = plt.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
plt.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
36/1:
from PIL import Image, ImageDraw #
import numpy as np
import matplotlib.pyplot as plt

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\\Users\\belco\\OneDrive\\ФФ\\Биомед\\Костя\\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')  //grey
draw = ImageDraw.Draw(imgg)
pp = imgg.load()  //matrix pixel
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)

#threshold


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = plt.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
plt.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
36/2:
from PIL import Image, ImageDraw #
import numpy as np
import matplotlib.pyplot as plt

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\\Users\\belco\\OneDrive\\ФФ\\Биомед\\Костя\\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.15
shag = 1

img = Image.open(imya)
imgg = img.convert('L')  #grey
draw = ImageDraw.Draw(imgg)
pp = imgg.load()  #matrix pixel
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)

#threshold


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = plt.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
plt.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
36/3:
from PIL import Image, ImageDraw #
import numpy as np
import matplotlib.pyplot as plt

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\\Users\\belco\\OneDrive\\ФФ\\Биомед\\Костя\\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.5
shag = 1

img = Image.open(imya)
imgg = img.convert('L')  #grey
draw = ImageDraw.Draw(imgg)
pp = imgg.load()  #matrix pixel
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)

#threshold


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = plt.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
plt.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
36/4:
from PIL import Image, ImageDraw #
import numpy as np
import matplotlib.pyplot as plt

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\\Users\\belco\\OneDrive\\ФФ\\Биомед\\Костя\\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.7
shag = 1

img = Image.open(imya)
imgg = img.convert('L')  #grey
draw = ImageDraw.Draw(imgg)
pp = imgg.load()  #matrix pixel
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)

#threshold


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = plt.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
plt.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
39/1:
import numpy as np
import re
39/2:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
39/3:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
39/4:
DataBase = re.split('\n', SDataBase)
DataBase = list(map(lambda a: a.split('\t'), DataBase))


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
39/5: type(Indicatrices[1])
39/6:
list(map(lambda a, b: a-b,  DataBase[4:], Indicatrices))

#sqrt(sum(x**2 for x in ))
39/7:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]
39/8:
import numpy as np
import re
39/9:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
39/10:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
39/11:
DataBase = re.split('\n', SDataBase)
DataBase = list(map(lambda a: a.split('\t'), DataBase))


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
39/12: Params
39/13: Indicatrices
39/14: DataBase
40/1:
import numpy as np
import re
40/2:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
40/3:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
40/4:
DataBase = re.split('\n', SDataBase)
DataBase = list(map(lambda a: a.split('\t'), DataBase))


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/5: Params
40/6: Indicatrices
40/7: DataBase
40/8: SDataBase
40/9:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

DataBase = re.split('\n', SDataBase)
DataBase = string_to_2d_list(SDataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/10:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

DataBase = re.split('\n', SDataBase)
DataBase = string_to_2d_list(SDataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/11: DataBase
40/12:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(input_2d_list):
    # Use nested list comprehension to convert each element to float
    result_2d_list = [[float(element) for element in row] for row in input_2d_list]
    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/13:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(input_2d_list):
    # Use nested list comprehension to convert each element to float
    result_2d_list = [[float(element) for element in row] for row in input_2d_list]
    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/14: DataBase
40/15:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(input_2d_list):
    # Use nested list comprehension to convert each element to float
    result_2d_list = [[float(element) for element in row] for row in input_2d_list]
    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
#DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/16: DataBase
40/17:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_fixed_precision(input_2d_list):
    # Find the maximum number of decimal places in the input list
    max_precision = max(len(element.split('.')[-1]) if '.' in element else 0 for row in input_2d_list for element in row)

    # Use nested list comprehension to convert each element to a number with the same precision
    result_2d_list = [
        [round(float(element), max_precision) if '.' in element else int(element) for element in row]
        for row in input_2d_list
    ]

    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_fixed_precision(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/18: DataBase
40/19:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_fixed_precision(input_2d_list):
    # Find the maximum number of decimal places in the input list
    max_precision = max(len(element.split('.')[-1]) if '.' in element else 0 for row in input_2d_list for element in row)

    # Use nested list comprehension to convert each element to a number with the same precision
    result_2d_list = [
        [round(float(element), max_precision) if '.' in element else int(element) for element in row]
        for row in input_2d_list
    ]

    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_fixed_precision(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/20: DataBase
40/21:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_fixed_precision(input_2d_list):
    # Find the maximum number of decimal places in the input list
    max_precision = max(len(element.split('.')[-1]) if '.' in element else 0 for row in input_2d_list for element in row)

    # Use nested list comprehension to convert each element to a number with the same precision
    result_2d_list = [
        [Decimal(element).quantize(Decimal('1e-{0}'.format(max_precision)), rounding=ROUND_HALF_UP) if '.' in element else int(element) for element in row]
        for row in input_2d_list
    ]

    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_fixed_precision(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/22:
import numpy as np
import re
from decimal import Decimal, ROUND_HALF_UP
40/23:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_fixed_precision(input_2d_list):
    # Find the maximum number of decimal places in the input list
    max_precision = max(len(element.split('.')[-1]) if '.' in element else 0 for row in input_2d_list for element in row)

    # Use nested list comprehension to convert each element to a number with the same precision
    result_2d_list = [
        [Decimal(element).quantize(Decimal('1e-{0}'.format(max_precision)), rounding=ROUND_HALF_UP) if '.' in element else int(element) for element in row]
        for row in input_2d_list
    ]

    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_fixed_precision(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
40/24: DataBase
43/1:
import numpy as np
import re
from decimal import Decimal, ROUND_HALF_UP
43/2:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
43/3:
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
43/4:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_fixed_precision(input_2d_list):
    # Find the maximum number of decimal places in the input list
    max_precision = max(len(element.split('.')[-1]) if '.' in element else 0 for row in input_2d_list for element in row)

    # Use nested list comprehension to convert each element to a number with the same precision
    result_2d_list = [
        [Decimal(element).quantize(Decimal('1e-{0}'.format(max_precision)), rounding=ROUND_HALF_UP) if '.' in element else int(element) for element in row]
        for row in input_2d_list
    ]

    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_fixed_precision(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
43/5: DataBase
43/6:
list(map(lambda a, b: a-b,  DataBase[4:], Indicatrices))

#sqrt(sum(x**2 for x in ))
43/7:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
43/8:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_fixed_precision(input_2d_list):
    # Find the maximum number of decimal places in the input list
    max_precision = max(len(element.split('.')[-1]) if '.' in element else 0 for row in input_2d_list for element in row)

    # Use nested list comprehension to convert each element to a number with the same precision
    result_2d_list = [
        [Decimal(element).quantize(Decimal('1e-{0}'.format(max_precision)), rounding=ROUND_HALF_UP) if '.' in element else int(element) for element in row]
        for row in input_2d_list
    ]

    return result_2d_list


DataBase = string_to_2d_list(SDataBase)
#DataBase = convert_to_fixed_precision(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
43/9: DataBase
43/10:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
43/11: DataBase
43/12:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = re.split('\n|\t', SIndicatrices)
Indicatrices = list(map(float, Indicatrices))
43/13: DataBase
43/14: Params
43/15: Params
43/16: SParams
43/17: Params
43/18: Indicatrices
43/19:
def f(a, b):
    return a-b
list(map(f,  DataBase[4:], Indicatrices))
43/20:
import numpy as np
import re
import itertools
43/21: sum_list = [abs(x - y) for x, y in zip(Database[:4], Params)]
43/22: sum_list = [abs(x - y) for x, y in zip(DataBase[:4], Params)]
43/23: sum_list = [abs(x - y) for x, y in zip(DataBase[4:], Params)]
43/24: DataBase
43/25: sum_list = [abs(x - y) for x, y in zip(DataBase[0][4:], Params)]
43/26: sum_list = [[abs(x - y) for x, y in zip(DataBase[0][n:], Params) for n in range(6)]]
43/27: sum_list = [[abs(x - y) for x, y in zip(DataBase[0][n:], Params)]for n in range(6)]
43/28:
sum_list = [[abs(x - y) for x, y in zip(DataBase[0][n:], Params)]for n in range(6)]
sum_list
43/29:
sum_list = [[abs(x - y) for x, y in zip(DataBase[0][n:], Params)]for n in range(1)]
sum_list
43/30:
sum_list = [[abs(x - y) for x, y in zip(DataBase[n][4:], Params)]for n in range(1)]
sum_list
43/31:
sum_list = [[abs(x - y) for x, y in zip(DataBase[n][4:], Params)]for n in range(2)]
sum_list
43/32: DataBase[0][0]-Indicatrices[0][0]
43/33: DataBase[0][4]-Indicatrices[0]
43/34:
sum_list = [[abs(x - y) for x, y in zip(DataBase[n][4:], Params)]for n in range(2)]
sum_list
43/35: DataBase[0][0]
43/36: DataBase[0][3]
43/37: DataBase[0][4]
43/38: Params[0]
43/39: Params[1]
43/40: Params[2]
43/41:
sum_list = [[abs(x - y) for x, y in zip(DataBase[n][4:], Indicatrices)]for n in range(2)]
sum_list
43/42: Indicatrices[2]
43/43: Indicatrices[0]
43/44:
sum_list = [[abs(x - y) for x, y in zip(DataBase[n][4:], Indicatrices)]for n in range(2)]
sum_list
43/45: DataBase[0][4] - Indicatrices[0]
43/46:
sum_list = [[abs(x - y) for x, y in zip(DataBase[n][4:], Indicatrices)]for n in range(100)]
sum_list
43/47:
sum_list = [sum([abs(x - y) for x, y in zip(DataBase[n][4:], Indicatrices)])for n in range(100)]
distance = sum(list(map()))
min(sum_list)
43/48:
sum_list = [sum([abs(x - y) for x, y in zip(DataBase[n][4:], Indicatrices)])for n in range(100)]

min(sum_list)
43/49:
sum_list = [sum([abs(x - y) for x, y in zip(DataBase[n][4:], Indicatrices)])for n in range(100)]

sum_list
43/50:
sum_list = [sum([abs(x - y) for x, y in zip(DataBase[n][4:], Indicatrices)])for n in range(100)]

len(sum_list)
43/51:
sum_list = [[abs(x - y) for x, y in zip(DataBase[n][4:], Indicatrices)]for n in range(100)]
distance = sum()list()
min(sum_list)
43/52:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices)]) for n in range(100)]
distance
43/53:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][3:], Indicatrices)]) for n in range(100)]
distance
43/54:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices)]) for n in range(100)]
distance
43/55: DataBase
43/56: DataBase[0][4]
43/57: DataBase[0][4:]
43/58: DataBase[0][100]
43/59: DataBase[0][99]
43/60: DataBase[0][85]
43/61: DataBase[0][84]
43/62: DataBase[0][83]
43/63: Indicatrices[84]
43/64: Indicatrices
43/65:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(Indicatrices)
Indicatrices = list(map(float, Indicatrices))
43/66:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(Indicatrices)
43/67:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices
43/68:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

SIndicatrices
43/69:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices
43/70:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(DataBase)
43/71:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n])]) for n in range(100)]
distance
43/72: Indicatrices
43/73:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n])]) for n in range(100)]
distance
43/74:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
distance
43/75:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
min(distance)
43/76:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
argmin(distance)
43/77:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
min(distance)
43/78:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
max(distance)
43/79:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
min(distance)
43/80:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
distance
43/81:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
index(22722406.94179109, distance)
43/82:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[n][0:])]) for n in range(100)]
distance.index(22722406.94179109)
43/83:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
distance.index(22722406.94179109)
43/84: distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
43/85:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
distance
43/86:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
min(distance)
43/87:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[7][0:])]) for n in range(25133)]
min(distance)
43/88:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
min(distance)
43/89:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25134)]
min(distance)
43/90:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
min(distance)
43/91:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
distance.index(min(distance))
43/92:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
distance.index(min(distance))
len(distance)
43/93:
distance = [sum([(x - y)**2 for x, y in zip(DataBase[n][4:], Indicatrices[0][0:])]) for n in range(25133)]
distance.index(min(distance))
distance
44/1: Indicatrices
44/2:
import numpy as np
import re
44/3:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
44/4:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(DataBase)
44/5: Indicatrices
44/6:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
44/7:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_double(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = double(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(DataBase)
44/8:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(DataBase)
44/9: Indicatrices
44/10: help("lambda")
44/11:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def neighbour_1_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrice):
    similarity_list = []
    for row in database:
        similarity_list.append(neighbour_1_metric(indicatrice, row)
44/12:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def neighbour_1_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrice):
    similarity_list = []
    for row in database:
        similarity_list.append(neighbour_1_metric(indicatrice, row))
    return similarity_list
44/13: database_search(Indicatrices[4:], DataBase)
44/14: database_search(DataBase[4:], Indicatrices)
44/15:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def neighbour_1_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices):
    similarity_list = [[]]
    for indicatrice in indicatrices:
            similarity_list.append([neighbour_1_metric(line, indicatrice) for line in database])
    return similarity_list
44/16: database_search(DataBase[4:], Indicatrices)
44/17: DataBase
44/18: database_search(DataBase[][4:], Indicatrices)
44/19: database_search(DataBase, Indicatrices, 4)
44/20:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def neighbour_1_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    for indicatrice in indicatrices:
            similarity_list.append([neighbour_1_metric(line, indicatrice) for line[origin:] in database])
    return similarity_list
44/21: database_search(DataBase, Indicatrices, 4)
44/22:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def neighbour_1_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    for indicatrice in indicatrices:
            similarity_list.append([neighbour_1_metric(line[origin:], indicatrice) for line in database])
    return similarity_list
44/23: database_search(DataBase, Indicatrices, 4)
44/24: database_search(DataBase, Indicatrices, 4)[:10]
44/25: database_search(DataBase, Indicatrices, 4)[:1]
44/26:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    for indicatrice in indicatrices:
            similarity_list.append([l2_metric(line[origin:], indicatrice) for line in database])
    return similarity_list
44/27: neighbour_1_metric([1, 2, 3], [1, 2, 3])
44/28: neighbour_1_metric([1, 5, 3], [1, 2, 4])
44/29:
database = [[1, 2, 3], [2, 3, 4]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind)
44/30:
database = [[1, 2, 3], [2, 3, 4]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
44/31:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
44/32:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)
44/33:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    for indicatrice in indicatrices:
            similarity_list.extend([l2_metric(line[origin:], indicatrice) for line in database])
    return similarity_list
44/34:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, )
44/35:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
44/36:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    for indicatrice in indicatrices:
            similarity_list.append([l2_metric(line[origin:], indicatrice) for line in database])
    return similarity_list
44/37:
a = [1]
a.append(2)
44/38:
a = [1]
a
a.append(2)
44/39:
a = [1]

a.append(2)
a
44/40:
a = []

a.append(2)
a
44/41:
a = [[]]

a.append([2])
a
44/42:
a = [[]]
a.pop(0)
a.append([2])
a
44/43:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    for indicatrice in indicatrices:
            similarity_list.append([l2_metric(line[origin:], indicatrice) for line in database])
    return similarity_list
44/44:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
44/45:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    for indicatrice in indicatrices:
            similarity_list.append([l2_metric(line[origin:], indicatrice) for line in database])
    return similarity_list
44/46:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    for indicatrice in indicatrices:
            similarity_list.append([l2_metric(line[origin:], indicatrice) for line in database])
    return similarity_list
44/47:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
44/48:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
44/49: database_search(DataBase, Indicatrices, 4)[1:]
44/50:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)
44/51:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    try for indicatrice in indicatrices:
            similarity_list.append([l2_metric(line[origin:], indicatrice) for line in database])
    except len(indicatrices[0]) == len(database[0])
    return similarity_list
44/52:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    try:
        for indicatrice in indicatrices:
            similarity_list.append([l2_metric(line[origin:], indicatrice) for line in database])
    except:
        len(indicatrices[0]) == len(database[0])
    return similarity_list
44/53:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)
44/54: database_search(DataBase, Indicatrices, 4)
44/55:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sort([l2_metric(line[origin:], indicatrice) for line in database]))
    except:
        len(indicatrices[0]) == len(database[0])
    return similarity_list
44/56:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)
44/57:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)
44/58:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
44/59:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database]))
    except:
        len(indicatrices[0]) == len(database[0])
    return similarity_list
44/60:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
44/61: database_search(DataBase, Indicatrices, 4)
44/62:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    except:
        len(indicatrices[0]) == len(database[0])
    return similarity_list
44/63: database_search(DataBase, Indicatrices, 4)
45/1:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    except:
        len(indicatrices[0]) != len(database[0][origin:])
    return similarity_list
45/2: database_search(DataBase, Indicatrices, 4)
45/3:
import numpy as np
import re
45/4:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
45/5:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(DataBase)
45/6: DataBase
45/7:
a = [[]]
a.pop(0)
a.append([2])
a
45/8:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    except:
        len(indicatrices[0]) != len(database[0][origin:])
    return similarity_list
45/9: database_search(DataBase, Indicatrices, 4)
45/10: database_search(DataBase, Indicatrices, 3)
45/11:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    except:
        len(indicatrices[0]) != len(database[0][origin:])
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
45/12:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    except:
        len(indicatrices[0]) != len(database[0][origin:])
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
45/13:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    except:
        len(indicatrices[0]) != len(database[0][origin:])
    return similarity_list
45/14: database_search(DataBase, Indicatrices, 3)
46/1:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
46/2:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    
    try:
        for indicatrice in indicatrices:
            similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    except:
        len(indicatrices[0]) != len(database[0][origin:])
    return similarity_list
46/3:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
46/4:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)
46/5:
a = [[1], [2]]
a[][1:]
46/6:
a = [[1], [2]]
a[1][1:]
46/7:
a = [[1], [2]]
a[1][0:]
46/8:
a = [[1], [2]]
a[1][:0]
46/9:
a = [[1], [2], [3]]
a[1][:0]
46/10:
a = [[1, 2], [2], [3]]
a[0][:1]
46/11:
a = [[1, 2], [2], [3]]
a[0][:0]
46/12:
a = [[1, 2], [2], [3]]
a[0][0:]
46/13:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)

len(ind[0]) != len(database[0][1:])
46/14:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)

len(ind[0]) != len(database[0][0:])
46/15:
try:
     k = 1 / 0
except ZeroDivisionError:
     k = 0
print(k)
47/1:
def f(a):
    try:
         k = 1 / a
    except (a==0)
         
    return k
47/2:
def f(a):
    try:
         k = 1 / a
    except: (a==0)
         
    return k
47/3:
def f(a):
    try:
         k = 1 / a
    except: (a==0)
         
    return k
f(0)
47/4:
def f(a):
    try:
         k = 1 / a
    return k
    except: (a==0)
         
    
f(0)
47/5:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    if(len(indicatrices[0]) != len(database[0][origin:])):
        raise Exception("wrong size")

    for indicatrice in indicatrices:
        similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
47/6:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)

len(ind[0]) != len(database[0][0:])
47/7:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
47/8: database_search(DataBase, Indicatrices, 4)
47/9:
import numpy as np
import re
47/10:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
47/11:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(DataBase)
47/12: DataBase
47/13:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    if(len(indicatrices[0]) != len(database[0][origin:])):
        raise Exception("wrong size")

    for indicatrice in indicatrices:
        similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
47/14:
a = [[1, 2], [2], [3]]
a[0][0:]
47/15: database_search(DataBase, Indicatrices, 4)
47/16:
a = [[1, 2], [2], [3]]
a[0][0:]
47/17:
a = [[1, 2], [2], [3]]
a[0][1:]
47/18:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 0)
47/19:
database = [[1, 2, 3], [1, 2, 7]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)
47/20: database_search(DataBase, Indicatrices, 3)
47/21: database_search(DataBase, Indicatrices, 4)
47/22: database_search(DataBase, Indicatrices, 5)
47/23:
database = [[1, 2, 3, 4], [1, 2, 7, 4]]
ind = [[1, 2, 3], [1, 2, 7]]
database_search(database, ind, 1)
47/24:
database = [[1, 2, 3, 4], [1, 2, 7, 4]]
ind = [[2, 3, 4], [1, 2, 7]]
database_search(database, ind, 1)
47/25:
database = [[1, 2, 3, 4], [1, 2, 7, 4]]
ind = [[2, 3, 4], [1, 2, 7]]
database_search(database, ind, 0)
47/26:
database = [[1, 2, 3, 4], [1, 2, 7, 4]]
ind = [[2, 3, 4], [1, 2, 7]]
database_search(database, ind, 2)
47/27:
database = [[1, 2, 3, 4], [1, 2, 7, 4]]
ind = [[2, 3, 4], [1, 2, 7]]
database_search(database, ind, 1)
47/28: database_search(DataBase, Indicatrices, 4)
47/29: len(Indicatrices[0]) != len(DataBase[0][4:]
47/30: len(Indicatrices[0]) != len(DataBase[0][4:])
47/31: len(Indicatrices[0])
47/32: len(DataBase[0][4:])
47/33: len(Indicatrices[0])
47/34: len(Indicatrices[0])
47/35: Indicatrices[0]
47/36:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(SIndicatrices)
47/37: Indicatrices[0]
47/38:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(Indicatrices)
47/39: Indicatrices[0]
47/40:
a = [[]]
a.pop(0)
a.append([2])
a
47/41:
def f(a):
    try:
         k = 1 / a
    return k
    except: (a==0)
         
    
f(0)
47/42:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    if(len(indicatrices[0]) != len(database[0][origin:])):
        raise Exception("wrong size")

    for indicatrice in indicatrices:
        similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
47/43: len(Indicatrices[0])
47/44: database_search(DataBase, Indicatrices, 4)
47/45: database_search(DataBase, Indicatrices, 4)[0]
47/46: database_search(DataBase, Indicatrices, 4)
47/47:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    if(len(indicatrices[0]) != len(database[0][origin:])):
        raise Exception("wrong size")

    for indicatrice in indicatrices:
        similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
48/1:
import matplotlib.pyplot as plt
import math

primes = []
n = 2

# Находим ста первых простых чисел
while len(primes) < 100:
    if all(n % p != 0 for p in primes):
        primes.append(n)
    n += 1

# Получаем первые цифры каждого простого числа
first_digits = [int(str(p)[0]) for p in primes]

# Строим гистограмму
plt.hist(first_digits, bins=9, range=(1, 10), align='left', rwidth=0.8)
plt.title('Распределение первых цифр ста первых простых чисел')
plt.xlabel('Первая цифра')
plt.ylabel('Частота')
plt.show()
48/2:
import matplotlib.pyplot as plt
import math

primes = []
n = 2

# Находим ста первых простых чисел
while len(primes) < 1000:
    if all(n % p != 0 for p in primes):
        primes.append(n)
    n += 1

# Получаем первые цифры каждого простого числа
first_digits = [int(str(p)[0]) for p in primes]

# Строим гистограмму
plt.hist(first_digits, bins=9, range=(1, 10), align='left', rwidth=0.8)
plt.title('Распределение первых цифр ста первых простых чисел')
plt.xlabel('Первая цифра')
plt.ylabel('Частота')
plt.show()
48/3:
import re
import numpy as np

def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    vowels_count = [count_vowels(word) for word in words]  # считаем количество гласных в каждом слове

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation

# Пример использования
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print("Корреляция частот встречаемости гласных в соседних словах:", result)
48/4:
import re
import numpy as np

def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    vowels_count = [count_vowels(word) for word in words]  # считаем количество гласных в каждом слове

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation
48/5:
import re
import numpy as np

def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    vowels_count = [count_vowels(word) for word in words]  # считаем количество гласных в каждом слове

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
48/6:
import re
import numpy as np

def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    vowels_count = [count_vowels(word) for word in words]  # считаем количество гласных в каждом слове

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/7:
import re
import numpy as np

def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

 

    return words
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/8:
import re
import numpy as np

def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

 

    return words
text = "Этот текст содержит какие-то слова со множеством гласны!!!!х. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/9:
import re
import numpy as np

def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

 

    return words
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/10:
import re
import numpy as np

def count_vowels(word):
    vowels = 'aeiou'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

count_vowels('этот')
def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/11:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

count_vowels('этот')
def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/12:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

count_vowels('этот')
№def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/13:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

count_vowels('этот')
№def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/14:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

count_vowels('этот')
#def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/15:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

count_vowels('этот')
"""def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation"""
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
result = compute_correlation(text)
print(result)
48/16:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

count_vowels('этот')
"""def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation"""
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
#result = compute_correlation(text)
print(result)
48/17:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

print(count_vowels('этот'))
"""def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation"""
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
#result = compute_correlation(text)
print(result)
48/18:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

print(count_vowels('этюют'))
"""def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation"""
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
#result = compute_correlation(text)
print(result)
48/19:
import re
import numpy as np

def count_vowels(word):
    vowels = 'аяоёуюыиэе'
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count

print(count_vowels('этюютянэля'))
"""def compute_correlation(text):
    words = re.findall(r'\b\w+\b', text.lower())  # находим все слова в тексте
    

    # вычисляем корреляцию
    correlation = np.corrcoef(vowels_count[:-1], vowels_count[1:])[0, 1]

    return correlation"""
text = "Этот текст содержит какие-то слова со множеством гласных. Надеюсь, он подойдет для вычисления корреляции."
#result = compute_correlation(text)
print(result)
48/20:
def find_vowel_pairs_frequency(word_list):
    vowels = 'aeiouAEIOU'
    frequency = {}
    for i in range(len(word_list) - 1):
        word1 = word_list[i]
        word2 = word_list[i + 1]
        vowel_pairs = [(v1, v2) for v1 in word1 if v1 in vowels for v2 in word2 if v2 in vowels]
        for pair in vowel_pairs:
            if pair in frequency:
                frequency[pair] += 1
            else:
                frequency[pair] = 1
    return frequency

word_list = ["apple", "orange", "elephant", "igloo"]
result = find_vowel_pairs_frequency(word_list)
print(result)
48/21:
import re
from collections import Counter

def find_vowel_pairs_frequency(words):
    vowels = "aeiou"
    result = Counter()
    
    for i in range(len(words) - 1):
        word1 = re.findall(r'[aeiou]', words[i].lower())  # находим все гласные в первом слове
        word2 = re.findall(r'[aeiou]', words[i+1].lower())  # находим все гласные во втором слове
        
        unique_vowels = set(word1 + word2)  # объединяем гласные двух слов и оставляем только уникальные
        
        for vowel in unique_vowels:
            result[vowel] += 1  # увеличиваем счетчик для данной гласной
        
    return result

# Пример использования
word_list = ["apple", "orange", "elephant", "iguana"]
frequency = find_vowel_pairs_frequency(word_list)
print(frequency)
48/22:
import re
from collections import Counter

def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

def find_vowel_pairs_frequency(words):
    vowels = "aeiou"
    remove_duplicate_vowels(words)
    result = Counter()
    
    for i in range(len(words) - 1):
        word1 = re.findall(r'[aeiou]', words[i].lower())  # находим все гласные в первом слове
        word2 = re.findall(r'[aeiou]', words[i+1].lower())  # находим все гласные во втором слове
        
        unique_vowels = set(word1 + word2)  # объединяем гласные двух слов и оставляем только уникальные
        
        for vowel in unique_vowels:
            result[vowel] += 1  # увеличиваем счетчик для данной гласной
        
    return result

# Пример использования
word_list = ["apple", "orange", "elephant", "iguana"]
frequency = find_vowel_pairs_frequency(word_list)
print(frequency)
48/23:
import re
from collections import Counter

def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

def find_vowel_pairs_frequency(words):
    vowels = "aeiou"
    for word in words:
        remove_duplicate_vowels(word)
    result = Counter()
    
    for i in range(len(words) - 1):
        word1 = re.findall(r'[aeiou]', words[i].lower())  # находим все гласные в первом слове
        word2 = re.findall(r'[aeiou]', words[i+1].lower())  # находим все гласные во втором слове
        
        unique_vowels = set(word1 + word2)  # объединяем гласные двух слов и оставляем только уникальные
        
        for vowel in unique_vowels:
            result[vowel] += 1  # увеличиваем счетчик для данной гласной
        
    return result

# Пример использования
word_list = ["apple", "orange", "elephant", "iguana"]
frequency = find_vowel_pairs_frequency(word_list)
print(frequency)
48/24:
def find_vowel_pairs_frequency(word_list):
    vowels = 'аяоёуюыиэе'
    frequency = {}
    for word in word_list:
        remove_duplicate_vowels(word)
    for i in range(len(word_list) - 1):
        word1 = word_list[i]
        word2 = word_list[i + 1]
        vowel_pairs = [(v1, v2) for v1 in word1 if v1 in vowels for v2 in word2 if v2 in vowels]
        for pair in vowel_pairs:
            if pair in frequency:
                frequency[pair] += 1
            else:
                frequency[pair] = 1
    return frequency

word_list = ["apple", "orange", "elephant", "igloo"]
result = find_vowel_pairs_frequency(word_list)
print(result)
48/25:
def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

def find_vowel_pairs_frequency(word_list):
    vowels = 'аяоёуюыиэе'
    frequency = {}
    for word in word_list:
        remove_duplicate_vowels(word)
    for i in range(len(word_list) - 1):
        word1 = word_list[i]
        word2 = word_list[i + 1]
        vowel_pairs = [(v1, v2) for v1 in word1 if v1 in vowels for v2 in word2 if v2 in vowels]
        for pair in vowel_pairs:
            if pair in frequency:
                frequency[pair] += 1
            else:
                frequency[pair] = 1
    return frequency

word_list = ["apple", "orange", "elephant", "igloo"]
result = find_vowel_pairs_frequency(word_list)
print(result)
48/26:
def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

def find_vowel_pairs_frequency(word_list):
    vowels = 'аяоёуюыиэе'
    frequency = {}
    for word in word_list:
        remove_duplicate_vowels(word)
    for i in range(len(word_list) - 1):
        word1 = word_list[i]
        word2 = word_list[i + 1]
        vowel_pairs = [(v1, v2) for v1 in word1 if v1 in vowels for v2 in word2 if v2 in vowels]
        for pair in vowel_pairs:
            if pair in frequency:
                frequency[pair] += 1
            else:
                frequency[pair] = 1
    return frequency

word_list = ["apple", "orange", "elephant", "igloo"]
for word in word_list:
    remove_duplicate_vowels(word)
print(word_list)
48/27:
def remove_duplicate_vowels(s):
    vowels = "аяоёуюыиэе"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

def find_vowel_pairs_frequency(word_list):
    vowels = 'аяоёуюыиэе'
    frequency = {}
    for word in word_list:
        remove_duplicate_vowels(word)
    for i in range(len(word_list) - 1):
        word1 = word_list[i]
        word2 = word_list[i + 1]
        vowel_pairs = [(v1, v2) for v1 in word1 if v1 in vowels for v2 in word2 if v2 in vowels]
        for pair in vowel_pairs:
            if pair in frequency:
                frequency[pair] += 1
            else:
                frequency[pair] = 1
    return frequency

word_list = ["apple", "orange", "elephant", "igloo"]
for word in word_list:
    remove_duplicate_vowels(word)
print(word_list)
48/28:
def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

def find_vowel_pairs_frequency(word_list):
    vowels = 'aeiouAEIOU'
    frequency = {}
    for word in word_list:
        remove_duplicate_vowels(word)
    for i in range(len(word_list) - 1):
        word1 = word_list[i]
        word2 = word_list[i + 1]
        vowel_pairs = [(v1, v2) for v1 in word1 if v1 in vowels for v2 in word2 if v2 in vowels]
        for pair in vowel_pairs:
            if pair in frequency:
                frequency[pair] += 1
            else:
                frequency[pair] = 1
    return frequency

word_list = ["apple", "orange", "elephant", "igloo"]
for word in word_list:
    remove_duplicate_vowels(word)
print(word)
48/29:
def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

def find_vowel_pairs_frequency(word_list):
    vowels = 'aeiouAEIOU'
    frequency = {}
    for word in word_list:
        remove_duplicate_vowels(word)
    for i in range(len(word_list) - 1):
        word1 = word_list[i]
        word2 = word_list[i + 1]
        vowel_pairs = [(v1, v2) for v1 in word1 if v1 in vowels for v2 in word2 if v2 in vowels]
        for pair in vowel_pairs:
            if pair in frequency:
                frequency[pair] += 1
            else:
                frequency[pair] = 1
    return frequency

word_list = ["apple", "orange", "elephant", "igloo"]
for word in word_list:
    remove_duplicate_vowels(word)
print(word_list)
48/30:
def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

def find_vowel_pairs_frequency(word_list):
    vowels = 'aeiouAEIOU'
    frequency = {}
    for word in word_list:
        remove_duplicate_vowels(word)
    for i in range(len(word_list) - 1):
        word1 = word_list[i]
        word2 = word_list[i + 1]
        vowel_pairs = [(v1, v2) for v1 in word1 if v1 in vowels for v2 in word2 if v2 in vowels]
        for pair in vowel_pairs:
            if pair in frequency:
                frequency[pair] += 1
            else:
                frequency[pair] = 1
    return frequency

word_list = ["apple", "orange", "elephant", "igloo"]
input_string = "Hello, how are you?"
output_string = remove_duplicate_vowels(input_string)
print(output_string)
48/31:
def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

# Пример использования
input_string = "Hello, how are you?"
output_string = remove_duplicate_vowels(input_string)
print(output_string)
# Вывод: "Helo, how are you?"
48/32:
def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

# Пример использования
input_string = "Hello, how are you?"
output_string = remove_duplicate_vowels(input_string)
print(output_string)
# Вывод: "Helo, how are you?"
48/33:
def remove_duplicate_vowels(s):
    vowels = "aeiouAEIOU"
    result = []
    for word in s.split():
        new_word = ""
        for i in range(len(word)):
            if word[i] in vowels and (i == 0 or word[i] != word[i-1].lower()):
                new_word += word[i]
        result.append(new_word)
    return " ".join(result)

# Пример использования
input_string = "Hello, how are you?"
output_string = remove_duplicate_vowels(input_string)
print(output_string)
# Вывод: "Helo, how are you?"
49/1:
import numpy as np
import re
49/2:
FDataBase = open("DataBase.txt", "r")
FIndicatrices = open("ExperimentalIndicatrices.txt", "r")
FParams = open("ExperimentalParams.txt", "r")
SDataBase = FDataBase.read()
SIndicatrices = FIndicatrices.read()
SParams = FParams.read()
49/3:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(Indicatrices)
49/4: Indicatrices[0]
49/5:
a = [[]]
a.pop(0)
a.append([2])
a
49/6:
def f(a):
    try:
         k = 1 / a
    return k
    except: (a==0)
         
    
f(0)
49/7:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    if(len(indicatrices[0]) != len(database[0][origin:])):
        raise Exception("wrong size")

    for indicatrice in indicatrices:
        similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
                               
sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
49/8:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    if(len(indicatrices[0]) != len(database[0][origin:])):
        raise Exception("wrong size")

    for indicatrice in indicatrices:
        similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
                               
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
49/9: len(Indicatrices[0])
49/10:
database = [[1, 2, 3, 4], [1, 2, 7, 4]]
ind = [[2, 3, 4], [1, 2, 7]]
database_search(database, ind, 1)
49/11:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]
49/12: help("lambda")
49/13: enumerate(["sa", "dad"])
49/14: print(enumerate(["sa", "dad"]))
49/15: list(enumerate(["sa", "dad"]))
49/16: {enumerate(["sa", "dad"])}
49/17:
a = {enumerate(["sa", "dad"])}
print(a)
49/18:
gen = (x for x in range(3))
for i in gen:
    print(i)
49/19:
for i in gen:
    print(i)
49/20:
gen = (x for x in range(3))
for i in gen:
    print(i)
49/21:
for i in gen:
    print(i)
49/22: gen = (x for x in range(3))
49/23:
for i in gen:
    print(i)
50/1:
print({"x": x for ix in range(4)})
    print(i)
50/2:
print({x: x for ix in range(4)})
    print(i)
50/3:
print({x: "x" for ix in range(4)})
    print(i)
50/4:
print({x: str(x) for ix in range(4)})
    print(i)
50/5:
print({x: str(x) for x in range(4)})
    print(i)
50/6:
print({str(x): x for x in range(4)})
    print(i)
50/7: print({str(x): x for x in range(4)})
50/8:
dict = {str(x): x for x in range(4)}
dict.get('0')
50/9:
dict = {str(x): x for x in range(4)}
dict.get('8')
50/10:
dict = {str(x): x for x in range(4)}
dict.get('8')
50/11: %who
50/12: %who
50/13:
a = {enumerate(["sa", "dad"])}
print(a)
50/14:
a = {enumerate(["sa", "dad"])}
print(a)
%who
50/15: %ls_magic
50/16: %lsmagic
50/17: %hist
50/18: %env
50/19: sin?
50/20:
import math
sin?
50/21:
import math
math.sin?
50/22:

math.sin?
50/23: math.sin?
50/24: sin?
50/25:
sin?
%%debug "2":1
50/26:
sin?
%%debug '2':1
50/27:
sin?
#%%debug '2':1
50/28:
sin?
%%debug '2':1
50/29:
sin?
%debug '2':1
50/30:
sin?
%debug '2':2
50/31:
a = 1
sin?
%debug '2':2
50/32:
a = 1
sin?
%debug '2':1
50/33:
a = 1
sin?
%pdb
50/34:
a = 1
sin?
%pdb
50/35:
a = 1
sin?
%pdb
50/36:
a = 1
sin?
50/37:
a = 1
sin?
%pdb
50/38:
a = 1
sin?
50/39:
SDataBase = open("DataBase.txt", "r").read()
SIndicatrices = open("ExperimentalIndicatrices.txt", "r").read()
SParams = open("ExperimentalParams.txt", "r").read()
50/40:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(Indicatrices)
50/41:
import numpy as np
import re
50/42:
SDataBase = open("DataBase.txt", "r").read()
SIndicatrices = open("ExperimentalIndicatrices.txt", "r").read()
SParams = open("ExperimentalParams.txt", "r").read()
50/43:
def string_to_2d_list(input_string):
    # Split the input string using the division symbols '\t1' and '\t2'
    divisions = input_string.split('\n')
    result_2d_list = [division.split('\t') for division in divisions]

    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(Indicatrices)
50/44: map?
50/45:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float(), division.split('\t'))) for division in divisions]
    
    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(Indicatrices)
50/46:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(Indicatrices)
50/47: Indicatrices[0]
50/48:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
Indicatrices = convert_to_float(Indicatrices)
50/49:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    # Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
DataBase = convert_to_float(DataBase)


Params = re.split('\n|\t', SParams)
Params = list(map(float, Params))

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/50: Indicatrices
50/51: DataBase
50/52: Params
50/53:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

#def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/54: Params
50/55:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

#def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix


DataBase = string_to_2d_list(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/56: Params
50/57: DataBase
50/58:
def array_norm(array):
    return sum(list(map(lambda x: x**2, array)))
    
def l2_metric(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    if(len(indicatrices[0]) != len(database[0][origin:])):
        raise Exception("wrong size")

    for indicatrice in indicatrices:
        similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/59: database_search(DataBase, Indicatrices, 4)
50/60:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list


   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_2d_list(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/61: DataBase
50/62:

def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
50/63:
a = 1
sin?
50/64:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, origin):
    similarity_list = [[]]
    similarity_list.pop(0)
    if(len(indicatrices[0]) != len(database[0][origin:])):
        raise Exception("wrong size")

    for indicatrice in indicatrices:
        similarity_list.append(sorted([l2_metric(line[origin:], indicatrice) for line in database])[:10])
    
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/65: dict()?
50/66: ?dict()
50/67: dict(range(3))
50/68: dict(1, 2, 3)
50/69: a = dict(one=1, two=2, three=3)
50/70: [range(3)]
50/71: print([range(3)])
50/72:
a = [1, 2, 3]
a[:2]
50/73:
a = [1, 2, 3]
a[:2]+a[2:]
50/74:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_2d_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {ind[:4]: ind[4:] for ind in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_2d_list(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/75:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_2d_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {ind[:4]: ind[4:] for ind in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/76:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {ind[:4]: ind[4:] for ind in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/77:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {ind[:4]: ind[4:] for ind in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_dict
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/78: {1:2}
50/79: {[1]: 2}
50/80: {1: 2}
50/81:
a = list(range(5))
{1: 2}
50/82:
a = list(range(5))
print({a:b for a, b in enumerate(a)})
50/83:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {number: line for number, line in enumerate(result_2d_list)}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_dict
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/84: DataBase
50/85:
a = list(range(5))
print({a:b for a, b in enumerate(a)})
0 in a
50/86:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
0 in a
50/87:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
6 in a
50/88:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
4: 6 in a
50/89:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
50/90:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
(0, 2) in a
50/91:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
(2, 0) in a
50/92:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
6 in a
50/93:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
4 in a
50/94:
a = list(range(5))
print({a:b^2 for a, b in enumerate(a)})
a.get(4)
50/95:
a = list(range(5))
c = {a:b^2 for a, b in enumerate(a)}
c.get(4)
50/96:
a = list(range(5))
c = {a:b^2 for a, b in enumerate(a)}
sorted(c)
50/97:
a = list(range(5))
c = {a:b^2 for a, b in enumerate(a)}
dict(sorted(c))
50/98:
a = list(range(5))
c = {(a, b):b^2 for a, b in enumerate(a)}
dict(sorted(c))
50/99:
a = list(range(5))
c = {(a, b):b^2 for a, b in enumerate(a)}
50/100:
a = list(range(5))
c = {(a, b):b^2 for a, b in enumerate(a)}
c
50/101:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {tuple(number[:4]): number[4:] line for line in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_dict
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/102:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {tuple(line[:4]): line[4:] line for line in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_dict
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/103:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {tuple(line[:4]): line[4:] for line in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_dict
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
50/104: DataBase
50/105:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict, key = dict.)
    
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/106: ?lambda
50/107: help(lambda)
50/108: help("lambda")
50/109:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict, key = lambda x: x[1])[10]
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/110:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict, key = lambda x: x[1]))[10]
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/111: database_search(DataBase, Indicatrices, 4)
50/112: database_search(DataBase, Indicatrices)
50/113:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict, key = lambda x: x[1])[10:])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/114: database_search(DataBase, Indicatrices)
50/115:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict, key = lambda x: x[1])[:10])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/116: database_search(DataBase, Indicatrices)
50/117:
a = list(range(5))
c = {(a, b):b^2 for a, b in enumerate(a)}
sorted(c)
50/118:
a = list(range(5))
c = {(a, b):b^2 for a, b in enumerate(a)}
{it: c.get(it) for it in sorted(c)}
50/119:
a = list(range(5))
c = {(a, b):b^2 for a, b in enumerate(a)}
c
{it: c.get(it) for it in sorted(c)}
50/120:
a = list(range(5))
c = {(a, b):b^2 for a, b in enumerate(a)}
#c
{it: c.get(it) for it in sorted(c)}
50/121:
a = list(range(5))
c = {(a, b):b^2 for a, b in enumerate(a)}

{it: c.get(it) for it in sorted(c)}
50/122:
a = list(range(5))
c = {(a, b):-b^2 for a, b in enumerate(a)}

{it: c.get(it) for it in sorted(c)}
50/123:
a = list(range(5))
c = {(a, -b):-b^2 for a, b in enumerate(a)}

{it: c.get(it) for it in sorted(c)}
50/124:
dict = {params: l2_metric(database.get(params), Indicatrices[1]) for params in database}
print(dict)
50/125:
dict = {params: l2_metric(database.get(params), Indicatrices[1]) for params in DataBase}
print(dict)
50/126:
dict = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
print(dict)
50/127:
dict = {params: l2_metric(DataBase.get(params), Indicatrices[2]) for params in DataBase}
print(dict)
50/128:
dict = {params: l2_metric(DataBase.get(params), Indicatrices[2]) for params in DataBase}
Indicatrices[1] == Indicatrices[2]
50/129:
dict = {params: l2_metric(DataBase.get(params), Indicatrices[2]) for params in DataBase}
print(list(dict))
50/130:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict2 = {params: l2_metric(DataBase.get(params), Indicatrices[2]) for params in DataBase}
50/131:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict2 = {params: l2_metric(DataBase.get(params), Indicatrices[2]) for params in DataBase}
dict1 == dict2
50/132:
list1 = list({params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase})
list2 = list({params: l2_metric(DataBase.get(params), Indicatrices[2]) for params in DataBase})
list1[:10] == dict2[:10]
50/133:
list1 = list({params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase})
list2 = list({params: l2_metric(DataBase.get(params), Indicatrices[2]) for params in DataBase})
list1
50/134:
list1 = list({params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase})
list2 = list({params: l2_metric(DataBase.get(params), Indicatrices[2]) for params in DataBase})
list1 == list2
50/135:
list1 = list({params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase})
list2 = list({params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase})
list1 == list10
50/136:
list1 = list({params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase})
list10 = list({params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase})
list1 == list10
50/137:
list1 = list({params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase})
list10 = list({params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase})
Indicatrices[1]==Indicatrices[10]
50/138:
list1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
list10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
list1 == list10
50/139:
list1 = list({params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase})
list10 = list({params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase})
list1 == list10
50/140:
list1 = list({params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase})
list10 = list({params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase})
list1
50/141:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
list1
50/142:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
dict1
50/143:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1, lambda x: x[1])
50/144:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1, key = lambda x: x[1])
50/145:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print({dict1.get(params) for params in sorted(dict1, key = lambda x: x[1])})
50/146:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print({params: dict1.get(params) for params in sorted(dict1, key = lambda x: x[1])})
50/147:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print({params: dict1.get(params) for params in sorted(dict1, key = lambda x: x[1])})
50/148:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print({params: dict1.get(params) for params in sorted(dict1, key = lambda x: x[0])})
50/149:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print({params: dict1.get(params) for params in sorted(dict1, key = lambda x: x[2])})
50/150:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print({params: dict1.get(params) for params in sorted(dict1, key = lambda x: x[3])})
50/151:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print({params for params in sorted(dict1.items, key = lambda x: x[1])})
50/152:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print({params for params in sorted(dict1.items(), key = lambda x: x[1])})
50/153:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
print(sorted(dict1.items(), key = lambda x: x[1]))
50/154:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1.items(), key = lambda x: x[1])[10:]
50/155:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1.items(), key = lambda x: x[1])[:10]
50/156:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict1.items(), key = lambda x: x[1])[:10])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/157: database_search(DataBase, Indicatrices)
50/158: database_search(DataBase, Indicatrices, 10)
50/159: database_search(DataBase, Indicatrices, 10)
50/160:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
50/161: database_search(DataBase, Indicatrices, 10)
52/1:
import numpy as np
import re
52/2:
SDataBase = open("DataBase.txt", "r").read()
SIndicatrices = open("ExperimentalIndicatrices.txt", "r").read()
SParams = open("ExperimentalParams.txt", "r").read()
52/3:
a = list(range(5))
c = {(a, -b):-b^2 for a, b in enumerate(a)}

{it: c.get(it) for it in sorted(c)}
52/4:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {tuple(line[:4]): line[4:] for line in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_dict
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
52/5: DataBase
52/6:

def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
52/7:
a = 1
sin?
52/8:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
52/9:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1.items(), key = lambda x: x[1])[:10]
52/10: gen = (x for x in range(3))
52/11:
dict = {str(x): x for x in range(4)}
dict.get('8')
52/12:
a = {enumerate(["sa", "dad"])}
print(a)
%who
52/13: database_search(DataBase, Indicatrices, 2)
52/14:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metric(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
52/15:
dict1 = {params: l2_metric(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metric(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1.items(), key = lambda x: x[1])[:10]
52/16:
dict1 = {params: l2_metrics(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metrics(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1.items(), key = lambda x: x[1])[:10]
52/17: gen = (x for x in range(3))
52/18:
dict = {str(x): x for x in range(4)}
dict.get('8')
52/19:
a = {enumerate(["sa", "dad"])}
print(a)
%who
52/20: database_search(DataBase, Indicatrices, 2)
52/21:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l2_metrics(array_1, array_2):
     return sum([(item_1 - item_2)**2 for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l2_metrics(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
52/22:
dict1 = {params: l2_metrics(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l2_metrics(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1.items(), key = lambda x: x[1])[:10]
52/23: gen = (x for x in range(3))
52/24:
dict = {str(x): x for x in range(4)}
dict.get('8')
52/25:
a = {enumerate(["sa", "dad"])}
print(a)
%who
52/26: database_search(DataBase, Indicatrices, 2)
52/27:
a = [(1, 2), (3, 4)]
for (c, d) in a:
    pass
52/28:
a = [(1, 2), (3, 4)]
for (c, d) in a:
    print(c=d)
52/29:
a = [(1, 2), (3, 4)]
for (c, d) in a:
    print(c+d)
52/30:
a = (1, 2, 3)
a[2]
52/31:
a = [(1, 2, 3)]
for (d, b, c) in a:
    print(d)
52/32:
a = [(1, 2, 3), (2, 3, 4)]
for (d, b, c) in a:
    print(d)
52/33:
a = [(1, 2, 3), (2, 3)]
for (d, b, c) in a:
    print(d)
52/34:
a = [(1, 2, 3)]
b = [(2, 3, 4)]
    print(zip(a, b))
52/35:
a = [1, 2, 3]
b = [2, 3, 4]
    print(zip(a, b))
52/36:
a = [1, 2, 3]
b = [2, 3, 4]
print(zip(a, b))
52/37:
a = (1, 2, 3)
b = (2, 3, 4)
print(list(zip(a, b)))
52/38:
a = (1, 2, 3)
b = (2, 3, 4)
sum(a)
52/39:
a = (1, 2, 3)
b = (2, 3, 4)
print(list(zip(a, b)))
52/40:
estim_params=[]
for line in database_search(DataBase, Indicatrices, 2):
    par_tuple =  (x+y for (x, y) in zip (line[0][0], line[0][1])
    estim_params.append(par_tuple)
52/41:
estim_params=[]
for line in database_search(DataBase, Indicatrices, 2):
    par_tuple =  (x+y for (x, y) in zip (line[0][0], line[0][1]))
    estim_params.append(par_tuple)
52/42:

estim_params=[]
for line in database_search(DataBase, Indicatrices, 2):
    par_tuple =  ((x+y)/2 for (x, y) in zip (line[0][0], line[0][1]))
    estim_params.append(par_tuple)
estim_params
52/43:
a = (1, 2, 3)
b = (2, 3, 4)
print(sum(i^2 for i in range(4)))
52/44:
a = (1, 2, 3)
b = (2, 3, 4)
print(sum(i**2 for i in range(4)))
52/45: database_search(DataBase, Indicatrices, 2)
52/46: database_search(DataBase, Indicatrices, 10)
52/47: database_search(DataBase, Indicatrices, 1)
52/48:
import numpy as np
import re
52/49:
SDataBase = open("DataBase.txt", "r").read()
SIndicatrices = open("ExperimentalIndicatrices.txt", "r").read()
SParams = open("ExperimentalParams.txt", "r").read()
52/50:
a = list(range(5))
c = {(a, -b):-b^2 for a, b in enumerate(a)}

{it: c.get(it) for it in sorted(c)}
52/51:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {tuple(line[:4]): line[4:] for line in result_2d_list}
    
   
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_dict
   


"""def convert_to_float(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for element in row:
            try:
                converted_element = float(element)
                converted_row.append(converted_element)
            except ValueError:
                print(f"Unable to convert '{element}' to float.")
        converted_matrix.append(converted_row)
    return converted_matrix"""


DataBase = string_to_dict(SDataBase)
#DataBase = convert_to_float(DataBase)


#Params = re.split('\n|\t', SParams)
#Params = list(map(float, Params))
Params = string_to_2d_list(SParams)

Indicatrices = string_to_2d_list(SIndicatrices)
#Indicatrices = convert_to_float(Indicatrices)
52/52: DataBase
52/53:

def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
52/54:
a = 1
sin?
52/55:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l1_metrics(array_1, array_2):
     return sum([(item_1 - item_2) for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l1_metrics(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
52/56:
dict1 = {params: l1_metrics(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l1_metrics(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1.items(), key = lambda x: x[1])[:10]
52/57: gen = (x for x in range(3))
52/58:
dict = {str(x): x for x in range(4)}
dict.get('8')
52/59:
a = {enumerate(["sa", "dad"])}
print(a)
%who
52/60: database_search(DataBase, Indicatrices, 1)
52/61: database_search(DataBase, Indicatrices, 10)
52/62:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l1_metrics(array_1, array_2):
     return sum([abs(item_1 - item_2) for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l1_metrics(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
52/63:
#def vect_norm(array):
#    return sum(list(map(lambda x: x**2, array)))
    
def l1_metrics(array_1, array_2):
     return sum([abs(item_1 - item_2) for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l1_metrics(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
52/64:
dict1 = {params: l1_metrics(DataBase.get(params), Indicatrices[1]) for params in DataBase}
dict10 = {params: l1_metrics(DataBase.get(params), Indicatrices[10]) for params in DataBase}
sorted(dict1.items(), key = lambda x: x[1])[:10]
52/65: gen = (x for x in range(3))
52/66:
dict = {str(x): x for x in range(4)}
dict.get('8')
52/67:
a = {enumerate(["sa", "dad"])}
print(a)
%who
52/68: database_search(DataBase, Indicatrices, 10)
52/69:
import numpy as np
import mathplotlib as plt
52/70:
import numpy as np
import plotlib as plt
52/71:
import numpy as np
import math.plotlib as plt
52/72:
import numpy as np
import mathplot/lib as plt
52/73:
import numpy as np
import matplotlib as plt
53/1: #
53/2:
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
53/3:
def near_neighbour(x, y, x0):
    dist = abs((x - x0))
    return y[np.argmin(dist)]

# Метод ближайшего соседа
53/4:
def polynomial(x, y, x0):
    n = len(x)
    vand = np.empty((n, n))
    for i in range(n):
        for j in range(n):
            vand[i][j] = x[i]**j 
    Coef = np.linalg.solve(vand, y)
    Power = [x0**i for i in range (n)]
    return Coef.T @ np.array(Power)
53/5:
def two_neighbours(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    return (y[ind[0]]+y[ind[1]])/2
53/6:
def linear(x, y, x0):
    dist = abs(x - t)
    ind = np.argsort(dist)
    i, j = ind[0], ind[1]
    return y[i] + (x0-x[i])*(y[i]-y[j])/(x[i]-x[j])
53/7:
def lag_pol(x, y, x0):
    n = len(x)
    A = np.ones((n,))
    for i in range(n):
        for j in range(n):
            if (i != j):
                A[i] *= (x0-x[j])/(x[i]-x[j])
    return A.T @ y
53/8:
def derivative1(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    return (y[i]-y[j])/(x[i]-x[j])
53/9:
def derivative2(x, y, x0):
    dist = abs(x - x0)
    ind = np.argsort(dist)
    ind2 = ind[:1].sort()
    i, j = ind[0], ind[1]
    k = j+1
    return ((y[k]-y[j])/(x[k]-x[j]) - (y[j]-y[i])/(x[j]-x[i]))/(x[j] - x[i])
53/10:
# "Эксперимент"

def f(x):
    return np.sin(0.87*x+1.67) + 0.24 
x = np.linspace(1, 10, 5)
y = f(x)
print(y)
print(lag_pol(x, y, 2))
53/11:
rnd1 = np.random.default_rng()
t = rnd1.random(1)*10
# случайное число от 1 до 10

axis = (t-3, t+3, -1, 1.5)

plt.plot(t, f(t), 'or', label = 'value')
plt.plot(t, near_neighbour(x, y, t), '.', label='neighbour')
plt.plot(t, two_neighbours(x, y, t), '.', label='2 neighbour')
plt.plot(t, linear(x, y, t), '.', label='linear')
plt.plot(t, lag_pol(x, y, t), '.', label='Lagrange')
plt.plot(t, polynomial(x, y, t), '.', label='polynomial')
z = np.linspace(t-0.5, t+0.5, 10) 
# погрешность
plt.plot(x, y, 'vb', label = 'plot')
plt.axis(axis)
plt.legend(fontsize=7)
plt.show()
print(t,  '\n', 'error:', f(t)-near_neighbour(x, y, t), '- neighbour,', f(t)-linear(x, y, t), '- lin,', f(t)-polynomial(x, y, t), ' - polynomial,', f(t)-lag_pol(x, y, t), '- lagrange', 
 f(t)-two_neighbours(x, y, t), '- 2 neighbours\n')
53/12:
def g1(x, a, b):
    return a*x+b
    
def g3(x, a, b):
    return np.sin(a * x) + b
    
def f2(t):
    return lag_pol(x, y, t)

f1 = sp.optimize.curve_fit(g1, x, y)
f3 = sp.optimize.curve_fit(g3, x, y)

def error(f, x, y):
    return np.sqrt(np.sum((y-f)**2))
    


#print(np.polyfit(x, y, 10))
#print(np.array([pow(2, i) for i in range(11)]).T)
x0 = np.linspace(1, 10, 100) 
plt.plot(x, y, '.')
plt.plot(x0, f(x0), label = 'original')
plt.plot(x0, g1(x0, f1[0][0], f1[0][1]))
plt.plot(x0, g3(x0, f3[0][0], f3[0][1]), label = 'sinus')
plt.plot(x0, np.vectorize(f2)(x0), label = 'polynomial')
plt.legend(fontsize=7)

plt.show()
print('error of lin:', error(g1(x, f1[0][0], f1[0][1]), x, y) , '\n',  'error of sin:', 
 error(g3(x, f1[0][0], f1[0][1]), x, y), ' \n', 'error of polynomial:', error(np.vectorize(f2)(x), x, y))
53/13: print(sp.__file__)
53/14:
from functools import partial
def int_plot(x, y):
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    for i in range(98):
        int1[i], int2[i], int3[i] = f1(net[i+1]), f2(net[i+1]), f3(net[i+1])
    
    plt.figure(figsize=(20,10)) 
    plt.grid(which='major')
    plt.grid(which='minor', linestyle=':')
    for s in self.data:
        plt.plot(s.x_data, s.y_data, '--', label = str(s))
    plt.legend(fontsize=14)
    plt.savefig('plot.png')
    plt.show()
53/15: x + 4
53/16:
x = np.linspace(1, 10, 10)
y = 4*x_data+3
print(y_data)
int_plot(x, y)
53/17: print(near_neighbour(x_data, y_data, 3.5), np.sin(3))
53/18: linear(x_data, y_data, 1.5)
53/19:
    n = len(x)
    net = np.linspace(x[0], x[n-1], 100)
    f1 = partial(near_neighbour, x, y)
    f2 = partial(linear, x, y)
    f3 = partial(lag_pol, x, y)
    int1 = np.array([f2(net[i+1]) for i in range(100)])
53/20:
a = np.array([1, 2, 3, 4])
a-np.ones((4))
53/21:
def f1 (a, b, c):
    return a+2*b+3*c
x = 1
f = partial(f1, x, x, x)
f()
53/22: f2 = np.vectorize(f1)
53/23:
temp = p5*dirder/(dirder + p5*actred)
par = par/temp
52/74: a = np.ndarray([1, 2, 3])
52/75:
a = np.ndarray([1, 2, 3])
a ==[1, 2, 3]
52/76:
a = np.ndarray([1, 2, 3])
a == [[1, 2, 3]]
52/77:
a = np.ndarray([1, 2, 3])
a
52/78:
a = np.ndarray([1, 1])
a
52/79:
a = np.ndarray((1, 1))
a
52/80: a = [n for n in range(7)]
52/81:
a = [n for n in range(7)]
b = a.reverse()
52/82:
a = [n for n in range(7)]
b = a.reverse()
plt.plot(a, b)
52/83:
a = [n for n in range(7)]
b = a.reverse()
plt.pyplot(a, b)
52/84:
a = [n for n in range(7)]
b = a.reverse()
plt.plot(a, b)
52/85:
import numpy as np
import matplotlib.pyplot as plt
52/86:
a = [n for n in range(7)]
b = a.reverse()
plt.plot(a, b)
52/87:
a = np.array([n for n in range(7)])
b = np.array(a.reverse())
plt.plot(a, b)
52/88:
a = np.array([n for n in range(7)])

plt.plot(a, a)
52/89:
a = np.array([n for n in range(7)])

plt.plot(a, a)
plt.show()
52/90: a = database_search(DataBase, Indicatrices, 10)
52/91:
b = np.array([[list(a) for (a, b) in line] for line in a])
b
52/92: a = database_search(DataBase, Indicatrices, 2)
52/93:
b = np.array([[list(a) for (a, b) in line] for line in a])
b
52/94:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[list(b) for (a, b) in line] for line in a])
error_arr
52/95:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([b for (a, b) in line] for line in a])
error_arr
52/96:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
error_arr
52/97:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
print(sum(error_arr, axis = 1)
52/98:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
print(np.sum(error_arr, axis = 1)
52/99:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
print(np.sum(error_arr, axis = 1))
52/100:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
print(np.sum(error_arr, axis = 0))
52/101:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
print(np.sum(error_arr, axis = 1))
52/102:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
x_axis = np.sum(error_arr, axis = 1)
param_arr
#y_axis = np.sum(param_arr, )
52/103:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
x_axis = np.sum(error_arr, axis = 1)

y_axis = np.sum(param_arr, axis = 1)
y_axis
52/104:
def x_axis(database_search)
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    x_axis = np.sum(error_arr, axis = 1)
    return x_axis
def y_axis(database_search)
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(param_arr, axis = 1)
    return y_axis
52/105:
def x_axis(database_search):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    x_axis = np.sum(error_arr, axis = 1)
    return x_axis
def y_axis(database_search):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(param_arr, axis = 1)
    return y_axis
52/106:
def x_axis(database_search):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x_axis = np.sum(error_arr, axis = 1)/err
    return x_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/
    return y_axis
52/107:
def x_axis(database_search):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x_axis = np.sum(error_arr, axis = 1)/param_arr.shape()[1]
    return x_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape()[1]
    return y_axis
52/108:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(error_arr, axis = 1)/param_arr.shape()[1]
    xn_axis = [n, 0:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape()[1]
    return y_axis
52/109:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(error_arr, axis = 1)/param_arr.shape()[1]
    xn_axis = x[n, 0:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape()[1]
    return y_axis
52/110:
search = database_search(DataBase, Indicatrices, 10)
xn_axis = xn_axis(search)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
52/111:
search = database_search(DataBase, Indicatrices, 10)
xn_axis = xn_axis(search, 1)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
plt.show()
52/112:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(error_arr, axis = 1)/param_arr.shape()[1]
    xn_axis = x[n, 0:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis
52/113:
search = database_search(DataBase, Indicatrices, 10)
xn_axis = xn_axis(search, 1)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
plt.show()
52/114:
search = database_search(DataBase, Indicatrices, 10)
xn_axis = xn_axis(search, 1)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
plt.show()
52/115:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(error_arr, axis = 1)/param_arr.shape[1]
    xn_axis = x[n, 0:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis
52/116:
search = database_search(DataBase, Indicatrices, 10)
xn_axis = xn_axis(search, 1)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
plt.show()
52/117:
a = database_search(DataBase, Indicatrices, 2)
param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
x = np.sum(error_arr, axis = 1)/param_arr.shape[1]
xn_axis = x[n, 0:]
52/118:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)/param_arr.shape[1]
xn_axis = x[n, 0:]
52/119:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)/param_arr.shape[1]
xn_axis = x[1, 0:]
52/120:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)/param_arr.shape[1]
x
52/121:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)/param_arr.shape[1]
param_arr
52/122:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)/
x
52/123:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)
x
52/124:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)
param_arr.shape
52/125:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)
x
#param_arr.shape
52/126:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 0)
x
#param_arr.shape
52/127:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 2)
x
#param_arr.shape
52/128:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = -1)
x
#param_arr.shape
52/129:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 0)
x
#param_arr.shape
52/130:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)
x
#param_arr.shape
52/131:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(error_arr, axis = 1)

param_arr.shape
52/132:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)

param_arr.shape
52/133:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)
x
param_arr.shape
52/134:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)
x
52/135:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)
param_arr.shape
52/136:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)
param_arr.shape[1]
52/137:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x
52/138:
a = database_search(DataBase, Indicatrices, 2)
a
52/139:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[2, 0:]
52/140:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
52/141:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(error_arr, axis = 1)/param_arr.shape[1]
    xn_axis = x[0, 2:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis
52/142:
search = database_search(DataBase, Indicatrices, 10)
xn_axis = xn_axis(search, 1)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
plt.show()
52/143:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    xn_axis = x[0, 2:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
52/144:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    xn_axis = x[0, 2:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
52/145:
xn_axis = xn_axis(search, 1)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
plt.show()
52/146:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    xn_axis = x[0, 2:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[list(a) for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
52/147:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    xn_axis = x[0, 2:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[list(a) for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
52/148:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    xn_axis = x[0, 2:]
    return xn_axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
52/149:
xn_axis = xn_axis(search, 1)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
plt.show()
52/150: search = database_search(DataBase, Indicatrices, 10)
52/151:
xn_axis = xn_axis(search, 1)
y_axis = y_axis(search)
plt.plot(x_axis, y_axis)
plt.show()
52/152:
xn = xn_axis(search, 1)
y = y_axis(search)
plt.plot(x, y)
plt.show()
52/153:
xn = xn_axis(search, 1)
y = y_axis(search)
plt.plot(xn, y)
plt.show()
52/154:
xn_axis(search, 1)
y = y_axis(search)
plt.plot(xn, y)
plt.show()
52/155:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
xn_axis(a)
52/156: xn_axis
52/157:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    x_axis = x[0, 2:]
    return x_axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
52/158:
xn = xn_axis(search, 1)
y = y_axis(search)
plt.plot(xn, y)
plt.show()
52/159:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0, 2:]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
52/160:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
xn_axis(a)
52/161:
xn = xn_axis(search, 1)
y = y_axis(search)
y
#plt.plot(xn, y)
#plt.show()
52/162:
xn = xn_axis(search, 1)
y = y_axis(search)
xn
#plt.plot(xn, y)
#plt.show()
52/163:
xn = xn_axis(search, 2)
y = y_axis(search)
xn
#plt.plot(xn, y)
#plt.show()
52/164:
xn = xn_axis(search, 0)
y = y_axis(search)
xn
#plt.plot(xn, y)
#plt.show()
52/165:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
xn_axis(a)
52/166:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
52/167:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0:, 2]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
52/168:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.plot(xn, y)
plt.show()
52/169:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/170:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.hist(xn, bins = 100)
plt.show()
52/171:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.hist(xn, bins = 101)
plt.show()
52/172:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.hist(xn, bins = 100)
plt.show()
52/173:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 100)
plt.show()
52/174:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 100)
plt.show()
52/175:
a = (1, 2, 3)
b = (2, 3, 4)
print(sum(i**2 for i in range(4)))
52/176:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.hist(xn, bins = 100)
plt.show()
52/177:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 1]
52/178:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 1]
52/179:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
52/180:
a = database_search(DataBase, Indicatrices, 2)
a
52/181:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 2]
52/182:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x
52/183:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0, 0:]
52/184:
param_arr = np.array([[list(a) for (a, b) in line] for line in a])
x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
x[0:, 0]
52/185:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0:, n]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
52/186:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.hist(xn, bins = 100)
plt.show()
52/187:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/188:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/189:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/190:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/191:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/192:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/193:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/194:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/195:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/196:
xn = xn_axis(search, 2)
y = y_axis(search)

plt.hist(xn, bins = 10)
plt.show()
52/197:
xn = xn_axis(search, 2)
y = y_axis(search)

plt.hist(xn, bins = 50)
plt.show()
52/198:
xn = xn_axis(search, 2)
y = y_axis(search)

plt.hist(xn, bins = 40)
plt.show()
52/199:
xn = xn_axis(search, 2)
y = y_axis(search)

plt.hist(xn, bins = 30)
plt.show()
52/200:
xn = xn_axis(search, 3)
y = y_axis(search)

plt.hist(xn, bins = 30)
plt.show()
52/201:
xn = xn_axis(search, 0)
y = y_axis(search)

plt.hist(xn, bins = 30)
plt.show()
52/202:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 30)
plt.show()
52/203:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 30)
ax.set_xlabel(r'$x$', fontsize=16)
ax.set_ylim([0, 1.05*y.max()])
ax.minorticks_on()
ax.legend(fontsize=16)
ax.grid(which='major')
ax.grid(which='minor', linestyle=':')
plt.show()
52/204:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 30)
plt.plot(x, f1, ':b', label='1st component')
plt.plot(x, f2, '--r', label='2nd component')
plt.plot(x, f1+f2, 'k', label='total')

plt.xlabel(r'$x$', fontsize=16)
plt.ylabel(r'$f(x)$', fontsize=16)

plt.xlim([0, 1])
plt.ylim([0, 1])

# выводим легенду
plt.legend(fontsize=14)
plt.show()
52/205:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 30)


plt.xlabel(r'$x$', fontsize=16)
plt.ylabel(r'$f(x)$', fontsize=16)

plt.xlim([0, 1])
plt.ylim([0, 1])

# выводим легенду
plt.legend(fontsize=14)
plt.show()
52/206:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 30)


plt.xlabel(r'$x$', fontsize=16)
plt.ylabel(r'$f(x)$', fontsize=16)



# выводим легенду
plt.legend(fontsize=14)
plt.show()
52/207:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 30)


plt.xlabel('volume', fontsize=16)
plt.ylabel('', fontsize=16)



# выводим легенду
plt.legend(fontsize=14)
plt.show()
52/208:
xn = xn_axis(search, 1)
y = y_axis(search)

plt.hist(xn, bins = 30)


plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
52/209:
x0, x1, x2, x3 = xn_axis(search, 0), xn_axis(search, 1), xn_axis(search, 2), xn_axis(search, 3) 

y = y_axis(search)
plt.hist(xn, bins = 30)
plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
52/210:
x0, x1, x2, x3 = xn_axis(search, 0), xn_axis(search, 1), xn_axis(search, 2), xn_axis(search, 3) 

y = y_axis(search)
plt.subhist(xn, bins = 30)
plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
52/211:
x0, x1, x2, x3 = xn_axis(search, 0), xn_axis(search, 1), xn_axis(search, 2), xn_axis(search, 3) 

y = y_axis(search)
plt.hist(xn, bins = 30)
plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
52/212: Params
52/213: Params{0:, 2}
52/214: n = np.array(Params)
52/215:
n = np.array(Params)
n
52/216:
n = np.array(Params)
n[0:, 1]
52/217:
n = np.array(Params)
n[0:, 1]-x1
52/218:
n = np.array(Params)
n[0:, 0]-0
52/219:
n = np.array(Params)
n[0:, 0]-x0
52/220:
n = np.array(Params)
n[0:, 0]
52/221:
n = np.array(Params)
n[0:, 0]-x0
52/222: n = np.array(Pax0
52/223:
n = np.array(Params)
n[0:, 0]-x0
52/224:
n = np.array(Params)
n[0:, 2]-x2
52/225:
n = np.array(Params)
n[0:, 4]-x4
52/226:
n = np.array(Params)
n[0:, 3]-x3
52/227:
n = np.array(Params)
np.mean(n[0:, 3]-x3)
52/228:
n = np.array(Params)
print(np.mean(n[0:, 0]-x0))
print(np.mean(n[0:, 1]-x1))
print(np.mean(n[0:, 2]-x2))
print(np.mean(n[0:, 3]-x3))
52/229:
n = np.array(Params)
print(np.mean(n[0:, 0]-x0), 'mean volume error')
print(np.mean(n[0:, 1]-x1), 'mean area error')
print(np.mean(n[0:, 2]-x2), 'mean refraction error')
print(np.mean(n[0:, 3]-x3), 'mean angle error')
52/230:
n = np.array(Params)
print(np.mean(n[0:, 0]-x0), '- mean volume error')
print(np.mean(n[0:, 1]-x1), '- mean area error')
print(np.mean(n[0:, 2]-x2), '- mean refraction error')
print(np.mean(n[0:, 3]-x3), '- mean angle error')
52/231:
par = np.array(Params)
print(np.mean(par[0:, 0]-x0), '- mean volume error')
print(np.mean(par[0:, 1]-x1), '- mean area error')
print(np.mean(par[0:, 2]-x2), '- mean refraction error')
print(np.mean(par[0:, 3]-x3), '- mean angle error')
54/1:
import numpy as np
import matplotlib.pyplot as plt
54/2: DataBase
54/3:
SDataBase = open("DataBase.txt", "r").read()
SIndicatrices = open("ExperimentalIndicatrices.txt", "r").read()
SParams = open("ExperimentalParams.txt", "r").read()
54/4:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'

    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {tuple(line[:4]): line[4:] for line in result_2d_list}
    return result_dict


DataBase = string_to_dict(SDataBase)
Params = string_to_2d_list(SParams)
Indicatrices = string_to_2d_list(SIndicatrices)
54/5: DataBase
54/6:
def l1_metrics(array_1, array_2):
     return sum([abs(item_1 - item_2) for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l1_metrics(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
54/7:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0:, n]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
54/8:

def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
54/9:
def l1_metrics(array_1, array_2):
     return sum([abs(item_1 - item_2) for item_1, item_2 in zip(array_1, array_2)])
    
def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l1_metrics(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
54/10:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0:, n]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
54/11:
x0, x1, x2, x3 = xn_axis(search, 0), xn_axis(search, 1), xn_axis(search, 2), xn_axis(search, 3) 

y = y_axis(search)
plt.hist(xn, bins = 30)
plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
54/12:
par = np.array(Params)
print(np.mean(par[0:, 0]-x0), '- mean volume error')
print(np.mean(par[0:, 1]-x1), '- mean area error')
print(np.mean(par[0:, 2]-x2), '- mean refraction error')
print(np.mean(par[0:, 3]-x3), '- mean angle error')
54/13:
def l1_metrics(array_1, array_2):
     return sum([abs(item_1 - item_2) for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l1_metrics(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
    
ind_dict = {}
    
    
#sorted_indices = sorted(range(len(arr)), key=lambda x: arr[x])
54/14:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0:, n]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
54/15:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0:, n]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis
54/16: search = database_search(DataBase, Indicatrices, 10)
54/17:
x0, x1, x2, x3 = xn_axis(search, 0), xn_axis(search, 1), xn_axis(search, 2), xn_axis(search, 3) 

y = y_axis(search)
plt.hist(xn, bins = 30)
plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
54/18:
x0, x1, x2, x3 = xn_axis(search, 0), xn_axis(search, 1), xn_axis(search, 2), xn_axis(search, 3) 

y = y_axis(search)
plt.hist(x0, bins = 30)
plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
54/19:
par = np.array(Params)
print(np.mean(par[0:, 0]-x0), '- mean volume error')
print(np.mean(par[0:, 1]-x1), '- mean area error')
print(np.mean(par[0:, 2]-x2), '- mean refraction error')
print(np.mean(par[0:, 3]-x3), '- mean angle error')
54/20: print([[]])
54/21: print([[]]).append(1)
54/22: print([[]].append(1))
54/23: print([[]].append([1]))
54/24: print([[1]].append([1]))
54/25:
a = [[]]
print(a)
54/26:
a = [[]]
a.append([1])
print(a)
54/27:
a = [1, 2, 3]
x, y, z = a
54/28:
a = [1, 2, 3]
x, y, z = a
x
54/29:
a = [1, 2, 3]
x, y, z = a
y
54/30:
a = [1, 2, 3]
x, y, z = a
z
54/31:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'

    divisions = input_string.split('\n')
    result_2d_list = [[list(map(float, division.split('\t'))) for division in divisions]]
    
    # [[par1, .., par4, val1, val2...], [...]]
    
    result_dict = {tuple(line[:4]): line[4:] for line in result_2d_list}
    
    # {(par1.., par4): ind1, ...}
    
    return result_dict


DataBase = string_to_dict(SDataBase)
Params = string_to_2d_list(SParams)
Indicatrices = string_to_2d_list(SIndicatrices)
54/32:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'

    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    # [[par1, .., par4, val1, val2...], [...]]
    
    result_dict = {tuple(line[:4]): [line[4:]] for line in result_2d_list}
    
    # {(par1.., par4): ind1, ...}
    
    return result_dict


DataBase = string_to_dict(SDataBase)
Params = string_to_2d_list(SParams)
Indicatrices = string_to_2d_list(SIndicatrices)
54/33:
import numpy as np
import matplotlib.pyplot as plt
54/34:
SDataBase = open("DataBase.txt", "r").read()
SIndicatrices = open("ExperimentalIndicatrices.txt", "r").read()
SParams = open("ExperimentalParams.txt", "r").read()
54/35:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list

def string_to_dict(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    result_dict = {tuple(line[:4]): line[4:] for line in result_2d_list}
    

    return result_dict


DataBase = string_to_dict(SDataBase)
Params = string_to_2d_list(SParams)
Indicatrices = string_to_2d_list(SIndicatrices)
54/36: DataBase
54/37:

def get_n_smallest_dict(arr, n):
    sorted_dict = sorted(arr, key=arr.get)
    return [sorted_dict[i] for i in range(n)]
54/38:
def l1_metrics(array_1, array_2):
     return sum([(item_1 - item_2) for item_1, item_2 in zip(array_1, array_2)])
    
def database_search(database, indicatrices, n):
    similarity_list = [[]].pop(0)
    for indicatrice in indicatrices:
        dict = {params: l1_metrics(database.get(params), indicatrice) for params in database}
        similarity_list.append(sorted(dict.items(), key = lambda x: x[1])[:n])
        
    return similarity_list
54/39:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0:, n]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis


param_arr = np.array([[list(a) for (a, b) in line] for line in a])
error_arr = np.array([[b for (a, b) in line] for line in a])
y = np.sum(error_arr, axis = 1)/error_arr.shape[1]
y
54/40:
def xn_axis(database_search, n):
    param_arr = np.array([[list(a) for (a, b) in line] for line in database_search])
    x = np.sum(param_arr, axis = 1)/param_arr.shape[1]
    axis = x[0:, n]
    return axis
def y_axis(database_search):
    error_arr = np.array([[b for (a, b) in line] for line in database_search])
    y_axis = np.sum(error_arr, axis = 1)/error_arr.shape[1]
    return y_axis
54/41:
x0, x1, x2, x3 = xn_axis(search, 0), xn_axis(search, 1), xn_axis(search, 2), xn_axis(search, 3) 

y = y_axis(search)
plt.hist(xn, bins = 30)
plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
54/42:
x0, x1, x2, x3 = xn_axis(search, 0), xn_axis(search, 1), xn_axis(search, 2), xn_axis(search, 3) 

y = y_axis(search)
plt.hist(x1, bins = 30)
plt.xlabel('Volume', fontsize=16)




# выводим легенду
plt.legend(fontsize=14)
plt.show()
55/1:
from PIL import Image, ImageDraw 
import numpy as np
import matplotlib.pyplot as plt

def poisk(xp, yp, mne, shag):
    razmery = np.array([])
    mne[:, 0] = 0
    mne[:, yp - 1] = 0     #indexation
    mne[0, :] = 0
    mne[xp - 1, :] = 0

    for yi in range(1, yp, shag):
        for xi in range(1, xp, shag):
            if mne[xi, yi] == 1:
                mne, r = razmer(xp, yp, xi, yi, mne)
                razmery = np.append(razmery, r)
    return razmery

def ori(orr, xj, yj):
    if orr == 0:
        yj = yj - 1
    elif orr == 1:
        xj = xj - 1
    elif orr == 2:
        yj = yj + 1
    elif orr == 3:
        xj = xj + 1
    else:
        print('ty oshibsya v orientacii')
    return xj, yj

def razmer(xp, yp, xj, yj, mne):
    #while mne(xj, yj - 1) == 1 and (yj - 1) != 0:
    #    yj = yj - 1
    #mne[xj, yj] = 0
    s = 1
    orr = 1
    h = 1
    xq = xj
    yq = yj
    mini = np.array([xq, yq])
    maxi = np.array([xq, yq])
    if mne[ori(0, xj, yj)[0], ori(0, xj, yj)[1]] == 0 and mne[ori(1, xj, yj)[0], ori(1, xj, yj)[1]] == 0 and mne[ori(2, xj, yj)[0], ori(2, xj, yj)[1]] == 0 and mne[ori(3, xj, yj)[0], ori(3, xj, yj)[1]] == 0:
        mne[xj, yj] = 0
        return mne, s
    while h == 1:
        #libo nado prognat vokrug bublika s 4 storon libo kak to po drugomu
        #v temnoy komnate so smenoy orientacii
        #nado reshit chto sdelat s odnoy tochkoy
        if ori(orr, xj, yj) == (xq, yq) or ori((orr + 3) % 4, xj, yj) == (xq, yq):  # tut bylo         s != 1 and
            h = 0
        elif mne[ori((orr + 3) % 4, xj, yj)[0], ori((orr + 3) % 4, xj, yj)[1]] == 1:
            #print(xj, yj, orr, 'proverka na pravo', xp, yp)
            orr = (orr + 3) % 4
            xj, yj = ori(orr, xj, yj)
            s = s + 1
        elif mne[ori(orr, xj, yj)[0], ori(orr, xj, yj)[1]] == 0:
            #print(xj, yj, orr, 'proverka na vpered', xp, yp)
            orr = (orr + 1) % 4
        else:
            #print(xj, yj, 'idu vpered', s, xq, yq)
            xj, yj = ori(orr, xj, yj)
            if xj < mini[0]:
                mini[0] = xj
            elif xj > maxi[0]:
                maxi[0] = xj
            if yj < mini[1]:
                mini[1] = yj
            elif yj > maxi[1]:
                maxi[1] = yj
            s = s + 1
    mne[mini[0]:(maxi[0] + 1), mini[1]:(maxi[1] + 1)] = 0
    #print(s)
    return mne, s


imya = "C:\\Users\\belco\\OneDrive\\ФФ\\Биомед\\Костя\\Lygl2уч4deform_medi_manifestCapture_001.JPG"
pol = 255
potolok = 0
alfa = 0.7
shag = 1

img = Image.open(imya)
imgg = img.convert('L')  #grey
draw = ImageDraw.Draw(imgg)
pp = imgg.load()  #matrix pixel
(xp, yp) = imgg.size
#imgn = img.rotate(50, expand=True)


for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] < pol:
            pol = pp[xi, yi]
        if pp[xi, yi] > potolok:
            potolok = pp[xi, yi]
porog = pol * alfa + potolok * (1 - alfa)

#threshold


mne = np.array([[0] * yp] * xp)
for xi in range(xp):
    for yi in range(yp):
        if pp[xi, yi] <= porog:
            draw.point((xi, yi), 0)
            mne[xi, yi] = 1
        if pp[xi, yi] > porog:
            draw.point((xi, yi), 255)
            mne[xi, yi] = 0

razmery = np.sort(poisk(xp, yp, mne, shag))
#xxx, yyy = ori(0, 2, 2)
#xxx = ori(0, 2, 2)[0]
#print(xxx)
#print(ori(0, 2, 2) == (2, 2))
print(razmery, np.size(razmery))
imgg.show()
fig2 = plt.figure()
ax2 = fig2.add_subplot()
ax2.hist(razmery, bins=3*int(np.around(np.log2(np.size(razmery)) + 1)))
plt.show()

#problemy: metod merit dlinu okruzhnosti a ne razmery + udalyaet izmerennye figury pryamougolnikom, a ne kruglyashom
56/1: spectrum = open("150724.txt", r)
56/2: spectrum = open("150724.txt", 'r')
56/3: spectrum
56/4: spectrum = open("150724.txt", "r").read()
56/5: spectrum
56/6: spectrum = open("150724.txt", "r").read()
56/7: spectrum
56/8: import numpy as np
56/9: spectrum.split('\n')
56/10:
import numpy as np
import re
56/11: spectrum.split('[\n, \t]')
56/12: spectrum.split('[\n\t]')
56/13: spectrum.split('\n\t')
56/14:
s = re.
spectrum.split(r'\n\t')
56/15:

spectrum.split(r'\n\t')
56/16: spectrum.split(r'12')
56/17:
d = r'[\n\t]'
spectrum.split(d)
56/18:
d = r'[\n]'
spectrum.split(d)
56/19:
d = r'[\\n\\t]'
spectrum.split(d)
56/20:
d = r'\\n'
spectrum.split(d)
56/21: spectrum
56/22:
d = r'\\n'
spectrum.split(d)
56/23:
d = r'\\t'
spectrum.split(d)
56/24:
d = r'\t'
spectrum.split(d)
56/25:
d = '\t'
spectrum.split(d)
56/26:
d = r'[\t\n]'
spectrum.split(d)
56/27:
d = r'[\t\n]'
spectrum.split('\')
56/28:

spectrum.split('\')
56/29: spectrum.split('\')
56/30: spectrum.split('\')
56/31: spectrum.split('\n')
56/32: spectrum.split('\t\n')
56/33:

spectrum.split(r'[\n\t]', text)
56/34:

re.split(r'[\n\t]', spectrum)
56/35:
import numpy as np
import re
56/36: spectrum = open("150724.txt", "r").read()
56/37: spectrum
56/38: re.split(r'[\n\t]', spectrum)
56/39:
re.split(r'[\n\t]', spectrum)
list(map(float, spectrum))
56/40:
spectrum = re.split(r'[\n\t]', spectrum)
list(map(float, spectrum))
56/41:
re.split(r'[\n\t]', spectrum)
spectrum
#list(map(float, spectrum))
56/42:
re.split(r'[\n\t]', spectrum)

#list(map(float, spectrum))
56/43:
import numpy as np
import re
56/44: spectrum = open("150724.txt", "r").read()
56/45: spectrum
56/46:
re.split(r'[\n\t]', spectrum)

#list(map(float, spectrum))
56/47:
re.split(r'[\n\t]', spectrum)
split
#list(map(float, spectrum))
56/48:
re.split(r'[\n\t]', spectrum)
spectrum
#list(map(float, spectrum))
56/49:
spectrum = re.split(r'[\n\t]', spectrum)

#list(map(float, spectrum))
56/50:
spectrum = re.split(r'[\n\t]', spectrum)
list(map(float, spectrum))
56/51: spectrum
56/52:
spectrum = re.split(r'[\n\t]', spectrum)
list(map(float, spectrum))
56/53:
import numpy as np
import re
56/54: spectrum = open("150724.txt", "r").read()
56/55: spectrum
56/56: spectrum
56/57: spectrum = re.split(r'[\n\t]', spectrum)
56/58:

list(map(float, spectrum))
56/59:
spectrum = re.split(r'[\n\t]', spectrum)
spectrum
56/60:
import numpy as np
import re
56/61: spectrum = open("150724.txt", "r").read()
56/62: spectrum
56/63:
spectrum = re.split(r'[\n\t]', spectrum)
spectrum
56/64:

list(map(float, spectrum))
56/65: float('0,00')
56/66: float('0.00')
56/67: spectrum = open("150724.txt", "r").read()
56/68: spectrum
56/69:
spectrum = re.split(r'[\n\t]', spectrum)
spectrum
56/70:

list(map(float, spectrum))
56/71: float('0.00')
56/72: spectrum = np.array(spectrum)
56/73:
import numpy as np
import re
import mathplotlib.pyplot as plt
56/74:
import numpy as np
import re
import matplotlib.pyplot as plt
56/75:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.show()
56/76: spectrum[0::2]
56/77: spectrum[1::2]
56/78:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.show()
56/79:
plt.plot(spectrum[0:12:2], spectrum[1:13:2])
plt.show()
56/80: plt.plot(spectrum[0:12:2]
56/81: plt.plot(spectrum[0:12:2])
56/82: spectrum[0:12:2]
56/83: spectrum[1:13:2]
56/84:
plt.plot(spectrum[0:12:2], spectrum[1::2])
plt.show()
56/85:
plt.plot(spectrum[0:12:2], spectrum[1:13:2])
plt.show()
56/86: float(''6.923307e-013'')
56/87: float('6.923307e-013')
56/88: float('6.923307e-03')
56/89: spectrum[0::2]
56/90: spectrum[0::2]+1
56/91: spectrum[0::2]
56/92:
spectrum = np.array(spectrum)
spectrum.np.astype(float32)
56/93:
spectrum = np.array(spectrum)
spectrum.astype(float32)
56/94:
spectrum = np.array(spectrum)
spectrum.astype(float)
56/95: spectrum[0::2]
56/96:
spectrum = np.array(spectrum)
spectrum.astype(float)
56/97: spectrum = np.array(spectrum).astype(float)
56/98: spectrum[0::2]
56/99: spectrum[1::2]
56/100:
plt.plot(spectrum[0:12:2], spectrum[1:13:2])
plt.show()
56/101:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.show()
56/102:
vacuum = open("150724.txt", "r").read()
air = open("151007", "r").read()
56/103:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
56/104:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
56/105:
vacuum = np.array(vacuum).astype(float)
air = np.array(air).astype(float)
56/106:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
56/107:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
air
56/108:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
56/109: vacuum
56/110:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
air
56/111:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
56/112:
import numpy as np
import re
import matplotlib.pyplot as plt
56/113:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
56/114: vacuum
56/115: float('6.923307e-03')
56/116:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
air
56/117:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
56/118: float('0.00')
56/119:
vacuum = np.array(vacuum).astype(float)
air = np.array(air).astype(float)
56/120:
plt.plot(air[0::2], air[1::2])
plt.show()
56/121:
plt.plot(air[0::2], air[1::2]б 'ob')
plt.show()
56/122:
plt.plot(air[0::2], air[1::2], 'ob')
plt.show()
56/123:
plt.plot(air[0::2], air[1::2])
plt.show()
56/124:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
56/125:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
56/126:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
56/127:
import numpy as np
import re
import matplotlib.pyplot as plt
56/128:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
56/129: vacuum
56/130: float('6.923307e-03')
56/131:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
56/132:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
56/133: float('0.00')
56/134:
vacuum = np.array(vacuum).astype(float)
air = np.array(air).astype(float)
56/135: vacuum[1::2]
56/136:
plt.plot(vacuum[0::2], vacuum[1::2])
plt.show()
56/137:
vacuum = np.array(vacuum).astype(float)
air = np.array(air).astype(float)
spectrum = np.array(spectrum).astype(float)
56/138:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.show()
56/139:
plt.bar(spectrum[0::2], spectrum[1::2])
plt.show()
56/140:
plt.bar(air[0::2], air[1::2])
plt.show()
56/141:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.show()
56/142:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.show()
56/143:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend('sdf')
plt.show()
56/144:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend('spectrum')
plt.show()
56/145:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend("spectrum")
plt.show()
56/146:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend("spectrum", 12)
plt.show()
56/147:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend("spectrum")
plt.show()
58/1:
import numpy as np
import re
import matplotlib.pyplot as plt
58/2:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
58/3:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
58/4:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
details = re.split(r'[\n\t]', spectrum)
58/5:
import numpy as np
import re
import matplotlib.pyplot as plt
58/6:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
58/7: vacuum
58/8: float('6.923307e-03')
58/9:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
details = re.split(r'[\n\t]', spectrum)
58/10:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
details = (list(map(float, details)))
58/11:
vacuum = np.array(vacuum).astype(float)
air = np.array(air).astype(float)
spectrum = np.array(spectrum).astype(float)
details = np.array(details).astype(float)
58/12:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
58/13: vacuum
58/14: float('6.923307e-03')
58/15:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
58/16:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
details = re.split(r'[\n\t]', details)
58/17:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
details = (list(map(float, details)))
58/18:
vacuum = np.array(vacuum).astype(float)
air = np.array(air).astype(float)
spectrum = np.array(spectrum).astype(float)
details = np.array(details).astype(float)
58/19: vacuum[1::2]
58/20:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.show()
58/21:
plt.bar(air[0::2], air[1::2])
plt.show()
58/22:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend("spectrum")
plt.show()
58/23:
plt.plot(details[0::2], details[1::2])
plt.legend("")
plt.show()
58/24:
plt.bar(details[0::2], details[1::2])
plt.legend("")
plt.show()
58/25:
plt.plot(details[0::2], details[1::2])
plt.legend("")
plt.show()
58/26:
plt.bar(spectrum[0::2], spectrum[1::2])
plt.legend("spectrum")
plt.show()
58/27:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend("spectrum")
plt.show()
58/28:
plt.plot(details[0::2], details[1::2])
plt.legend("")
plt.bar()
58/29:
plt.bar(details[0::2], details[1::2])
plt.legend("")
plt.show()
58/30:
error = np.zeros(details.size/2)
plt.bar(details[0::2], details[1::2], =error)
plt.legend("")
plt.show()
58/31:
err = np.zeros(details.size/2)
plt.bar(details[0::2], details[1::2], err=error)
plt.legend("")
plt.show()
58/32:
err = np.zeroes(details.size/2)
plt.bar(details[0::2], details[1::2], err=error)
plt.legend("")
plt.show()
58/33:
err = np.empty(details.size/2)
plt.bar(details[0::2], details[1::2], err=error)
plt.legend("")
plt.show()
58/34:
err = np.empty(details.size/2, 0)
plt.bar(details[0::2], details[1::2], err=error)
plt.legend("")
plt.show()
58/35:
err = np.empty(int(details.size/2)
plt.bar(details[0::2], details[1::2], err=error)
plt.legend("")
plt.show()
58/36:
err = np.empty(int(details.size/2))
plt.bar(details[0::2], details[1::2], err=error)
plt.legend("")
plt.show()
58/37:
error = np.empty(int(details.size/2))
plt.bar(details[0::2], details[1::2], yerr=error)
plt.legend("")
plt.show()
58/38:
error = np.empty(int(details.size/2))
plt.plot(details[0::2], details[1::2], yerr=error)
plt.legend("")
plt.show()
58/39:
error = np.empty(int(details.size/2))
plt.bar(details[0::2], details[1::2], yerr=error)
plt.legend("")
plt.show()
58/40:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.title('vacuum')
plt.show()
58/41:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.title('Vacuum', fontsize = 16)
plt.show()
58/42:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.title('Vacuum', fontsize = 16)
plt.xlabel('masses, [Da]', fontsize = 10)
plt.show()
58/43:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.title('Vacuum', fontsize = 16)
plt.xlabel('masses [Da]', fontsize = 10)
plt.show()
58/44:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.title('Vacuum', fontsize = 16)
plt.xlabel('masses [Da]', fontsize = 10)
plt.ylabel('ion current. A')
plt.show()
58/45:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.title('Vacuum', fontsize = 16)
plt.xlabel('masses [Da]', fontsize = 10)
plt.ylabel('ion current. [A]')
plt.show()
59/1:
error = np.empty(int(details.size/2))
plt.bar(details[0::2], details[1::2])
plt.legend("")
plt.show()
59/2:
error = np.empty(int(details.size/2))
plt.bar(details[0::2], details[1::2], yerr=error)
plt.legend("")
plt.show()
59/3: corr_spectr = vacuum - air
59/4:
import numpy as np
import re
import matplotlib.pyplot as plt
59/5:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
59/6: vacuum
59/7: float('6.923307e-03')
59/8:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
details = re.split(r'[\n\t]', details)
59/9:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
details = (list(map(float, details)))
59/10: float('0.00')
59/11:
vacuum = np.array(vacuum).astype(float)
air = np.array(air).astype(float)
spectrum = np.array(spectrum).astype(float)
details = np.array(details).astype(float)
59/12: vacuum[1::2]
59/13:
plt.bar(vacuum[0::2], vacuum[1::2])
plt.title('Vacuum', fontsize = 16)
plt.xlabel('masses [Da]', fontsize = 10)
plt.ylabel('ion current. [A]')
plt.show()
59/14:
plt.xlabel('run number', fontsize=16)
plt.ylabel(r'average current ($\mu A$)', fontsize=16)
plt.title(r'The $\alpha^\prime$ experiment. Season 2020-2021')

# задаем диапазон значений оси y
plt.ylim([0, 200])
59/15:
plt.bar(air[0::2], air[1::2])
plt.legend()
plt.show()
59/16:
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend("spectrum")
plt.show()
59/17: corr_spectr = vacuum - air
59/18:
corr_spectr = vacuum - air
plt.plot(spectrum[0::2], spectrum[1::2])
plt.legend("corr spectrum")
plt.show()
59/19:
corr_spectr = vacuum - air
plt.plo(corr_spectrum[0::2], corr_spectrum[1::2])
plt.legend("corr spectrum")
plt.show()
59/20:
corr_spectr = vacuum - air
plt.plot(corr_spectrum[0::2], corr_spectrum[1::2])
plt.legend("corr spectrum")
plt.show()
59/21:
corr_spectr = vacuum - air
plt.plot(corr_spectr[0::2], corr_spectr[1::2])
plt.legend("corr spectrum")
plt.show()
59/22:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
r_2 = open("r_2.txt", "r").read()
59/23:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
details = (list(map(float, details)))
r_2 = (list(map(float, details)))
59/24:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
details = (list(map(float, details)))
r_2 = (list(map(float, r_2)))
59/25:
vacuum = np.array(vacuum).astype(float)
air = np.array(air).astype(float)
spectrum = np.array(spectrum).astype(float)
details = np.array(details).astype(float)
r_2 = np.array(r_2).astype(float)
59/26:
import numpy as np
import re
import matplotlib.pyplot as plt
59/27:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
r_2 = open("r_2.txt", "r").read()
59/28: vacuum
59/29: float('6.923307e-03')
59/30:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
details = re.split(r'[\n\t]', details)
r_2 = re.split(r'[\n\t]', details)
59/31:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
details = (list(map(float, details)))
r_2 = (list(map(float, r_2)))
59/32:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
details = re.split(r'[\n\t]', details)
r_2 = re.split(r'[\n\t]', r_2)
59/33:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
r_2 = open("r_2.txt", "r").read()
59/34: vacuum
59/35: float('6.923307e-03')
59/36:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
details = re.split(r'[\n\t]', details)
r_2 = re.split(r'[\n\t]', r_2)
59/37:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
details = (list(map(float, details)))
r_2 = (list(map(float, r_2)))
59/38:
vacuum = open("150724.txt", "r").read()
air = open("151007.txt", "r").read()
spectrum = open("150921.txt", "r").read()
details = open("details.txt", "r").read()
r_2 = open("r_2.txt", "r").read()
59/39: vacuum
59/40: float('6.923307e-03')
59/41:
vacuum = re.split(r'[\n\t]', vacuum)
air = re.split(r'[\n\t]', air)
spectrum =  re.split(r'[\n\t]', spectrum)
details = re.split(r'[\n\t]', details)
r_2 = re.split(r'[\n\t]', r_2)
59/42:
vacuum = list(map(float, vacuum))
air = list(map(float, air))
spectrum = (list(map(float, spectrum)))
details = (list(map(float, details)))
r_2 = (list(map(float, r_2)))
59/43:
def data_to_arr(filename):
    file = open(filename, "r").read()
    file = list(map(float, file))
    vacuum = np.array(vacuum).astype(float)
59/44:
def data_to_arr(filename):
    file = open(filename, "r").read()
    file =  re.split(r'[\n\t]', file)
    file = list(map(float, file))
    vacuum = np.array(vacuum).astype(float)
59/45: data_to_arr("initial1.txt")
59/46:
def data_to_arr(filename):
    file = open(filename, "r").read()
    file =  re.split(r'[\n\t]', file)
    file = list(map(float, file))
    file = np.array(file).astype(float)
    return file
59/47: data_to_arr("initial1.txt")
59/48: init1 = data_to_arr("initial1.txt")
59/49: init1 = data_to_arr("initial1.txt")
59/50:
plt.plot(init[0::2], init[1::2])
plt.show()
59/51:
plt.plot(init1[0::2], init1[1::2])
plt.show()
59/52: init1 = data_to_arr("initial2.txt")
59/53:
plt.plot(init1[0::2], init1[1::2])
plt.show()
59/54:
plt.plot(init1[0::2], init1[1::2])
plt.show()
59/55: init1 = data_to_arr("initial1.txt")
59/56:
plt.plot(init1[0::2], init1[1::2])
plt.show()
59/57: init1 = data_to_arr("initial3.txt")
59/58:
plt.plot(init1[0::2], init1[1::2])
plt.show()
59/59: np.sort(init[0::2])
59/60: np.sort(init1[0::2])
59/61: np.sort(init1[::2])
59/62: np.sort(init1[1::2])
59/63: np.argsort(init1[1::2])
59/64:
plt.plot(init1[0::2]*1.38/1.007, init1[1::2])
plt.show()
59/65:
plt.plot(init[0::2], init[1::2])
plt.show()
59/66:
plt.plot(init1[0::2], init1[1::2])
plt.show()
59/67:
plt.plot(init1[0::2]/1.38*1.007, init1[1::2])
plt.show()
59/68:
plt.plot(init1[0::2]-(1.38-1.007), init1[1::2])
plt.show()
59/69:
np.sort(air[0::2])
plt.bar(air[0::2], air[1::2]-)
plt.legend()
plt.show()
59/70:
np.sort(air[0::2])
plt.bar(air[0::2], air[1::2])
plt.legend()
plt.show()
59/71:
print(np.sort(air[0::2]))
plt.bar(air[0::2], air[1::2])
plt.legend()
plt.show()
59/72:
print(np.sort(air[1::2]))
plt.bar(air[0::2], air[1::2])
plt.legend()
plt.show()
59/73:
print(np.sort(air[1::2]))
plt.bar(air[0::2], air[1::2]-6.230757e-13)
plt.legend()
plt.show()
59/74:
print(np.sort(air[1::2]))
plt.bar(air[0::2], (air[1::2]-6.230757e-13)
plt.legend()
plt.show()
59/75:
print(np.sort(air[1::2]))
plt.bar(air[0::2], (air[1::2]-6.230757e-13))
plt.legend()
plt.show()
59/76: air[1::2]-6.230757e-13
59/77: air-6.230757e-13
59/78:
print(np.sort(air[1::2]))
plt.bar(air[0::2], air[1::2]-6.230757e-13)
plt.legend()
plt.show()
59/79: air
59/80: np.array(air)
59/81: air =  np.array(air)
59/82:
print(np.sort(air[1::2]))
plt.bar(air[0::2], air[1::2]-6.230757e-13)
plt.legend()
plt.show()
59/83:
print(np.sort(air[1::2]))
plt.bar(air[0::2], air[1::2]-6.230757e-13)
plt.legend()
plt.show()
plt.save("plot")
59/84:
print(np.sort(air[1::2]))
plt.bar(air[0::2], air[1::2]-6.230757e-13)
plt.legend()
plt.show()
plt.savefig("air")
59/85:
print(np.sort(air[1::2]))
plt.bar(air[0::2], air[1::2]-6.230757e-13)
plt.legend()
plt.show()
plt.savefig("air")
59/86:
print(np.sort(air[1::2]))
plt.bar(air[0::2], (air[1::2]-6.230757e-13)/np.sum(air[1::2]))
plt.legend()
plt.show()
plt.savefig("air")
59/87:
print(np.sort(air[1::2]))
plt.bar(air[0::2], (air[1::2]-6.230757e-13)/np.sum(air[1::2]-6.230757e-13))
plt.legend()
plt.show()
plt.savefig("air")
59/88:
print(np.sort(air[1::2]))
sum = air[1]+air[2]+air[14]+air[16]+air[17]+air[18]+air[28]+air[32] - 6.230757e-13*8
plt.bar(air[0::2], (air[1::2]-6.230757e-13)/sum)
plt.legend()
plt.show()
plt.savefig("air")
59/89: air[>0]
59/90:
print(np.sort(air[1::2]))
sum = air[1]+air[2]+air[14]+air[16]+air[17]+air[18]+air[28]+air[32] - (6.230757e-13)*8
plt.bar(air[0::2], (air[1::2]-6.230757e-13)/sum)
plt.legend()
plt.show()
plt.savefig("air")
64/1:
import numpy as np
import scipy
65/1: file = open("C:\Users\belco\OneDrive\ФФ\Course_Optics\table.txt", "r").read()
65/2: file = open("C:\Users\belco\OneDrive\ФФ\Course_Optics\table.txt", "r").read()
65/3: file = open("C:\Users\belco\OneDrive\ФФ\Course_Optics\table.txt", "r").read()
65/4: file = open("C:\Users\belco\OneDrive\ФФ\Course_Optics\table.txt", "r").read()
65/5: file = open("C:\Users\belco\OneDrive\ФФ\Course_Optics\table.txt", "r").read()
65/6: file = open("C:\Users\belco\OneDrive\ФФ\Course_Optics\table.txt", "r").read()
65/7: file = open("table.txt", "r").read()
65/8: file
65/9:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
string_to_2d_list(file)
65/10:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
string_to_2d_list(file)
65/11: file = open("table.txt", "r").read()
65/12: file
65/13:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
string_to_2d_list(file)
65/14:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
string_to_2d_list(file)
65/15:
import numpy as np
import scipy
65/16:
def string_to_2d_list(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
string_to_2d_list(file)
65/17:
def string_to_np_array(input_string):
    
    # Split the input string using the division symbols 'n' and '\t'
    
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    
    #Convert string elements to integers
    #result_2d_list = [[int(item) for item in sublist] for sublist in result_2d_list]

    return result_2d_list
string_to_np_array(file)
65/18: help(polyfit)
65/19: help("polyfit")
65/20: help("scipy.polyfit")
65/21: help("numpy.polyfit")
65/22:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file)
65/23: help("complex")
65/24:
import numpy as np
import scipy
import built-ins
65/25:
import numpy as np
import scipy
import builtins
65/26: a = complex(2, 3)
65/27:
a = complex(2, 3)
a
65/28:
a = complex(2, 3)
abs(a)
65/29:
a = complex(2, 3)
a+a
65/30: help("ln")
65/31: help("log")
65/32: help("log")
65/33: help("lg")
65/34: help("logarythm")
65/35: help("logarithm")
65/36: help("log")
65/37: log(5)
65/38: math.log(5)
65/39:
import numpy as np
import scipy
import builtins
import math
65/40: math.log(5)
65/41: angle = 40*2*math.pi/360
65/42:
angle = 40*2*math.pi/360
angle
65/43:
angle = 40*2*math.pi/360
kz1  = sqrt(e1-e1*pow(sin(angle), 2))
65/44:
angle = 40*2*math.pi/360
kz1  = np.sqrt(e1-e1*pow(sin(angle), 2))
65/45:
a = complex(2, 3)
sin(a)
65/46:
a = complex(2, 3)
np.sin(a)
65/47:
a = complex(2, 3)
np.log(a)
65/48: math.j
65/49:
a = complex(0, 1)
a
65/50:
angle = 40*2*math.pi/360
kz1  = np.sqrt(e1-e1*pow(sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(sin(angle), 2))
kz3 = np.sqrt(e3-e1*pow(sin(angle), 2))



abs(d  + (0.5)kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3)/(kz2*e3-kz3)/(kz1+e1*kz2)  ))
65/51:
angle = 40*2*math.pi/360
kz1  = np.sqrt(e1-e1*pow(sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(sin(angle), 2))
kz3 = np.sqrt(e3-e1*pow(sin(angle), 2))



abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3)/(kz2*e3-kz3)/(kz1+e1*kz2)  ))
65/52: help("scipy.optimize.curve_fit")
65/53:
angle = 40*2*math.pi/360
kz1  = np.sqrt(e1-e1*pow(sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(sin(angle), 2))
kz3 = np.sqrt(e3-e1*pow(sin(angle), 2))

e1 =
e2 =

def f(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3)/(kz2*e3-kz3)/(kz1+e1*kz2)  ))
65/54:
angle = 40*2*math.pi/360
kz1  = np.sqrt(e1-e1*pow(sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(sin(angle), 2))
kz3 = np.sqrt(e3-e1*pow(sin(angle), 2))

e1 = 1
e2 = 1

def f(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3)/(kz2*e3-kz3)/(kz1+e1*kz2)  ))
65/55:
angle = 40*2*math.pi/360
kz1  = np.sqrt(e1-e1*pow(sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(sin(angle), 2))
kz3 = np.sqrt(e3-e1*pow(sin(angle), 2))

e1 = 1
e2 = 1

def f(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3)/(kz2*e3-kz3)/(kz1+e1*kz2)  ))
65/56:
angle = 40*2*math.pi/360
e1 = 1
e2 = 1
kz1  = np.sqrt(e1-e1*pow(sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(sin(angle), 2))
kz3 = np.sqrt(e3-e1*pow(sin(angle), 2))



def f(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3)/(kz2*e3-kz3)/(kz1+e1*kz2)  ))
65/57:
angle = 40*2*math.pi/360
e1 = 1
e2 = 1
kz1  = np.sqrt(e1-e1*pow(np.sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(np.sin(angle), 2))
kz3 = np.sqrt(e3-e1*pow(np.sin(angle), 2))



def f(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3)/(kz2*e3-kz3)/(kz1+e1*kz2)  ))
65/58:
angle = 40*2*math.pi/360
e1 = 1
e2 = 1
kz1  = np.sqrt(e1-e1*pow(np.sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(np.sin(angle), 2))
def kz3(e3):
    return np.sqrt(e3-e1*pow(np.sin(angle), 2))



def f(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))
65/59:
angle = 40*2*math.pi/360
e1 = 1
e2 = 1
kz1  = np.sqrt(e1-e1*pow(np.sin(angle), 2))
kz2 = np.sqrt(e2-e1*pow(np.sin(angle), 2))
def kz3(e3):
    return np.sqrt(e3-e1*pow(np.sin(angle), 2))



def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))

scipy.optimize.curve_fit(optim, e3)
65/60: help("least_squares")
65/61: help("np.least_squares")
65/62: help("scipy.least_squares")
65/63:
angle = 40*2*math.pi/360
e1 = 1
e2 = 1
kx = np.sqrt(e2*e3/(e2+e3))
kz1  = kx*np.sqrt(e1-e1*pow(np.sin(angle), 2))
kz2 = kx*np.sqrt(e2-e1*pow(np.sin(angle), 2))
def kz3(e3):
    return kx*np.sqrt(e3-e1*pow(np.sin(angle), 2))



def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))

scipy.optimize.curve_fit(optim, e3)
65/64:
angle = 40*2*math.pi/360
e1 = 1
e2 = 1
def kx(e3):
    return np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(angle), 2))

def kz2(e3)
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))

scipy.optimize.curve_fit(optim, e3)
65/65:
angle = 40*2*math.pi/360
e1 = 1
e2 = 1
def kx(e3):
    return np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(angle), 2))

def kz2(e3):
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))

scipy.optimize.curve_fit(optim, e3)
65/66:
angle = 40*2*math.pi/360
e1 = 1
e2 = 1
w_len = 197*pow(10, -6)
def kx(e3):
    return 2*np.pi/w_len/np.sqrt(e2)*np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(angle), 2))

def kz2(e3):
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))
65/67:
inc_angle = 40*2*math.pi/360
e1 = 1
e2 = 1
w_len = 197*pow(10, -6)
def kx(e3):
    return 2*np.pi/w_len/np.sqrt(e2)*np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(inc_angle), 2))

def kz2(e3):
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(inc_angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(inc_angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))
65/68:
inc_angle = 40*2*math.pi/360
angle = np.pi/4-np.arcsin(sin(np.pi/4-inc_angle)/np.sqrt(e1))
e1 = 1
e2 = 1
w_len = 197*pow(10, -6)
def kx(e3):
    return 2*np.pi/w_len/np.sqrt(e2)*np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(angle), 2))

def kz2(e3):
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))
65/69:
inc_angle = 40*2*math.pi/360
angle = np.pi/4-np.arcsin(np.sin(np.pi/4-inc_angle)/np.sqrt(e1))
e1 = 1
e2 = 1
w_len = 197*pow(10, -6)
def kx(e3):
    return 2*np.pi/w_len/np.sqrt(e2)*np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(angle), 2))

def kz2(e3):
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))
69/1:
import numpy as np
import scipy
import builtins
import math
69/2: file = open("table.txt", "r").read()
69/3: file
69/4:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file)
69/5:
e4 = complex(-17.3, 7.12)
#InSb
69/6:
inc_angle = 40*2*math.pi/360
angle = np.pi/4-np.arcsin(np.sin(np.pi/4-inc_angle)/np.sqrt(e1))
e1 = 1
e2 = 1

w_len = 197*pow(10, -6)
def kx(e3):
    return 2*np.pi/w_len/np.sqrt(e2)*np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(angle), 2))

def kz2(e3):
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))
69/7:
inc_angle = 40*2*math.pi/360
angle = np.pi/4-np.arcsin(np.sin(np.pi/4-inc_angle)/np.sqrt(e1))
e1 = 1
e2 = 1

w_len = 197*pow(10, -6)
def kx(e3):
    return 2*np.pi/w_len/np.sqrt(e2)*np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(angle), 2))

def kz2(e3):
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))
72/1:
import scipy.io
mat = scipy.io.loadmat('file.mat')
72/2:
import scipy.io
mat = scipy.io.loadmat('"C:\Users\belco\OneDrive\ФФ\Course_Optics\2024.03.15_SPR on InSb+Gr_197 um\01_InSb_gap-0.binary.bgData"')
72/3:
import scipy.io
mat = scipy.io.loadmat('C:\Users\belco\OneDrive\ФФ\Course_Optics\2024.03.15_SPR on InSb+Gr_197 um\01_InSb_gap-0.binary.bgData')
72/4:
import scipy.io
mat = scipy.io.loadmat("C:\Users\belco\OneDrive\ФФ\Course_Optics\2024.03.15_SPR on InSb+Gr_197 um\01_InSb_gap-0.binary.bgData")
72/5:
import scipy.io
mat = scipy.io.loadmat("C:\Users\belco\OneDrive\ФФ\Course_Optics\2024_03_15_SPR_on_InSb+Gr_197um\01_InSb_gap-0.binary.bgData)
72/6:
import scipy.io
mat = scipy.io.loadmat("C:\Users\belco\OneDrive\ФФ\Course_Optics\2024_03_15_SPR_on_InSb_Gr_197um\01_InSb_.binary.bgData")
72/7:
import scipy.io
mat = scipy.io.loadmat("C:\Users\belco\OneDrive\ФФ\Course_Optics\2024_03_15_SPR_on_InSb_Gr_197um\01_InSb_.binary.bgData")
72/8:
import scipy.io
mat = scipy.io.loadmat("C:\Users\belco\OneDrive\ФФ\Course_Optics\2024_03_15_SPR_on_InSb_Gr_197um\01_InSb_.binary.bgData")
75/1:
kz_1=sqrt(eps_1)*cos(teta);
kz_2=sqrt(eps_2-eps_1*sin(teta).^2);
kz_3=sqrt(eps_3-eps_1*sin(teta).^2);
kz_4=sqrt(eps_4-eps_1*sin(teta).^2);

%Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2);
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3);
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4);

%Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2); %???
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3);
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4);

%Матрица преобразования
S1=[1/t_12 r_12/t_12; r_12/t_12 1/t_12];
S3=[exp(-i*(2*pi/wavelength)*kz_3*d_3)/t_34 r_34*exp(-i*(2*pi/wavelength)*kz_3*d_3)/t_34; r_34*exp(i*(2*pi/wavelength)*kz_3*d_3)/t_34 exp(i*(2*pi/wavelength)*kz_3*d_3)/t_34];
75/2:
kz_1=sqrt(eps_1)*cos(teta)
kz_2=sqrt(eps_2-eps_1*sin(teta).^2)
kz_3=sqrt(eps_3-eps_1*sin(teta).^2)
kz_4=sqrt(eps_4-eps_1*sin(teta).^2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=[1/t_12 r_12/t_12; r_12/t_12 1/t_12]
S3=[exp(-i*(2*pi/wavelength)*kz_3*d_3)/t_34 r_34*exp(-i*(2*pi/wavelength)*kz_3*d_3)/t_34; r_34*exp(i*(2*pi/wavelength)*kz_3*d_3)/t_34 exp(i*(2*pi/wavelength)*kz_3*d_3)/t_34]
75/3: 2**3
75/4: 2**4
75/5:
n_1=1.531-i*0.002 # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=2.56-i*0.002 # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10^8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/(w**2+i*gp*w)+Al*wl**2/(wl^2-w**2-i*gl*w) 

d_2=0*10^(-6):1*10^(-6):450*10^(-6)  #величина зазора между призмой и InSb
d_3=4.7*10^(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10^12:0.01*10^12:2*10^12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl^2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/6:
kz_1=sqrt(eps_1)*cos(teta)
kz_2=sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=[1/t_12 r_12/t_12; r_12/t_12 1/t_12]
S3=[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34 r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34; r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34 exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]
75/7:
n_1=1.531-i*0.002 # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=2.56-i*0.002 # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/(w**2+i*gp*w)+Al*wl**2/(wl**2-w**2-i*gl*w) 

d_2=0*10**(-6):1*10**(-6):450*10**(-6)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/8:
kz_1=sqrt(eps_1)*cos(teta)
kz_2=sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=[1/t_12 r_12/t_12; r_12/t_12 1/t_12]
S3=[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34 r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34; r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34 exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]
75/9:
kz_1=sqrt(eps_1)*cos(teta)
kz_2=sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12 1/t_12]])
S3=[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34 r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34; r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34 exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]
75/10:
kz_1=sqrt(eps_1)*cos(teta)
kz_2=sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34 r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34; r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34 exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]
75/11:
kz_1=sqrt(eps_1)*cos(teta)
kz_2=sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/12:
kz_1=np.sqrt(eps_1)*cos(teta)
kz_2=sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/13:
import numpy as np
import scipy
import builtins
import math
75/14:
kz_1=np.sqrt(eps_1)*cos(teta)
kz_2=sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/15:
kz_1=np.sqrt(eps_1)*cos(teta)
kz_2=np.sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/16:
n_1=complex(1.531, -*0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=2.56-i*0.002 # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/(w**2+i*gp*w)+Al*wl**2/(wl**2-w**2-i*gl*w) 

d_2=0*10**(-6):1*10**(-6):450*10**(-6)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/17:
n_1=complex(1.531, -0.002 # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=2.56-i*0.002 # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/(w**2+i*gp*w)+Al*wl**2/(wl**2-w**2-i*gl*w) 

d_2=0*10**(-6):1*10**(-6):450*10**(-6)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/18:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=2.56-i*0.002 # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/(w**2+i*gp*w)+Al*wl**2/(wl**2-w**2-i*gl*w) 

d_2=0*10**(-6):1*10**(-6):450*10**(-6)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/19: np.linspace(1, 13, 10)
75/20: np.linspace(1, 13, 1)
75/21: np.linspace(1, 13, 13)
75/22:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=2.56-i*0.002 # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/(w**2+i*gp*w)+Al*wl**2/(wl**2-w**2-i*gl*w) 

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/23:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/(w**2+i*gp*w)+Al*wl**2/(wl**2-w**2-i*gl*w) 

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/24:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/25:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/26:
kz_1=np.sqrt(eps_1)*cos(teta)
kz_2=np.sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/27:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/28:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/29:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/30: np.exp(1)
75/31:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/32:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/33:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/34:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*exp(-i*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34, exp(i*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/35:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/36:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/37:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/38:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/39:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
75/40:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
75/41:
for j = in range(len(d_2)-1)   #1:1:length(d_2)
    S2=np.array([exp(-i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 r_23*exp(-i*(2*pi/wavelength)*kz_2*d_2(j))/t_23; r_23*exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/42:
for j = in range(len(d_2)-1)   #1:1:length(d_2)
    S2=np.array([exp(-i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 r_23*exp(-i*(2*pi/wavelength)*kz_2*d_2(j))/t_23; r_23*exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/43:
for j = in range(len(d_2)-1)   #1:1:length(d_2)
    S2=np.array([exp(-i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 r_23*exp(-i*(2*pi/wavelength)*kz_2*d_2(j))/t_23 
                 r_23*exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/44:
a = np.array([1, 2, 3, 4])
a.len()
75/45:
a = np.array([1, 2, 3, 4])
len(a)
75/46:
a = np.array([1, 2, 3, 4])
np.len(a)
75/47: d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)
75/48:
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450) 
len(d_2)
75/49:
for j = in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([exp(-i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 r_23*exp(-i*(2*pi/wavelength)*kz_2*d_2(j))/t_23 
                 r_23*exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/50:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([exp(-i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 r_23*exp(-i*(2*pi/wavelength)*kz_2*d_2(j))/t_23 
                 r_23*exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/51:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 r_23*exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j))/t_23 
                 r_23*exp(complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/52:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 r_23*np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j))/t_23 
                 r_23*np.exp(complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 np.exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/53:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 r_23*np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j))/t_23 
                 r_23*np.exp(complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 np.exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/54:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 r_23*np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j))/t_23 
                 r_23*np.exp(complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23 
                 np.exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/55:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j))/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23, 
                 np.exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23]])
    S=S1*S2*S3
    R(j)=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/56:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j))/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23, 
                 np.exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23]])
    S=S1*S2*S3
    R[j]=abs(S[2][1]/S[1][1]).


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/57:
a = np.array([[1, 2], [3, 4]])
np.len(a)
75/58:
a = np.array([[1, 2], [3, 4]])
a[1][1]
75/59:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j))/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23, 
                 np.exp(i*(2*pi/wavelength)*kz_2*d_2(j+1))/t_23]])
    S=S1*S2*S3
    R[j]=abs(S[2][1]/S[1][1])


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/60:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2(j+1))/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2(j))/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2(j+1))/t_23, 
                 np.exp(i*(2*np.pi/wavelength)*kz_2*d_2(j+1))/t_23]])
    S=S1*S2*S3
    R[j]=abs(S[2][1]/S[1][1])


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/61:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(i*(2*np.pi/wavelength)*kz_2*d_2[j+]))/t_23]])
    S=S1*S2*S3
    R[j]=abs(S[2][1]/S[1][1])


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/62:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(i*(2*np.pi/wavelength)*kz_2*d_2[j+]))/t_23]])
    S=S1*S2*S3
    R[j]=abs(S[2][1]/S[1][1])


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/63:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(i*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    R[j]=abs(S[2][1]/S[1][1])


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/64:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    R[j]=abs(S[2][1]/S[1][1])


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])

fileID = fopen('R_spp_InSb-PMMA_195 um_teta-42.21.dat','w');
fprintf(fileID,'%6s %18s\n','d','R_spp');
fprintf(fileID,'%e\t%e\n',Data);
fclose(fileID);
75/65:
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    R[j]=abs(S[1][0]/S[0][0])


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/66:
R = np.empty()
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    R.append(abs(S[1][0]/S[0][0]))


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/67: np.empty(0)
75/68: np.empty(0).append(1)
75/69: a=np.empty(0)
75/70:
a=np.empty(0)
a.append(1)
75/71:
a=np.empty(0)
a.np.append(1)
75/72:
a=np.empty(0)
np.concat(a, [1])
75/73: help("numpy.concat")
75/74: help("numpy.append")
75/75:
a=np.empty(0)
np.append(a, [1])
75/76:
R = np.empty()
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    np.append(R, abs(S[1][0]/S[0][0]))


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/77:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    np.append(R, abs(S[1][0]/S[0][0]))


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/78:
import numpy as np
import scipy
import builtins
import math
import matplotlib.pyplot as plt
75/79:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    np.append(R, abs(S[1][0]/S[0][0]))


plt.pyplot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/80:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    np.append(R, abs(S[1][0]/S[0][0]))


plt.plot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/81:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    np.append(R, [abs(S[1][0]/S[0][0]]))


plt.plot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/82:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    np.append(R, [abs(S[1][0]/S[0][0])])


plt.plot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/83:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1*S2*S3
    np.append(R, [abs(S[1][0]/S[0][0])])


plt.plot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/84: help("@")
75/85: help("np.@")
75/86:
a = np.array([[1, 2], [3, 4]])
a@a
75/87:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


plt.plot((d_2-d_3)*10**6, R)

Data=np.array([(d_2-d_3)*10**6, R])
75/88:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
                 [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(R)
75/89:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(R)
75/90:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(S)
75/91:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(S1)
75/92:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(S2)
75/93:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(S3)
75/94:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(S)
75/95:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(S1)
75/96:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(S3)
75/97:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(R)
75/98:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(np.aooend(R, [9])
75/99:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(np.append(R, [9])
75/100:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(np.append(R, 9)
75/101:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, [abs(S[1][0]/S[0][0])])


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(np.append(R, 9))
75/102:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(np.append(R, 9))
75/103:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(R)
75/104:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    print(j)
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(R)
75/105:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    print(abs(S[1][0]/S[0][0]))
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
print(R)
75/106:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
np.append(R, 1)
np.append(R, 2)
print(R)
75/107:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
np.append(R, 1)
#np.append(R, 2)
print(R)
75/108:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
np.append(R, [1])
#np.append(R, 2)
print(R)
75/109:
R = np.empty(0)
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
np.append(R, [1])
np.append(R, [2])
print(R)
75/110: np.empty(1)
75/111: np.array([])
75/112:
R = np.array([])
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])

print(R)
75/113:
R = np.array([])
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])

print(R)
75/114:
a = np.array([])
np.append(a, 8)
75/115:
a = np.array([])
np.append(a, 8)
np.append(a, 9)
75/116:
a = np.array([])
np.append(a, [8])
np.append(a, 9)
75/117: help("np.append")
75/118: help("np.append")
75/119: help("numpy.append")
75/120:
a = np.array([1, 2])
a++a
75/121:
a = np.array([1, 2])
a+a
75/122:
R = np.array([])
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    np.append(R, abs(S[1][0]/S[0][0]))


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])

print(R)
75/123: [1, 2] + [3]
75/124:
R = []
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
     [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    R + [abs(S[1][0]/S[0][0])]


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])

print(R)
75/125:
R = []
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


#plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])

print(R)
75/126:
R = []
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


plt.plot((d_2-d_3)*10**6, R)

#Data=np.array([(d_2-d_3)*10**6, R])
75/127:
R = []
for j in range(len(d_2)-1):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


#plt.plot((d_2-d_3)*10**6, R)
len(d_2)

#Data=np.array([(d_2-d_3)*10**6, R])
75/128: print(range(5))
75/129:
for i in range(5)
    print(i)
75/130:
for i in range(5)6
    print(i)
75/131:
for i in range(5):
    print(i)
75/132:
R = []
for j in range(len(d_2)):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j+1])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


#plt.plot((d_2-d_3)*10**6, R)


#Data=np.array([(d_2-d_3)*10**6, R])
75/133:
R = []
for j in range(len(d_2)):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


#plt.plot((d_2-d_3)*10**6, R)


#Data=np.array([(d_2-d_3)*10**6, R])
75/134:
R = []
for j in range(len(d_2)):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


plt.plot((d_2-d_3)*10**6, R)


#Data=np.array([(d_2-d_3)*10**6, R])
77/1:
import numpy as np
import scipy
import math
import matplotlib.pyplot as plt
77/2:
import numpy as np
import scipy
import math
import matplotlib.pyplot as plt
77/3: file = open("table.txt", "r").read()
77/4: file
77/5:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file)
77/6:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(-17.3, 7.12) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
77/7:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700
eps_4=complex(-17.3, 7.12)

"""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
"""

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
77/8:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::3]
77/9:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::3]
d_2
77/10:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::3]
Data
d_2
77/11:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::3]
Data
#d_2
77/12:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::3]
#Data
d_2
77/13:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[:3]
#Data
d_2
77/14:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[][::3]
Data
d_2
77/15:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)

Data
#d_2
77/16:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)

Data[0][0]
#d_2
77/17:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)

Data[::][::3]
#d_2
77/18:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)

Data[::][::]
#d_2
77/19:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)

Data[::][::3]
#d_2
77/20:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)

Data[::][3]
#d_2
77/21:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)

Data[::][2]
#d_2
77/22:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)

Data[::][2]
#d_2
77/23:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
print(Data[::][2])
#d_2
77/24:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
print(Data[2][::])
#d_2
77/25:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
print(Data[::][::])
#d_2
77/26:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
print(Data[::][0])
#d_2
77/27:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
print(Data[0][::])
#d_2
77/28:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
print(Data[::, 3])
#d_2
77/29:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
print(Data[::, 2])
#d_2
77/30:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
print(Data[::, 0])
#d_2
77/31:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
print(Data)
d_2 = Data[::, 0]
R_In = Data[::, 1]
R_Gr = Data[::, 2]
77/32:
def reflect(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
    eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
    eps_2=1 # диэлектрическая проницаемость воздуха
    eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700
    eps_4=complex(-17.3, 7.12) #InSb

    d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
    d_3=4.7*10**(-6) 
    teta=42.21*np.pi/180  #угол падения в призме
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
77/33:
def reflect(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
77/34:
d = linspace(0, 450*10**(-6), 450)
plt.plot(d, reflect3)
77/35:
d = np.linspace(0, 450*10**(-6), 450)
plt.plot(d, reflect3)
77/36:
d = np.linspace(0, 450*10**(-6), 450)
plt.plot(d, reflect3(d))
77/37:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
77/38:
d = np.linspace(0, 450*10**(-6), 450)
plt.plot(d, reflect3(d))
77/39:
d = np.linspace(0, 450*10**(-6), 450)
reflect3(1)
#plt.plot(d, reflect3(d))
77/40:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
77/41:
d = np.linspace(0, 450*10**(-6), 450)
reflect3(1)
#plt.plot(d, reflect3(d))
77/42:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
77/43:
d = np.linspace(0, 450*10**(-6), 450)
reflect3(1)
#plt.plot(d, reflect3(d))
77/44:
d = np.linspace(0, 450*10**(-6), 450)
reflect3(d)
#plt.plot(d, reflect3(d))
77/45:
d = np.linspace(0, 450*10**(-6), 450)

plt.plot(d, reflect3(d))
77/46:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta=42.21*np.pi/180  #угол падения в призме
d_3 = # толщина графена
77/47:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta=42.21*np.pi/180  #угол падения в призме
wavelength = 
d_3 = 17*10**(-9) # толщина графена
77/48:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta=42.21*np.pi/180  #угол падения в призме
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
77/49:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
77/50:
d = np.linspace(0, 450*10**(-6), 450)

plt.plot(d, reflect3(d))
77/51:
d = np.linspace(0, 450, 450)

plt.plot(d, reflect3(d))
77/52:
d = np.linspace(0, 450*10**(-6), 450)

plt.plot(d, reflect3(d))
77/53: np.linspace(0, 2, 2)
77/54:
d = np.linspace(0, 450, 450)

plt.plot(d, reflect3(d))
77/55:
d = np.linspace(0, 450*10**(-6), 450)

plt.plot(d, reflect3(d))
77/56: np.linspace(0, 2, 1)
77/57: np.linspace(0, 4, 1)
77/58: np.linspace(0, 4, 1)
77/59: np.linspace(0, 1, 4)
77/60: np.linspace(0, 4, 4)
77/61: np.linspace(0, 4, 5)
77/62:
d = np.linspace(0, 450, 451)

plt.plot(d, reflect3(d))
77/63:
d = np.linspace(1, 450, 450)

plt.plot(d, reflect3(d))
77/64:
R = []
for j in range(len(d_2)):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


plt.plot((d_2-d_3)*10**6, R)

print(d_2-d_3)*10**6
#Data=np.array([(d_2-d_3)*10**6, R])
77/65:
d = np.linspace(1, 450, 450)

reflect(d)
77/66:
d = np.linspace(1, 450, 450)

reflect3(d)
77/67:
d = np.linspace(1, 450, 450)
print(d)
reflect3(d)
77/68:
d = np.linspace(1, 450, 450)
print(d)
reflect3(d*10**(-6))
77/69:
d = np.linspace(0, 450, 451)
print(d)
reflect3(d*10**(-6))
plt.plot(d)
77/70:
d = np.linspace(0, 450, 451)
print(d)

plt.plot(d, reflect3(d*10**(-6)))
77/71:
d = np.linspace(0, 450, 451)*10**(-6)
print(d)

plt.plot(d, reflect3(d))
77/72:
d = np.linspace(0, 450, 451)*10**(-6)

print(reflect(d))
plt.plot(d, reflect3(d))
77/73:
d = np.linspace(0, 450, 451)*10**(-6)

print(reflect3(d))
plt.plot(d, reflect3(d))
77/74:
d = np.linspace(0, 450, 451)*10**(-6)

print(reflect4(d))
plt.plot(d, reflect3(d))
77/75:
d = np.linspace(0, 450, 451)*10**(-6)

print(reflect4(2.56, -0.002, d))
plt.plot(d, reflect3(d))
77/76:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
77/77:
d = np.linspace(0, 450, 451)*10**(-6)

print(reflect4(2.56, -0.002, d))
plt.plot(d, reflect3(d))
77/78:
d = np.linspace(0, 450, 451)*10**(-6)

print(reflect3(2.56, -0.002, d))
plt.plot(d, reflect3(d))
77/79:
d = np.linspace(0, 450, 451)*10**(-6)

print(reflect4(2.56, -0.002, d))
plt.plot(d, reflect3(d))
77/80:
d = np.linspace(0, 450, 451)*10**(-6)

print(reflect3(d))
plt.plot(d, reflect3(d))
79/1:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
79/2:
import numpy as np
import scipy
import math
import matplotlib.pyplot as plt
79/3:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta=42.21*np.pi/180  #угол падения в призме
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/4: file = open("table.txt", "r").read()
79/5: file
79/6:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
79/7:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
d_2
79/8:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta =  np.pi/4-np.arcsin(np.sin(np.pi/4-inc_angle)/n_1.real #угол падения на выходе из призмы            
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/9:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real #угол падения на выходе из призмы            
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/10:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы            
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/11:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
teta
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/12:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
print(teta)
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/13:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
print(teta)*180/np.pi
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/14:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
print(teta*180/np.pi)
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/15:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In
79/16:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_gr[-1]
R_In
79/17:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
R_In
79/18:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
R_In
79/19:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
R_Gr
79/20:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
79/21:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_Gr)
79/22:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
79/23:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d))
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
plt.show()
79/24:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/25: file = open("table.txt", "r").read()
79/26: file
79/27:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/28:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/29:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d))
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
plt.show()
79/30:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/31:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/32:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d))
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
plt.show()
79/33:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/34:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--r')
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
plt.show()
79/35:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--r')
plt.plot(d_2, R_In, 'Ob')
plt.plot(d_2, R_Gr, 'vR')
plt.show()
79/36:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--r')
plt.plot(d_2, R_In, 'Ob')
plt.plot(d_2, R_Gr, 'Vr')
plt.show()
79/37:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--r')
plt.plot(d_2, R_In, 'Ob')
plt.plot(d_2, R_Gr, 'vr')
plt.show()
79/38:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--r')
plt.plot(d_2, R_In, 'ob')
plt.plot(d_2, R_Gr, 'vr')
plt.show()
79/39:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--r')
plt.plot(d_2, R_In, 'gr')
plt.plot(d_2, R_Gr, 'vr')
plt.show()
79/40:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--r')
plt.plot(d_2, R_In, 'vg')
plt.plot(d_2, R_Gr, 'vr')
plt.show()
79/41:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b')
plt.plot(d_2, R_In, 'vg')
plt.plot(d_2, R_Gr, 'vr')
plt.show()
79/42:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'theory')
plt.plot(d_2, R_In, 'vr', label = '')
plt.plot(d_2, R_Gr, 'vg')

plt.legend(fontsize=14)
plt.show()
79/43:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/44:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
#teta_0=41*np.pi/180  #угол падения на призму
teta_0=42*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/45: file = open("table.txt", "r").read()
79/46: file
79/47:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/48:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/49:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/50:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
#teta_0=41*np.pi/180  #угол падения на призму
teta_0=40*np.pi/180  #угол падения на призму
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/51: file = open("table.txt", "r").read()
79/52: file
79/53:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/54:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/55:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/56:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/57: file = open("table.txt", "r").read()
79/58: file
79/59:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/60:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/61:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/62:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/63: file = open("table.txt", "r").read()
79/64: file
79/65:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/66:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/67:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/68:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/69:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
#teta_0=41*np.pi/180  #угол падения на призму ??????
teta_0=40.5*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/70: file = open("table.txt", "r").read()
79/71: file
79/72:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/73:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/74:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/75:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory (teta = 40.5)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/76:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
#teta_0=41*np.pi/180  #угол падения на призму ??????
teta_0=41.1*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/77: file = open("table.txt", "r").read()
79/78: file
79/79:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/80:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/81:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory (teta = 40.5)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/82:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
#teta_0=41*np.pi/180  #угол падения на призму ??????
teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/83: file = open("table.txt", "r").read()
79/84: file
79/85:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/86:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/87:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory (teta = 40.5)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/88:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
teta = teta_0
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/89: file = open("table.txt", "r").read()
79/90: file
79/91:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/92:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/93:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d, reflect3(d), '--b', label = 'Theory (teta = 40.5)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/94:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d_2, reflect3(d), '--b', label = 'Theory (teta = 40.5)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/95:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory (teta = 40.5)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/96:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/97: file = open("table.txt", "r").read()
79/98: file
79/99:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
R_Gr = Data[::, 2]
R_In /= R_In[-1]
R_Gr /= R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/100:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(e3_re, e3_im, d):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/101:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/102:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/103:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/104: plt.plot(d_2, reflect4())
79/105:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_gr - 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/106:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/107:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)
79/108:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    e3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/109:
d = np.linspace(0, 450, 451)*10**(-6)

#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')

plt.legend(fontsize=14)
plt.show()
79/110: sp.optimize.curve_fit(reflect4, d_2, R_Gr, sigma = 2)
79/111: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, sigma = 2)
79/112: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, sigma = True)
79/113: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, sigma = 'True')
79/114: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, sigma = True)
79/115: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, sigma = None)
79/116: scipy.optimize.curve_fit(reflect4, d_2, R_Gr)
79/117:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
79/118: scipy.optimize.curve_fit(reflect4, d_2, R_Gr)
79/119: reflect4(d_2, 1, 1)
79/120:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/121: reflect4(d_2, 1, 1)
79/122: scipy.optimize.curve_fit(reflect4, d_2, R_Gr)
79/123: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = (-1000, 1000))
79/124: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = (-10, 10))
79/125: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = (1, 10))
79/126: scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = (1, 100))
79/127: scipy.optimize.curve_fit(reflect4, d_2, R_Gr)
79/128: scipy.optimize.curve_fit(reflect4, d_2, R_Gr)
79/129: scipy.optimize.curve_fit(reflect4, d_2, R_Gr).zip
79/130:
scipy.optimize.curve_fit(reflect4, d_2, R_Gr)
help("tuple")
79/131: scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0]
79/132:
scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0]
eps_3 = complex(scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/133: eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/134:
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
eps_3
79/135:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/136:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
teta
79/137:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = R_In.argsort
d_min
79/138:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = R_In.argsort
print(d_min)
79/139:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = R_In.argsort
R_In.argsort[0]
79/140:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = R_In.argsort
d_min[0]
79/141:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = np.argsort(In_Sb)
d_min[0]
79/142:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = np.argsort(R_In)
d_min[0]
79/143:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = np.argsort(R_In)
d_min[1]
79/144:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = np.argsort(R_In)
d_min[2]
79/145:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = np.argsort(R_In)
d_min[3]
79/146:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = np.argsort(R_In)
d_min[3]
79/147:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_2[19]
79/148:
scipy.optimize.curve_fit(reflect4, d_2, R_Gr
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/149:
scipy.optimize.curve_fit(reflect4, d_2, R_Gr)
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/150:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/151:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/152: help("complex")
79/153:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag))

plt.legend(fontsize=14)
plt.show()
79/154:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_In
79/155:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/R_In[-1]
R_Gr = (R_Gr - noise_Gr)/R_Gr[-1]
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/156:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/157:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/158:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/159:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/160:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag))

plt.legend(fontsize=14)
plt.show()
79/161:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag))

plt.legend(fontsize=14)
plt.show()
79/162:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory InSb+graphene')

plt.legend(fontsize=14)
plt.show()
79/163:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

plt.legend(fontsize=14)
plt.show()
79/164:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--b', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

plt.legend(fontsize=9)
plt.show()
79/165:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

plt.legend(fontsize=9)
plt.show()
79/166:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

plt.errorbar(x, y, yerr=yerr, marker='o', linestyle='none',
    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/167:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

plt.errorbar(d_2, R_InSb, yerr=0.1, marker='o', linestyle='none',
    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/168:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/169:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/170:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/171:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
d_min = np.ar
print(teta*180/np.pi)
79/172:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
79/173:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
d_min = np.ar
print(teta*180/np.pi)
79/174:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/175:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4=complex(-17.3, 7.12) #InSb
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/176: file = open("table.txt", "r").read()
79/177: file
79/178:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/179:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/180:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/181:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/182:
#n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
#eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
#eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
79/183:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4 = compex(-18.474508935284483+0.006568625288807081j)
#eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/184:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4 = complex(-18.474508935284483+0.006568625288807081j)
#eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/185:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4 = complex(-18.474508935284483+0.006568625288807081j)
#eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/186: file = open("table.txt", "r").read()
79/187: file
79/188:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/189:


#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
79/190:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/191:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/192:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/193:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/194:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4 = complex(-18.474508935284483+0.006568625288807081j)
#eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/195: file = open("table.txt", "r").read()
79/196: file
79/197:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/198:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/199:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/200:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/201:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(eps_4)
79/202:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_4 = complex(-18.474508935284483+0.006568625288807081j)
#eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/203: file = open("table.txt", "r").read()
79/204: file
79/205:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/206:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/207:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/208:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/209:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j)
eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180  #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/210: file = open("table.txt", "r").read()
79/211: file
79/212:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/213:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/214:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/215:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/216:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
teta = 42.16 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/217:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
print(teta*180/np.pi)
79/218:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
79/219: file = open("table.txt", "r").read()
79/220: file
79/221:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/222:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
79/223:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/224:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/225:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/226:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/227:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/228:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/229:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/230:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/231:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/232:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41.2*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
79/233: file = open("table.txt", "r").read()
79/234: file
79/235:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/236:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
79/237:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/238:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/239:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/240:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена 
#_min = np.ar
79/241: file = open("table.txt", "r").read()
79/242: file
79/243:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/244:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
79/245:
def reflect3(d):
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)


#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
      [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
      np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/246:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/247:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/248:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
np.len(reflect3(d_2))
79/249:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
len(reflect3(d_2))
79/250:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2)))
79/251:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2[16])
79/252:
d*=10**6

#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2[16])
79/253:
d_2*=10**6

#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2[16])
79/254:


#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2[16])
79/255:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/256:
#print(reflect3(d))
plt.plot(d_2, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2, R_In, 'vr', label = 'InSb')
plt.plot(d_2, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2[16])
79/257:
#print(reflect3(d))
plt.plot(d_2*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2[16])
79/258:
#print(reflect3(d))
plt.plot(d_2*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(R_In))
print(np.argsort(reflect3(d_2)))
79/259:
#print(reflect3(d))
plt.plot(d_2*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
np.argsort(R_In)[0]
np.argsort(reflect3(d_2)[0]
79/260:
#print(reflect3(d))
plt.plot(d_2*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
np.argsort(R_In)[0]
np.argsort(reflect3(d_2))[0]
79/261:
#print(reflect3(d))
plt.plot(d_2*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/262:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot(d_2*10**6+delta, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/263:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot(d_2*10**6+delta, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/264:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot(d_2*10**6+delta, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/265:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot(d_2+delta)*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/266:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot(d_2*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/267:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/268:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/269:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/270:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/271:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/272:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, teta):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/273:
print(scipy.optimize.curve_fit(reflect3, d_2))
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/274:
print(scipy.optimize.curve_fit(reflect3, d_2, R_In))
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/275:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/276:
print(scipy.optimize.curve_fit(reflect3, d_2, R_In))
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/277:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/278:
print(scipy.optimize.curve_fit(reflect3, d_2, R_In))
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/279:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/280:
print(scipy.optimize.curve_fit(reflect3, d_2, R_In)[0])
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/281:
print(scipy.optimize.curve_fit(reflect3, d_2, R_In))
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/282:
print(scipy.optimize.curve_fit(reflect3, d_2, R_In))
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/283:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/284:
print(scipy.optimize.curve_fit(reflect3, d_2, R_In))
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/285:
print(scipy.optimize.curve_fit(reflect3, d_2, R_In))
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/286:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/287:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/288:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23,
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/289:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/290:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/291:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/292:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/293:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23,
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/294:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23,
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/295:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/296:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/297:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/298:
print( np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]]))
79/299:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/300:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23,
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        print(S2)
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/301:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/302:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/303:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/304:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/305:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
teta
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/306:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]

#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/307:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/308:
kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
79/309:
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
79/310:
angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
79/311:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
79/312:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S2)
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        #S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
79/313:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1)
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        #S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
79/314:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S2)
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        #S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
79/315:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1@S2)
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        #S=S1@S2
        #R += [abs(S[1][0]/S[0][0])]
79/316:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(np.size(S1), np.size(S2)
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        #S=S1@S2
        #R += [abs(S[1][0]/S[0][0])]
79/317:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(np.size(S1), np.size(S2))
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        #S=S1@S2
        #R += [abs(S[1][0]/S[0][0])]
79/318:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1@S2)
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        #S=S1@S2
        #R += [abs(S[1][0]/S[0][0])]
79/319:
    angle = teta
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1@S2)
#Расчёт R    
    R = []
79/320:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1@S2)
#Расчёт R    
    R = []
79/321:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1)
#Расчёт R    
    R = []
79/322:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(np.array(S1)
#Расчёт R    
    R = []
79/323:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(np.array(S1))
#Расчёт R    
    R = []
79/324:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(np.size(S1))
#Расчёт R    
    R = []
79/325:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(np.dim(S1))
#Расчёт R    
    R = []
79/326:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1)
#Расчёт R    
    R = []
80/1:
import numpy as np
import scipy
import math
import matplotlib.pyplot as plt
80/2: file = open("table.txt", "r").read()
80/3: file
80/4:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file)
80/5:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
eps_3=complex(2.56, -0.002) # диэлектрическая проницаемость тонкого слоя диэлектрика на InSb 940-i*260 -15+i*700

#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 

d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps))
80/6:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
80/7:
R = []
for j in range(len(d_2)):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


plt.plot((d_2-d_3)*10**6, R)


#Data=np.array([(d_2-d_3)*10**6, R])
79/327:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1@S2)
#Расчёт R    
    R = []
79/328:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1@S1)
#Расчёт R    
    R = []
79/329:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S2@S2)
#Расчёт R    
    R = []
79/330:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1.shape)
#Расчёт R    
    R = []
79/331:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S2.shape)
#Расчёт R    
    R = []
79/332:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1)
#Расчёт R    
    R = []
79/333:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1.real)
#Расчёт R    
    R = []
79/334:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1.real@S1.real)
#Расчёт R    
    R = []
79/335:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1.real)
#Расчёт R    
    R = []
79/336:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1)
#Расчёт R    
    R = []
79/337:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(S1.real)
#Расчёт R    
    R = []
79/338:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(float(S1.real)
#Расчёт R    
    R = []
79/339:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    print(float(S1.real))
#Расчёт R    
    R = []
80/8:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S1.shape
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
80/9:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
print(S1.shape)
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
80/10:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
80/11:
kz_1=np.sqrt(eps_1)*np.cos(teta)
kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
#Коэффициенты отражения
r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
              r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34], 
                [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
                 np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
print(S3.shape)
79/340:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
#Расчёт R    
    R = []
79/341:
    angle = teta
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    print(S1.shape)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
#Расчёт R    
    R = []
79/342:
    angle = 0.5
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    print(S1.shape)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
#Расчёт R    
    R = []
79/343:
    print(teta)
    j = 3
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    print(S1.shape)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
#Расчёт R    
    R = []
79/344:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/345:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/346:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2))[0]]
79/347:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/348:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
79/349: file = open("table.txt", "r").read()
79/350: file
79/351:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
79/352:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
79/353:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/354:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/355:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
79/356:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, angle, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/357:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, angle, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/358:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/359:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, teta, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print
79/360: reflect4(d_2, 1, 1)
79/361:
print(scipy.optimize.curve_fit(reflect4, d_2, teta, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/362: reflect4(d_2, teta, 1, 1)
79/363:
print(scipy.optimize.curve_fit(reflect4, d_2, teta, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, teta, R_Gr)[0])
79/364:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print
79/365:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))

def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/366:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/367:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print
79/368: reflect4(d_2, 1, 1)
79/369:
print(scipy.optimize.curve_fit(reflect4, d_2, teta, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, teta, R_Gr)[0])
79/370:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, teta, R_Gr)[0])
79/371:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/372:
def reflect4(d, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/373:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print
79/374: reflect4(d_2, 1, 1)
79/375:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/376:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(R_In))
79/377:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2-delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(R_In))
79/378:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/379: reflect4(d_2, 1, 1)
79/380:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/381:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/382:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/383:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 2000])))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/384:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/385:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-30, 2000])))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/386:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-1, 2000])))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/387:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 2000])))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/388:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/389:
a = np.array([1, 2, 3, 5])
b = 2*a
def f(x, p):
    return p*x
scipy.optimize.curve_fit(f, a, b)
79/390:
a = np.array([1, 2, 3, 5])
b = 2*a + 5
def f(x, p1, p2):
    return p1*x + p2
scipy.optimize.curve_fit(f, a, b)
79/391:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 2000])), full_output = True)
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/392:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 2000]), full_output = True)
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/393:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 2000]), full_output = True)
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/394:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 2000]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/395:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 1500]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/396:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/397:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-50, 500], [-500, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/398:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-50, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/399:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-100, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/400:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-400, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/401:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-400, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/402:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-800, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/403:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-600, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/404:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-60, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/405:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-10, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/406:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-1, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/407:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/408:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [0, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/409:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [100, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/410:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [1000, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/411:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [500, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/412:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([0, 500], [500, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/413:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([0, 500], [400, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/414:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([0, 500], [1000, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/415:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([0, 500], [600, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/416:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/417:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([0, 500], [600, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/418:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/419:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, 581.41035799, 1068.85518177), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/420:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/421:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, 0, 0), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/422:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, 1, 1), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/423:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, -1, 1), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/424:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, -100, 1000), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/425:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [600, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/426:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 500], [-1, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/427:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-100, 1300]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/428:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/429:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, -150, 1600), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/430:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/431:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-100, 10000]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/432:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-200, 10000]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/433:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 500], [-1000, 10000]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/434:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1001, 500], [-1000, 10000]), full_output = True))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/435:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/436:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, 10000), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/437:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, 5000), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/438:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1001, 500], [-1000, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/439:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1001, -1000], [1000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/440:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1001, -1000], [-50, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/441:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1001, -1000], [-100, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/442:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1001, -1000], [-900, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/443:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-10000, -1000], [-900, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/444:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-10000, -1000], [-9000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/445:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/446:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
79/447:
print(scipy.optimize.curve_fit(reflect4, d_2[10:40], R_Gr[10:40], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/448:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/449: R_Gr[10:30]
79/450:
R_Gr[10:30]
d_2[10:30]
79/451: R_Gr[10:30]+d_2[10:30]
79/452: R_Gr[10:30]-d_2[10:30]
79/453:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/454: R_Gr[10:30]/d_2[10:30]
79/455:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/456:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
79/457: R_Gr[10:30]/d_2[10:30]
79/458:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
79/459:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
83/1:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
83/2:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
83/3: file = open("table.txt", "r").read()
83/4: file
83/5:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
83/6:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
83/7:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
83/8:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/9:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
83/10: R_Gr[10:30]/d_2[10:30]
83/11:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/12:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/1:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/2:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
84/3:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
84/4:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/5:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = [list(map(float, division.split('\t'))) for division in divisions]
    return result_2d_list
string_to_np_array(file1)
84/6:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/7:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/8:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/9:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/10: file
84/11:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/12:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
84/13:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
84/14:
file1 = open("R(gap)_InSb_ori_source.txt", "r").read()
file2 = open("R(gap)_InSb_ori_source.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/15:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/16:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file1)
84/17:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
string_to_np_array(file2)
84/18:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file1 - file2
84/19:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file1
84/20: a = np.empty
84/21:
a = np.ndarray(1, 1)
a
84/22:
a = np.ndarray(3)
a
84/23:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file1 = string_to_np_array(file1) 
file2 = string_to_np_array(file2)
84/24:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file1 = string_to_np_array(file1) 
file2 = string_to_np_array(file2)
file1 - file2
84/25:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file1 = string_to_np_array(file1) 
file2 = string_to_np_array(file2)
np.concatenate(file1, file2)
84/26:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[:1][] 
#file2 = string_to_np_array(file2)
file
84/27:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::1][] 
#file2 = string_to_np_array(file2)
file
84/28:
a = [1, 2, 3]
a[::]
84/29:
a = [1, 2, 3]
a[1::]
84/30:
a = [1, 2, 3]
a[::1]
84/31:
a = [1, 2, 3]
a[0::]
84/32:
a = [1, 2, 3]
a[::0]
84/33:
a = [1, 2, 3]
a[::1]
84/34:
a = [1, 2, 3]
a[::2]
84/35:
a = [1, 2, 3]
a[::3]
84/36:
a = [1, 2, 3, 4, 5, 6, 7, 8]
a[1::7]
84/37:
a = [1, 2, 3, 4, 5, 6, 7, 8]
a[1]
84/38:
a = [1, 2, 3, 4, 5, 6, 7, 8]
a[1::]
84/39:
a = [1, 2, 3, 4, 5, 6, 7, 8]
a[0::]
84/40:
a = [1, 2, 3, 4, 5, 6, 7, 8]
a[4::]
84/41:
a = [1, 2, 3, 4, 5, 6, 7, 8]
a[::-1]
84/42:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::1][::] 
#file2 = string_to_np_array(file2)
file
84/43:
a = [1, 2, 3, 4, 5, 6, 7, 8]
a[:3:]
84/44:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[:2:][::] 
#file2 = string_to_np_array(file2)
file
84/45:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::][:2:] 
#file2 = string_to_np_array(file2)
file
84/46:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::][::] 
#file2 = string_to_np_array(file2)
file
84/47:
a = [1, 2, 3]
a[:2:]
84/48:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::][:2:] 
#file2 = string_to_np_array(file2)
file
84/49:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[:2:][::] 
#file2 = string_to_np_array(file2)
file
84/50:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::][:2:] 
#file2 = string_to_np_array(file2)
file
84/51:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::, :2:]
#np.insert (file, 3 , , axis= 1 )
#file2 = string_to_np_array(file2)
file
84/52:
a = [1, 2, 3]
a[1:2:]
84/53:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#np.insert (file, 3 , , axis= 1 )

column
84/54:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
file = np.insert (file, 3, column, , axis= 1 )

file
84/55:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
file = np.insert (file, 3, column,  axis= 1 )

file
84/56:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
file = np.append (file, column,  axis= 1 )

file
84/57:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
file = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
file = np.append (file, column,  axis= 1 )

file
84/58:
a = [1, 2, 3]
a[1:2:]
84/59: file
84/60:

Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
84/61:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/62:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/63:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/64:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/65: R_Gr[10:30]/d_2[10:30]
84/66:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/67:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/68: reflect4(d_2, 1, 1)
84/69:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

Data
84/70:
a = [1, 2, 3]
a[1:2:]
84/71: file
84/72:

Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
84/73:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/74:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/75:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/76:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/77: R_Gr[10:30]/d_2[10:30]
84/78:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/79:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/80:


d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
84/81:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/82:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/83:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/84:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/85: R_Gr[10:30]/d_2[10:30]
84/86:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/87:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/88: reflect4(d_2, 1, 1)
84/89:
R = []
for j in range(len(d_2)):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


plt.plot((d_2-d_3)*10**6, R)


#Data=np.array([(d_2-d_3)*10**6, R])
84/90:
inc_angle = 40*2*math.pi/360
angle = np.pi/4-np.arcsin(np.sin(np.pi/4-inc_angle)/np.sqrt(e1))
e1 = 1
e2 = 1

w_len = 197*pow(10, -6)
def kx(e3):
    return 2*np.pi/w_len/np.sqrt(e2)*np.sqrt(e2*e3/(e2+e3))

def kz1(e3):
    return kx(e3)*np.sqrt(e1-e1*pow(np.sin(angle), 2))

def kz2(e3):
    return kx(e3)*np.sqrt(e2-e1*pow(np.sin(angle), 2))

def kz3(e3):
    return kx(e3)*np.sqrt(e3-e1*pow(np.sin(angle), 2))

def optim(e3):
    return abs(d  + 0.5*kz2*complex(0, 1) * np.log(-(kz1-e1*kz2)(kz2*e3+kz3(e3))/(kz2*e3-kz3(e3))/(kz1+e1*kz2)  ))
84/91:
R = []
for j in range(len(d_2)):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


plt.plot((d_2-d_3)*10**6, R)


#Data=np.array([(d_2-d_3)*10**6, R])
84/92:


d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_In
84/93:


d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_In
84/94:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/95:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/96:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/97:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/98: R_Gr[10:30]/d_2[10:30]
84/99:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/100:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/101:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

Data
84/102:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#Data = np.append (file, column,  axis= 1 )

Data
84/103:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#Data = np.append (file, column,  axis= 1 )

Column
84/104:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#Data = np.append (file, column,  axis= 1 )

column
84/105:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

Data
84/106:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )
d_2 = Data[::, 0]*83*10**(-9)
Data
84/107:
a = [1, 2, 3]
a[1:2:]
84/108: file
84/109:


d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_In
84/110:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/111:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/112:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/113:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/114: R_Gr[10:30]/d_2[10:30]
84/115:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/116:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/117:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

Data
84/118:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/119:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/120:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/121:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/122: R_Gr[10:30]/d_2[10:30]
84/123:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/124:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/125:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
84/126:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, label = "InSb")
plt.plot(d_2, R_Gr, label = "Gr")

d_min = d_2[19] #экспериментальный минимум
R_Gr
84/127:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, label = 'InSb')
plt.plot(d_2, R_Gr, label = 'Gr')

d_min = d_2[19] #экспериментальный минимум
R_Gr
84/128:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, label = 'InSb')
plt.plot(d_2, R_Gr, label = 'Gr')

d_min = d_2[19] #экспериментальный минимум
R_Gr
plt.show()
84/129:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, 'ob', 'label = 'InSb')
plt.plot(d_2, R_Gr, label = 'Gr')

d_min = d_2[19] #экспериментальный минимум

plt.show()
84/130:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, 'Ob', 'label = 'InSb')
plt.plot(d_2, R_Gr, label = 'Gr')

d_min = d_2[19] #экспериментальный минимум

plt.show()
84/131:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, 'Ob', label = 'InSb')
plt.plot(d_2, R_Gr, label = 'Gr')

d_min = d_2[19] #экспериментальный минимум

plt.show()
84/132:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, 'label = 'InSb')
plt.plot(d_2, R_Gr, label = 'Gr')

d_min = d_2[19] #экспериментальный минимум

plt.show()
84/133:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, )
plt.plot(d_2, R_Gr, label = 'Gr')

d_min = d_2[19] #экспериментальный минимум

plt.show()
84/134:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум

plt.show()
84/135:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
R_Gr
plt.show()
84/136:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]

R_Gr = Data[::, 2]
noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
84/137:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 2]

R_Gr = Data[::, 1]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
84/138:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 2]

R_Gr = Data[::, 1]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
84/139:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/140:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/141:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/142:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/143: R_Gr[10:30]/d_2[10:30]
84/144:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/145:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
83/13:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/14:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
83/15:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
83/16: file = open("table.txt", "r").read()
83/17: file
83/18:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
83/19:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
83/20:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
83/21:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/22:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
teta
#reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/23:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
reflect3(d_2, teta[0])
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/24:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
83/25:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
reflect3(d_2, teta[0])
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/26:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
#reflect3(d_2, teta[0])
teta
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/27:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
#reflect3(d_2, teta[0])
teta[0]
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/28:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
#reflect3(d_2, teta[0])
float(teta[0])
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/29:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
#reflect3(d_2, teta[0])
teta[0][0]
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/30:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (np.pi/8, 3*np.pi/8))
reflect3(d_2, teta[0][0])

#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/31:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
83/32: R_Gr[10:30]/d_2[10:30]
83/33:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/34:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
83/35:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/36:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
83/37: R_Gr[10:30]/d_2[10:30]
83/38:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/39:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
83/40:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
teta
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/41:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/146:
teta = 0.7291350762966604 #из предыдущего файла
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/147:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/148: R_Gr[10:30]/d_2[10:30]
84/149:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/150:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/151:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30],  full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/152: plt.plot(d_2, reflect(d_2))
84/153: plt.plot(d_2, reflect3(d_2))
84/154: plt.plot(d_2, reflect3(d_2, teta))
84/155:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')

plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/156:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/157:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/158:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
print(teta*180/np.pi)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
83/42:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/159:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta*180/np.pi)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/160:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/161:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/162:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/163: R_Gr[10:30]/d_2[10:30]
84/164:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30],  full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/165:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
84/166:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
print(np.argsort(reflect3(d_2, teta)))
83/43:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2)
84/167:
gap = [0.000e+00 8.300e-06 1.660e-05 2.490e-05 3.320e-05 4.150e-05 4.980e-05
 5.810e-05 6.640e-05 7.470e-05 8.300e-05 9.130e-05 9.960e-05 1.079e-04
 1.162e-04 1.245e-04 1.328e-04 1.411e-04 1.494e-04 1.577e-04 1.660e-04
 1.743e-04 1.826e-04 1.909e-04 1.992e-04 2.075e-04 2.158e-04 2.241e-04
 2.324e-04 2.407e-04 2.490e-04 2.573e-04 2.656e-04 2.739e-04 2.822e-04
 2.905e-04 3.320e-04 3.735e-04 4.150e-04 4.565e-04 4.980e-04 5.395e-04
 5.810e-04]
83/44: print(Data[::, 0])
83/45:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2)
84/168:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
print(d_2)
84/169:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/170:
#print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30],  full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
print(d_2)
84/171:
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 2]

R_Gr = Data[::, 1]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
84/172:
d_2 = Data[::, 0] #уже переведено в микроны
R_In = Data[::, 2]

R_Gr = Data[::, 1]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
84/173:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/174:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/175:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/176:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/177:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/178:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/179: R_Gr[10:30]/d_2[10:30]
84/180:
#print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30],  full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
print(d_2)
84/181:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/182: reflect4(d_2, 1, 1)
84/183:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/184:
teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/185:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/186: R_Gr[10:30]/d_2[10:30]
84/187:
#print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30],  full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
print(d_2)
84/188:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/189:
d_2 = Data[::, 0]*10**(-6) #уже переведено в микроны
R_In = Data[::, 2]

R_Gr = Data[::, 1]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
84/190:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
84/191:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
84/192:
teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/193:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/194: R_Gr[10:30]/d_2[10:30]
84/195:
#print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30],  full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
print(d_2)
84/196:
#print(reflect3(d))
#delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
#plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
#plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/197: reflect4(d_2, 1, 1)
84/198:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/199:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/200:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
#reflect3(d_2, teta)
reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/201:
#teta = 0.7291350762966604 #из предыдущего файла
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
print(teta)
#reflect3(d_2, teta)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/202:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/203:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/204:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/205:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-10000, -1000], [-8000, 1000]), method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/206:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr,  full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/207:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/208:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/209:
#teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
teta = scipy.optimize.curve_fit(reflect3, d_2[4:11], R_In[4:11], bounds = (0.65, 0.75))[0][0] #подгонка только в окрестности минимума
print(teta)
#reflect3(d_2, teta)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/210:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
84/211: R_Gr[10:30]/d_2[10:30]
84/212:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/213:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/214:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
84/215:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/216:
#teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
teta = scipy.optimize.curve_fit(reflect3, d_2[4:11], R_In[4:11], bounds = (0.65, 0.75))[0][0] #подгонка только в окрестности минимума
print(teta*180/np.pi)
#reflect3(d_2, teta)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
84/217:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/218:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/219:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

Data
84/220:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

file1
84/221:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

file1[::, 2]
84/222:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

file1
84/223:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

file1[::, ::]
84/224:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

file1[::, 2]
84/225:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )

file2[::, 2]
84/226:
d_2 = Data[::, 0]*10**(-6) #уже переведено в микроны
R_In = Data[::, 2]
R_Gr = Data[::, 1]
err_In = file2[::, 2]
err_Gr = file1[::, 2]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
84/227:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]

plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In ,'vr', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errbar(d_2*10**6, R_Gr, yerr = err_Gr, 'vg', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/228:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]

plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In,'vr', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errbar(d_2*10**6, R_Gr, yerr = err_Gr, 'vg', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/229:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]

plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In,'vr', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errbar(d_2*10**6, R_Gr, yerr = err_Gr, 'vg', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/230:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]

plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'vr', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'vg', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/231:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]

plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'vr', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'vg', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/232:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]

plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/233:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]

plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
84/234: (d_2+delta)*10**6
84/235: d_2_plot = (d_2+delta)*10**6
84/236:
d_2_plot = (d_2+delta)*10**6
reflect4(d_2, eps_3.real, eps_3.imag)
reflect3(d_2, teta),
84/237:
d_2_plot = (d_2+delta)*10**6
reflect4(d_2, eps_3.real, eps_3.imag)
reflect3(d_2, teta)
export = open("export.txt", w)
84/238:
d_2_plot = (d_2+delta)*10**6
reflect4(d_2, eps_3.real, eps_3.imag)
reflect3(d_2, teta)
export = open("export.txt", 'w')
84/239:
d_2_plot = (d_2+delta)*10**6
reflect4(d_2, eps_3.real, eps_3.imag)
reflect3(d_2, teta)
export = open("export.txt", 'w')
export.write(d_2plot)
84/240:
d_2_plot = (d_2+delta)*10**6
reflect4(d_2, eps_3.real, eps_3.imag)
reflect3(d_2, teta)
export = open("export.txt", 'w')
export.write(d_2_plot)
84/241:
d_2_plot = (d_2+delta)*10**6
reflect4(d_2, eps_3.real, eps_3.imag)
reflect3(d_2, teta)
export = open("export.txt", 'w')
export.write(str(d_2_plot)
84/242:
d_2_plot = (d_2+delta)*10**6
reflect4(d_2, eps_3.real, eps_3.imag)
reflect3(d_2, teta)
export = open("export.txt", 'w')
export.write(str(d_2_plot))
84/243:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
export = open("export.txt", 'w')
export.write(str(d_2_axis)+'\n'+r3_axis + '\n'+ r3_axis+'\n')
84/244:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
export = open("export.txt", 'w')
export.write(str(d_2_axis)+'\n'+str(r3_axis) + '\n'+ str(r3_axis)+'\n')
84/245:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
export = open("export.txt", 'w')
export.write(str(d_2_axis)+'\n'+str(r3_axis) + '\n'+ str(r3_axis)+'\n')
84/246:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
export = open('export.txt', 'w')
export.write(str(d_2_axis)+'\n'+str(r3_axis) + '\n'+ str(r3_axis)+'\n')
84/247:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
export = open('export.txt', 'w')
export.write(str(d_2_axis)+'\n'+str(r3_axis) + '\n'+ str(r3_axis)+'\n')
export.close()
84/248:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(enumerate(d_2_axis, r4_axis))
export = open('export.txt', 'w')
export.write(str(d_2_axis)+'\n'+str(r3_axis) + '\n'+ str(r3_axis)+'\n')
export.close()
84/249:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis))
export = open('export.txt', 'w')
export.write(str(d_2_axis)+'\n'+str(r3_axis) + '\n'+ str(r3_axis)+'\n')
export.close()
84/250:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
export.write(str(d_2_axis)+'\n'+str(r3_axis) + '\n'+ str(r3_axis)+'\n')
export.close()
84/251:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
84/252:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
d_2
84/253:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
d_2_axis
84/254:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
delta
84/255:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
delta
86/1: ?
86/2: jupyter notebook
87/1:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export_non_orient.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
delta
87/2:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
87/3:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
87/4: file = open("table.txt", "r").read()
87/5: file
87/6:
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file)
d_2 = Data[::, 0]*83*10**(-9)  #Шкала гониометра
R_In = Data[::, 1]
noise_In = 12
R_Gr = Data[::, 2]
noise_Gr = 9
R_In = (R_In - noise_In)/(R_In[-1] - noise_In)
R_Gr = (R_Gr - noise_Gr)/(R_Gr[-1] - noise_Gr)
plt.plot(d_2, R_In)
plt.plot(d_2, R_Gr)

d_min = d_2[19] #экспериментальный минимум
R_Gr
87/7:


""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
87/8:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
87/9:
teta = scipy.optimize.curve_fit(reflect3, d_2, R_In)[0][0]
print(teta)
reflect3(d_2, teta)
#reflect4(d_2, R_Gr)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
87/10:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
87/11: R_Gr[10:30]/d_2[10:30]
87/12:
print(scipy.optimize.curve_fit(reflect4, d_2[10:30], R_Gr[10:30], bounds = ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
87/13:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr=0.1, marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)

plt.legend(fontsize=9)
plt.show()
print(d_2)
87/14:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export_non_orient.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
delta
87/15:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export_non_orient.txt', 'w')
for line in zip(d_2_axis, R_Gr, R_In, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
delta
90/1:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
90/2:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
90/3:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
90/4:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )
90/5:
d_2 = Data[::, 0]*10**(-6) #уже переведено в микроны
R_In = Data[::, 2]
R_Gr = Data[::, 1]
err_In = file2[::, 2]
err_Gr = file1[::, 2]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
90/6:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
90/7:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
90/8:
#teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
teta = scipy.optimize.curve_fit(reflect3, d_2[4:11], R_In[4:11], bounds = (0.65, 0.75))[0][0] #подгонка только в окрестности минимума
print(teta*180/np.pi)
#reflect3(d_2, teta)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
90/9: R_Gr[10:30]/d_2[10:30]
90/10:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
90/11:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]


plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
90/12:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
delta
90/13:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
90/14:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
90/15:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )
90/16:
a = [1, 2, 3]
a[1:2:]
91/1:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
91/2:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
91/3:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )
92/1:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
92/2:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
92/3:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )
92/4:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file, column,  axis= 1 )
92/5:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file1, column,  axis= 1 )
92/6:
a = [1, 2, 3]
a[1:2:]
92/7: file
92/8:
d_2 = Data[::, 0]*10**(-6) #уже переведено в микроны
R_In = Data[::, 2]
R_Gr = Data[::, 1]
err_In = file2[::, 2]
err_Gr = file1[::, 2]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
92/9:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
92/10:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
Data = np.append (file1, column,  axis= 1 )
92/11:
a = [1, 2, 3]
a[1:2:]
92/12: file
92/13:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#Data = np.append (file, column,  axis= 1 )
#Data
92/14:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#Data = np.append (file, column,  axis= 1 )
file1
92/15:
file1 = open("R(gap)_InSb.txt", "r").read()
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#Data = np.append (file, column,  axis= 1 )
file2
92/16:
d_2 = file1[::, 0]*10**(-6) #уже переведено в микроны
R_In = file2[::, 1]
R_Gr = file1[::, 1]
err_In = file2[::, 2]
err_Gr = file1[::, 2]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
92/17:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
92/18:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
92/19:
#teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
teta = scipy.optimize.curve_fit(reflect3, d_2[4:11], R_In[4:11], bounds = (0.65, 0.75))[0][0] #подгонка только в окрестности минимума
print(teta*180/np.pi)
#reflect3(d_2, teta)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
92/20:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
92/21: R_Gr[10:30]/d_2[10:30]
92/22:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
92/23:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]


plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
92/24:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
delta
92/25: reflect4(d_2, 1, 1)
92/26:
R = []
for j in range(len(d_2)):   #1:1:length(d_2)
    S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
    S=S1@S2@S3
    R += [abs(S[1][0]/S[0][0])]


plt.plot((d_2-d_3)*10**6, R)


#Data=np.array([(d_2-d_3)*10**6, R])
92/27:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
92/28:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps3
92/29:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps_3
92/30:
d_2 = file1[::, 0]*10**(-6) #уже переведено в микроны
R_In = file2[::, 1]
R_Gr = file1[::, 1]
err_In = file2[::, 2]
err_Gr = file1[::, 2]

noise_Gr = 9

plt.plot(d_2, R_In, ':b')
plt.plot(d_2, R_Gr, '--r')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
92/31:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
92/32:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
92/33:
#teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
teta = scipy.optimize.curve_fit(reflect3, d_2[4:11], R_In[4:11], bounds = (0.65, 0.75))[0][0] #подгонка только в окрестности минимума
print(teta*180/np.pi)
#reflect3(d_2, teta)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
92/34:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
92/35: R_Gr[10:30]/d_2[10:30]
92/36: R_Gr[10:30]/d_2[10:30]
92/37:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps3
92/38:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps_3
92/39:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps_3
92/40:
#print(reflect3(d))
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]


plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
92/41:
d_2_axis = (d_2+delta)*10**6
r4_axis = reflect4(d_2, eps_3.real, eps_3.imag)
r3_axis = reflect3(d_2, teta)
print(zip(d_2_axis, r4_axis, r3_axis))
export = open('export.txt', 'w')
for line in zip(d_2_axis, r4_axis, r3_axis):
    export.write(str(line)+'\n')
export.close()
delta
92/42:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
92/43:
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0], bounds = ([-1000, 0], [0, 1000]))
eps_3
92/44:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps_3
92/45:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/46:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds =  ([-10000, -1000], [-8000, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/47:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/48:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-10, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/49:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-100, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/50:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-1000, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/51:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-800, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/52:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-1000, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/53:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-999, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/54:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-1, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/55:
d_2 = file1[::, 0]*10**(-6) #уже переведено в микроны
R_In = file2[::, 1]
R_Gr = file1[::, 1]
err_In = file2[::, 2]
err_Gr = file1[::, 2]

noise_Gr = 9

plt.plot(d_2, R_In, '--r')
plt.plot(d_2, R_Gr, ':b')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
92/56:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-500, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/57:
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-800, 0], [-500, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/58:
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-800, 0], [-500, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/59:
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-800, 0], [0, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/60:
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-500, 10], [-1, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/61:
print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr, bounds = ([-500, 10], [-1, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/62:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2+delta, R_Gr, bounds = ([-500, 10], [-1, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/63:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2+delta, R_Gr, bounds = ([-500, 10], [-1, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/64:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-500, 10], [-1, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/65:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 10], [-1, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/66:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 10], [-10, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/67:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 10], [-100, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/68:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 10], [-1, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/69:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 10], [-0, 5000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/70:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 500], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/71:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 700], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/72:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3
92/73:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps_3 = complex(-10, 200)
plt.p
92/74:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps_3 = complex(-10, 200)
92/75:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
92/76:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
eps_3 = complex(0, 200)
92/77:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 200)
92/78:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(-1000, 200)
92/79:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
92/80:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(1000, 200)
92/81:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
92/82:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(1, 200)
92/83:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 200)
92/84:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
92/85:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
92/86:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
92/87:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 300], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
92/88:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 700], [-0, 800]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
92/89:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 800], [-0, 1000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
92/90:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 800], [-0, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
92/91:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 700], [-0, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
92/92:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 1000], [-0, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
92/93:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-0, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
95/1:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
95/2:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
95/3:
file1 = open("R(gap)_InSb.txt", "r").read()  #файлы перепутаны!
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#Data = np.append (file, column,  axis= 1 )
file2
95/4:
a = [1, 2, 3]
a[1:2:]
95/5: file
95/6:
d_2 = file1[::, 0]*10**(-6) #уже переведено в микроны
R_In = file2[::, 1]
R_Gr = file1[::, 1]
err_In = file2[::, 2]
err_Gr = file1[::, 2]

noise_Gr = 9

plt.plot(d_2, R_In, '--r')
plt.plot(d_2, R_Gr, ':b')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
95/7:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
95/8:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
95/9:
#teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
teta = scipy.optimize.curve_fit(reflect3, d_2[4:11], R_In[4:11], bounds = (0.65, 0.75))[0][0] #подгонка только в окрестности минимума
print(teta*180/np.pi)
#reflect3(d_2, teta)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
95/10:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
95/11: R_Gr[10:30]/d_2[10:30] #проверка совпадения размерностей
95/12:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-0, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
95/13:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-1, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
95/14:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-1, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
95/15:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-1, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(0, 261)
95/16:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-1, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(-100, 261)
95/17:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
95/18:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:], bounds = ([-1000, 0], [-1, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(-1, 261)
95/19:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [-1, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(-1, 261)
95/20:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
95/21:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]]
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:], R_Gr[5:])[0])
eps_3 = complex(-1, 261)
95/22:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3 = complex(-1, 261)
95/23:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
95/24:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
print(eps_3)
#eps_3 = complex(-1, 261)
95/25:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12])[0])
#eps_3 = complex(-1, 261)
95/26:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]))[0])
#eps_3 = complex(-1, 261)
95/27:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
95/28:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]))[0])
print(eps_3)
#eps_3 = complex(-1, 261)
95/29: %history -g -f anyfilename
95/30:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]))[0])
print(eps_3)
#eps_3 = complex(-1, 261)
95/31: pwd
96/1: %notebook Orient_notebook
96/2: %notebook Orient_notebook
96/3: %history -g -f -o 30 graphene_epsilon
96/4: %history -n -o -g -f 30 graphene_epsilon
96/5: %history -n -o -g
96/6: %history -n -o -g 5
96/7: %history [-n] [-o] [-g] [5]
96/8: %history [-n] [-o] [-g] [7]
96/9: %history 3
96/10: %history 1
96/11:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]))[0])
print(eps_3)
#eps_3 = complex(-1, 261)
%history
96/12:
import numpy as np
import scipy 
import math
import matplotlib.pyplot as plt
96/13:
n_1=complex(1.531, -0.002) # комплексный показатель преломления призмы (Zeonex)
eps_1=n_1**2 # диэлектрическая проницаемость призмы (Zeonex)
eps_2=1 # диэлектрическая проницаемость воздуха
#eps_4 = complex(-18.474508935284483+0.006568625288807081j) по Друде-Лоренцу
eps_4=complex(-17.3, 7.12) #InSb из telegram
#teta_0=41.0*np.pi/180 #угол падения на призму ??????
#teta_0=40.9*np.pi/180  #угол падения на призму ??????
#teta = np.pi/4-np.arcsin(np.sin(np.pi/4-teta_0)/n_1.real) #угол падения на выходе из призмы 
#teta = 42.16*np.pi/180 #файл 3 слоя
wavelength=197*10**(-6)
d_3 = 17*10**(-9) # толщина графена
96/14:
file1 = open("R(gap)_InSb.txt", "r").read()  #файлы перепутаны!
file2 = open("R(gap)_InSb+Graphene.txt", "r").read()
def string_to_np_array(input_string):
    divisions = input_string.split('\n')
    result_2d_list = np.array([list(map(float, division.split('\t'))) for division in divisions])
    return result_2d_list
Data = string_to_np_array(file1)[::, :2:]
file1 = string_to_np_array(file1)
file2 = string_to_np_array(file2)
column = file2[::, 1:2:]
#Data = np.append (file, column,  axis= 1 )
file2
96/15:
a = [1, 2, 3]
a[1:2:]
96/16: file
96/17: file
96/18:
d_2 = file1[::, 0]*10**(-6) #уже переведено в микроны
R_In = file2[::, 1]
R_Gr = file1[::, 1]
err_In = file2[::, 2]
err_Gr = file1[::, 2]

noise_Gr = 9

plt.plot(d_2, R_In, '--r')
plt.plot(d_2, R_Gr, ':b')

d_min = d_2[19] #экспериментальный минимум
print(R_Gr)
plt.show()
print(d_2)
96/19:
""""#Параметры InSb в модели Друде Лоренца
wp=0.578*10**14 #плазменная частота (рад/с)
gp=1/5.16*10**3  #частота столкновений (рад/с)
wl=3.4*10**13 #частота Лоренца (рад/с)
gl=1/3*10**12 #Лоренцева частота столкновений (рад/с)
Al=2.02 #Амплитуда в модели Лоренца
eps0=15.86 #диэлектрическая проницаемость на бесконечности

wavelength=197*10**(-6)  #длина волны излучения
f=3*10**8/wavelength  #частота излучения
w=6.28*f  #круговая частота

#Модель Друде-Лоренца для проницаемости InSb
eps_4=eps0-wp**2/complex(w**2, gp*w)+Al*wl**2/complex(wl**2-w**2, -gl*w) 
print(eps_4)
d_2=np.linspace(0*10**(-6), 450*10**(-6), 450)  #величина зазора между призмой и InSb
d_3=4.7*10**(-6) 
teta=42.21*np.pi/180  #угол падения в призме

# f=1.5*10**12:0.01*10**12:2*10**12 
# w=6.28*f 
# 
# #Модель Друде-Лоренца для проницаемости InSb
# for j=1:1:length(w)
#     eps(j)=eps0-wp**2/(w(j)**2+i*gp*w(j))+Al*wl**2/(wl**2-w(j)**2-i*gl*w(j)) 
# end 
# plot (f, real(eps), f, imag(eps)) """"""
96/20:
#угол не подгоняется
""""def reflect3(d):
    
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(teta)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23],  
         [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23, 
         np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    print(S)
    return(np.array(R))
"""

#угол подгоняется
def reflect3(d, angle):
    
    kz_1=np.sqrt(eps_1)*np.cos(angle)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(angle)**2)
    kz_3=np.sqrt(eps_4-eps_1*np.sin(angle)**2)
    
#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_4*kz_2-eps_2*kz_3)/(eps_4*kz_2+eps_2*kz_3)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2) #???
    t_23=2*kz_2*np.sqrt(eps_2*eps_4)/(eps_4*kz_2+eps_2*kz_3)
   
 #Матрица пропускания
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])    
    
#Расчёт R    
    R = []
    for j in range(len(d)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2
        R += [abs(S[1][0]/S[0][0])]
    return(np.array(R))
96/21:
#teta = 0.7291350762966604 #из предыдущего файла
#teta = scipy.optimize.curve_fit(reflect3, d_2, R_In, bounds = (0.65, 0.75))[0][0]
teta = scipy.optimize.curve_fit(reflect3, d_2[4:11], R_In[4:11], bounds = (0.65, 0.75))[0][0] #подгонка только в окрестности минимума
print(teta*180/np.pi)
#reflect3(d_2, teta)
#print(scipy.optimize.curve_fit(reflect4, d_2, R_Gr))

#eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2, R_Gr)[0])
96/22:
def reflect4(d_2, e3_re, e3_im):
    eps_3 = complex(e3_re, e3_im)
    kz_1=np.sqrt(eps_1)*np.cos(teta)
    kz_2=np.sqrt(eps_2-eps_1*np.sin(teta)**2)
    kz_3=np.sqrt(eps_3-eps_1*np.sin(teta)**2)
    kz_4=np.sqrt(eps_4-eps_1*np.sin(teta)**2)


#Коэффициенты отражения
    r_12=(eps_2*kz_1-eps_1*kz_2)/(eps_2*kz_1+eps_1*kz_2)
    r_23=(eps_3*kz_2-eps_2*kz_3)/(eps_3*kz_2+eps_2*kz_3)
    r_34=(eps_4*kz_3-eps_3*kz_4)/(eps_4*kz_3+eps_3*kz_4)

#Коэффициенты пропускания
    t_12=2*kz_1*np.sqrt(eps_1*eps_2)/(eps_2*kz_1+eps_1*kz_2)
    t_23=2*kz_2*np.sqrt(eps_2*eps_3)/(eps_3*kz_2+eps_2*kz_3)
    t_34=2*kz_3*np.sqrt(eps_3*eps_4)/(eps_4*kz_3+eps_3*kz_4)

#Матрица преобразования
    S1=np.array([[1/t_12, r_12/t_12], [r_12/t_12, 1/t_12]])
    S3=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34,
     r_34*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34],
     [r_34*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34, 
     np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_3*d_3)/t_34]])
    
    R = []
    for j in range(len(d_2)):   #1:1:length(d_2)
        S2=np.array([[np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, r_23*np.exp(-complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23],  [r_23*np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23, np.exp(complex(0, 1)*(2*np.pi/wavelength)*kz_2*d_2[j])/t_23]])
        S=S1@S2@S3
        R += [abs(S[1][0]/S[0][0])]
    
    return np.array(R)
96/23: R_Gr[10:30]/d_2[10:30] #проверка совпадения размерностей//
96/24: %history
96/25: pwd
96/26: %notebook Orient_notebook
96/27:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]))[0])
print(eps_3)
#eps_3 = complex(-1, 261)
%history
96/28:
#print(reflect3(d))



plt.plot((d_2+delta)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')
#plt.plot((d_2)*10**6, reflect3(d_2, teta), '--r', label = 'Theory InSb (teta = 41)')


#plt.plot(d_2*10**6, R_In, 'vr', label = 'InSb')
plt.errorbar(d_2*10**6, R_In, yerr = err_In, marker = 'o', label = 'InSb')

#plt.plot(d_2*10**6, R_Gr, 'vg', label = 'Graphene')
plt.errorbar(d_2*10**6, R_Gr, yerr = err_Gr, marker = 'v', label = 'Graphene')

plt.plot((d_2+delta)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')
#plt.plot((d_2)*10**6, reflect4(d_2, eps_3.real, eps_3.imag), '--g', label = 'Theory graphene')

#plt.errorbar(d_2, R_In, yerr = , marker='o', linestyle='none',
#    ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
print(d_2)
plt.legend(fontsize=9)
plt.show()
#print(np.argsort(reflect3(d_2, teta)))
96/29:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]))[0])
print(eps_3)
#eps_3 = complex(-1, 261)
96/30:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]))[0])
print(eps_3)
#eps_3 = complex(-1, 261)
%history
96/31:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]))[0])
print(eps_3)
#eps_3 = complex(-1, 261)
%history -n
96/32:
delta = d_2[np.argsort(R_In)[0]]-d_2[np.argsort(reflect3(d_2, teta))[0]] #поправка на смещение нуля d
print(delta)
print(scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 10000]), full_output = True, method = "trf"))
eps_3 = complex(*scipy.optimize.curve_fit(reflect4, d_2[5:12], R_Gr[5:12], bounds = ([-1000, 0], [0, 1000]))[0])
print(eps_3)
#eps_3 = complex(-1, 261)
%history -n -o
   1: %history -o -g -f orient_output
